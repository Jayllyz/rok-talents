{"version":3,"sources":["Popovers.js","Node.js","Tree.js","Hexagon.js","Toasts.js","TreePanel.js"],"names":["TalentTooltip","Popover","placement","this","props","style","outOfBoundaries","arrowProps","className","Title","talentName","isShownTalentID","talentID","clear","Content","value","max","text","id","icon","faMinusSquare","size","onClick","talentDecrease","faPlusSquare","talentIncrease","Component","Node","bind","setTooltip","getStyle","nextProps","nextState","nodeSize","isShownValues","isSpeedMode","top","y","left","x","type","backgroundImage","process","image","color","talentValues","treeData","treeName","idx","replaceTalentText","tooltip","calcPointsRemaining","prereqs","prereq","prereqsOK","missingPrereqs","forEach","fullTree","getMaxTalentCount","values","push","key","name","changeTalentValue","jsPlumb","select","source","document","getElementById","addClass","showPrereqToast","showPointLimitToast","e","deps","dep","depsOK","removeClass","compressor","onContextMenu","preventDefault","NodeOverlay","OverlayTrigger","trigger","rootClose","flip","delay","show","hide","overlay","NodeContent","data-testid","Tree","nodes","i","data","length","curNode","Error","drawNodes","isShownMouseXY","parseFloat","mouseX","toFixed","mouseY","Hexagon","commander","src","alt","toggleSelect","isShownTotals","calcPointsSpent","getTreeName","ToastMessage","state","open","header","body","setState","Toast","autohide","onClose","Header","Body","PrereqToast","msg","TreePanel","prereqMsg","setMousePosition","window","addEventListener","repaint","this_","ready","setContainer","drawLines","isTouchDevice","panZoomContainer","querySelector","panZoomInstance","panzoom","minZoom","maxZoom","pinchSpeed","zoomDoubleClickSpeed","bounds","boundsPadding","smoothScroll","onTouch","filterKey","on","click","removeEventListener","moveTo","zoomAbs","repaintEverything","deleteEveryEndpoint","setSuspendDrawing","Object","keys","nodeID","activateState","connect","target","endpoint","cssClass","radius","connector","anchors","shape","redContainer","getBoundingClientRect","yellowContainer","blueContainer","setTimeout","redX","clientX","scrollX","width","redY","clientY","scrollY","height","yellowX","yellowY","blueX","blueY","prereqToastRef","pointLimitToastRef","sharedTreeProps","ref","component","dataVersion","red","yellow","blue"],"mappings":"6YAYaA,G,OAAb,iLAEI,OACE,kBAACC,EAAA,EAAD,CACEC,UAAWC,KAAKC,MAAMF,UACtBG,MAAOF,KAAKC,MAAMC,MAClBC,gBAAiBH,KAAKC,MAAME,gBAC5BC,WAAYJ,KAAKC,MAAMG,WACvBC,UAAWL,KAAKC,MAAMI,WAEtB,kBAACP,EAAA,EAAQQ,MAAT,KACE,yBAAKD,UAAU,sBAAsBL,KAAKC,MAAMM,YAC/CP,KAAKC,MAAMO,iBACV,yBAAKH,UAAU,mBAAmBL,KAAKC,MAAMQ,UAE/C,yBAAKP,MAAO,CAAEQ,MAAO,WAGvB,kBAACZ,EAAA,EAAQa,QAAT,CAAiBN,UAAU,qBACzB,yBACEA,UAAS,yCACPL,KAAKC,MAAMW,QAAUZ,KAAKC,MAAMY,IAAM,OAAS,UAGjD,6BACE,2BACGb,KAAKC,MAAMW,QAAUZ,KAAKC,MAAMY,IAAM,cAAgB,WAI1Db,KAAKC,MAAMa,MAGd,yBAAKC,GAAG,iCACN,kBAAC,IAAD,CACEV,UAAU,wBACVW,KAAMC,IACNC,KAAK,KACLC,QAASnB,KAAKC,MAAMmB,iBAGtB,0BAAMf,UAAU,sBACbL,KAAKC,MAAMW,MAAQ,IAAMZ,KAAKC,MAAMY,KAGvC,kBAAC,IAAD,CACER,UAAU,wBACVW,KAAMK,IACNH,KAAK,KACLC,QAASnB,KAAKC,MAAMqB,wBAjDlC,GAAmCC,c,QCG7BC,G,mBACJ,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAGDqB,eAAiB,EAAKA,eAAeG,KAApB,gBACtB,EAAKL,eAAiB,EAAKA,eAAeK,KAApB,gBACtB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAPC,E,mFAUGG,EAAWC,GAC/B,OACE7B,KAAKC,MAAMW,QAAUgB,EAAUhB,OAC/BZ,KAAKC,MAAM6B,WAAaF,EAAUE,UAClC9B,KAAKC,MAAM8B,gBAAkBH,EAAUG,eACvC/B,KAAKC,MAAMO,kBAAoBoB,EAAUpB,iBACzCR,KAAKC,MAAM+B,cAAgBJ,EAAUI,c,iCAiBvC,IAAI9B,EAAQ,GAWZ,OATAA,EAAM+B,IAAMjC,KAAKC,MAAMiC,EACvBhC,EAAMiC,KAAOnC,KAAKC,MAAMmC,EAEA,eAApBpC,KAAKC,MAAMoC,KACbnC,EAAMoC,gBAAN,cAA+BC,GAA/B,2BAAwEvC,KAAKC,MAAMuC,MAAnF,SAEAtC,EAAMoC,gBAAN,cAA+BC,GAA/B,2BAAwEvC,KAAKC,MAAMwC,MAAnF,qBAGKvC,I,mCAWP,IACIwC,EAAe1C,KAAKC,MAAM0C,SAAS3C,KAAKC,MAAM2C,UAAU5C,KAAKC,MAAM4C,KAApD,OAkBnB,OAdI7C,KAAKC,MAAMW,QAAUZ,KAAKC,MAAMY,IACxBiC,YACR9C,KAAKC,MAAM8C,QACXL,EACA1C,KAAKC,MAAMY,IAAM,GAGTiC,YACR9C,KAAKC,MAAM8C,QACXL,EACA1C,KAAKC,MAAMW,S,uCAgBC,IAAD,OACf,GAAIZ,KAAKC,MAAM+C,sBAAwB,EAAG,CAExC,IAAMC,EAAUjD,KAAKC,MAAM0C,SAAS3C,KAAKC,MAAM2C,UAAU5C,KAAKC,MAAM4C,KACjEK,OAECC,GAAY,EACZC,EAAiB,GAErBH,EAAQI,SAAQ,SAAAR,GACM,EAAK5C,MAAMqD,SAAST,EAAM,KAC5BU,YAChB,EAAKtD,MAAM0C,SAAS,EAAK1C,MAAM2C,UAAUC,GAAKW,UAG9CL,GAAY,EACZC,EAAeK,KACb,wBAAIC,IAAKb,GACP,gCACG,EAAK5C,MAAM0C,SAAS,EAAK1C,MAAM2C,UAAUC,GAAKc,YAOrDR,EACEnD,KAAKC,MAAMW,MAAQZ,KAAKC,MAAMY,MAChCb,KAAKC,MAAM2D,kBACT5D,KAAKC,MAAMwC,MACXzC,KAAKC,MAAM4C,IACX7C,KAAKC,MAAMW,MACX,YAEFiD,UACGC,OAAO,CACNC,OAAQC,SAASC,eAAT,UACHjE,KAAKC,MAAM2C,SAAW5C,KAAKC,MAAM4C,QAGvCqB,SANH,eAMoBlE,KAAKC,MAAMwC,SAGjCzC,KAAKC,MAAMkE,gBAAgBf,QAG7BpD,KAAKC,MAAMmE,wB,qCAYAC,GAEb,IAAMC,EAAOtE,KAAKC,MAAM0C,SAAS3C,KAAKC,MAAM2C,UAAU5C,KAAKC,MAAM4C,KAAK0B,IAElEC,GAAS,EAJG,uBAMhB,YAAgBF,EAAhB,+CAAsB,CAAC,IAAdzB,EAAa,QAEpB,GADiB7C,KAAKC,MAAMqD,SAAST,EAAM,GAC5B,EAAG,CAChB2B,GAAS,EACT,QAVY,kFAcZA,EAAUxE,KAAKC,MAAMW,MAAQ,IAC/BZ,KAAKC,MAAM2D,kBACT5D,KAAKC,MAAMwC,MACXzC,KAAKC,MAAM4C,IACX7C,KAAKC,MAAMW,MACX,YAGuB,IAArBZ,KAAKC,MAAMW,OACbiD,UACGC,OAAO,CACNC,OAAQC,SAASC,eAAT,UACHjE,KAAKC,MAAM2C,SAAW5C,KAAKC,MAAM4C,QAGvC4B,YANH,eAMuBzE,KAAKC,MAAMwC,W,+BAK9B,IAAD,OACHiC,EAAiC,eAApB1E,KAAKC,MAAMoC,KAAwB,IAAO,IACvDN,EAAgB/B,KAAKC,MAAM8B,eAAsC,IAArB/B,KAAKC,MAAMW,MAE3D,OAAIZ,KAAKC,MAAM+B,YAEX,kBAAC,EAAD,CACEvB,SAAUT,KAAKC,MAAM2C,SAAW5C,KAAKC,MAAM4C,IAC3ClB,SAAU3B,KAAK2B,SACfI,cAAeA,EACfD,SAAU9B,KAAKC,MAAM6B,SACrBO,KAAMrC,KAAKC,MAAMoC,KACjBqC,WAAYA,EACZ9D,MAAOZ,KAAKC,MAAMW,MAClBC,IAAKb,KAAKC,MAAMY,IAChBM,QAASnB,KAAKsB,eACdqD,cAAe,SAAAN,GACbA,EAAEO,iBACF,EAAKxD,oBAMT,kBAAC,EAAD,iBACMpB,KAAKC,MADX,CAEEqB,eAAgBtB,KAAKsB,eACrBF,eAAgBpB,KAAKoB,eACrBM,WAAY1B,KAAK0B,WACjBC,SAAU3B,KAAK2B,SACf+C,WAAYA,EACZ5C,SAAU9B,KAAKC,MAAM6B,SACrBC,cAAeA,S,GAnNNR,cA0NbsD,EAAc,SAAA5E,GAClB,OACE,kBAAC6E,EAAA,EAAD,CACEC,QAAQ,QACRhF,UAAU,QACViF,WAAW,EACXC,MAAM,EACNC,MAAO,CAAEC,KAAM,EAAGC,KAAM,GACxBC,QACE,kBAAC,EAAD,CACErC,oBAAqB/C,EAAM+C,oBAC3B5B,eAAgBnB,EAAMmB,eACtBE,eAAgBrB,EAAMqB,eACtBd,gBAAiBP,EAAMO,gBACvBqC,IAAK5C,EAAM4C,IACXpC,SAAUR,EAAM2C,SAAW3C,EAAM4C,IACjCtC,WAAYN,EAAMM,WAClBK,MAAOX,EAAMW,MACbC,IAAKZ,EAAMY,IACXC,KAAMb,EAAMyB,gBAIhB,kBAAC,EAAD,CACEjB,SAAUR,EAAM2C,SAAW3C,EAAM4C,IACjClB,SAAU1B,EAAM0B,SAChBI,cAAe9B,EAAM8B,cACrBD,SAAU7B,EAAM6B,SAChBO,KAAMpC,EAAMoC,KACZqC,WAAYzE,EAAMyE,WAClB9D,MAAOX,EAAMW,MACbC,IAAKZ,EAAMY,IACX8D,cAAe,SAAAN,GAAC,OAAIA,EAAEO,sBAMxBU,EAAc,SAAArF,GAClB,OACE,yBACEsF,cAAatF,EAAMQ,SACnBM,GAAId,EAAMQ,SACVJ,UAAS,eAAUJ,EAAMoC,KAAhB,YAAwBpC,EAAM6B,SAA9B,YACS,IAAhB7B,EAAMW,MAAc,gBAAkB,IAExCV,MAAOD,EAAM0B,WACbR,QAASlB,EAAMkB,QACfwD,cAAe1E,EAAM0E,eAEpB1E,EAAM8B,eACL,kBAAC,IAAD,CAAS2C,WAAYzE,EAAMyE,YACzB,yBAAKrE,UAAU,aAAakF,cAAY,cACrCtF,EAAMW,MAAQ,IAAMX,EAAMY,QAQxBW,I,QCtNAgE,G,2LApDX,IAHA,IAAIC,EAAQ,GACN7C,EAAW5C,KAAKC,MAAM2C,SAEnB8C,EAAI,EAAGA,EAAI1F,KAAKC,MAAM0F,KAAKC,OAAS,EAAGF,IAAK,CACnD,IAAIG,EAAU7F,KAAKC,MAAM0C,SAASC,GAAU8C,GAE5CD,EAAMhC,KACJ,kBAAC,EAAD,CACEG,kBAAmB5D,KAAKC,MAAM2D,kBAC9BZ,oBAAqBhD,KAAKC,MAAM+C,oBAChCmB,gBAAiBnE,KAAKC,MAAMkE,gBAC5BC,oBAAqBpE,KAAKC,MAAMmE,oBAChCrC,cAAe/B,KAAKC,MAAM8B,cAC1BvB,gBAAiBR,KAAKC,MAAMO,gBAC5BwB,YAAahC,KAAKC,MAAM+B,YACxBF,SAAU9B,KAAKC,MAAM6B,SACrBa,SAAU3C,KAAKC,MAAM0C,SACrBe,IAAKd,EAAW8C,EAChB7C,IAAK6C,EACL9C,SAAUA,EACVrC,WAAYsF,EAAO,KACnBrD,MAAOqD,EAAO,MACd9C,QAAS8C,EAAO,KAChBxD,KAAMwD,EAAO,KACbjF,MAAOZ,KAAKC,MAAM0F,KAAKD,EAAI,GAC3B7E,IAAK0C,YAAkBsC,EAAO,QAC9BvC,SAAUtD,KAAKC,MAAM0F,KACrBvD,EAAGyD,EAAO,IAAQ,GAAK,IACvB3D,EAAG2D,EAAO,IAAQ,GAAK,IACvBpD,MAAOzC,KAAKC,MAAMwC,SAKxB,OAAOgD,I,+BAIP,OACE,kBAACK,EAAA,EAAD,KACE,yBAAK/E,GAAE,eAAUf,KAAKC,MAAMwC,OAASpC,UAAU,kBAC5CL,KAAK+F,YAEL/F,KAAKC,MAAM+F,gBACV,yBAAKjF,GAAE,eAAUf,KAAKC,MAAMwC,MAArB,WAAP,MACMwD,WAAWjG,KAAKC,MAAMiG,QAAQC,QAAQ,GAD5C,MACmD,IAChDF,WAAWjG,KAAKC,MAAMmG,QAAQD,QAAQ,U,GAzDlC5E,cCuEJ8E,G,wLAxEH,IAAD,OACP,QAAIrG,KAAKC,MAAMqG,WAEX,yBAAKvF,GAAG,eACN,yBAAKA,GAAG,cACN,yBACEwF,IAAG,UAAKhE,GAAL,0BACHiE,IAAK,uBAIT,yBACEjB,cAAY,oBACZxE,GAAG,oBACHwF,IAAG,UAAKhE,GAAL,8BAAiDvC,KAAKC,MAAMqG,UAA5D,QACHE,IAAKxG,KAAKC,MAAMqG,UAChBnF,QAAS,WACP,EAAKlB,MAAMwG,kBAIf,yBAAK1F,GAAG,2BACN,yBAAKV,UAAU,mCACb,kBAAC,IAAD,CAASqE,WAAY,IACnB,6BACG1E,KAAKC,MAAMyG,eACV,yBACErG,UAAU,aACVkF,cAAY,cAFd,WAGMvF,KAAKC,MAAM0G,gBAAgB,OAHjC,MAKDC,YAAY,MAAO5G,KAAKC,MAAMqG,cAKrC,yBAAKjG,UAAU,sCACb,kBAAC,IAAD,CAASqE,WAAY,IACnB,6BACG1E,KAAKC,MAAMyG,eACV,yBACErG,UAAU,aACVkF,cAAY,cAFd,WAGMvF,KAAKC,MAAM0G,gBAAgB,UAHjC,MAKDC,YAAY,SAAU5G,KAAKC,MAAMqG,cAKxC,yBAAKjG,UAAU,oCACb,kBAAC,IAAD,CAASqE,WAAY,IACnB,6BACG1E,KAAKC,MAAMyG,eACV,yBACErG,UAAU,aACVkF,cAAY,cAFd,WAGMvF,KAAKC,MAAM0G,gBAAgB,QAHjC,MAKDC,YAAY,OAAQ5G,KAAKC,MAAMqG,oB,GA5D5B/E,c,SCDTsF,G,OAAb,YACE,WAAY5G,GAAQ,IAAD,8BACjB,4CAAMA,KACD6G,MAAQ,CAAEC,MAAM,GAGrB,EAAK3B,KAAO,EAAKA,KAAK3D,KAAV,gBALK,EADrB,mFASwBG,EAAWC,GAC/B,OACE7B,KAAKC,MAAM+G,SAAWpF,EAAUoF,QAChChH,KAAKC,MAAMgH,OAASrF,EAAUqF,MAC9BjH,KAAK8G,MAAMC,OAASlF,EAAUkF,OAbpC,6BAsBI/G,KAAKkH,SAAS,CAAEH,MAAM,MAtB1B,6BA0BI/G,KAAKkH,SAAS,CAAEH,MAAM,MA1B1B,+BA8BI,OACE,kBAACI,EAAA,EAAD,CAAOC,UAAQ,EAAClC,MAAO,IAAMC,KAAMnF,KAAK8G,MAAMC,KAAMM,QAASrH,KAAKoF,MAChE,kBAAC+B,EAAA,EAAMG,OAAP,KACE,4BAAQjH,UAAU,WAAWL,KAAKC,MAAM+G,SAE1C,kBAACG,EAAA,EAAMI,KAAP,KAAavH,KAAKC,MAAMgH,WAnChC,GAAkC1F,cAgDrBiG,EAAb,YACE,WAAYvH,GAAQ,IAAD,8BACjB,4CAAMA,KACD6G,MAAQ,CAAEC,MAAM,GAGrB,EAAK3B,KAAO,EAAKA,KAAK3D,KAAV,gBALK,EADrB,mFASwBG,EAAWC,GAC/B,OACE7B,KAAKC,MAAMwH,MAAQ7F,EAAU6F,KAC7BzH,KAAK8G,MAAMC,OAASlF,EAAUkF,OAZpC,6BAqBI/G,KAAKkH,SAAS,CAAEH,MAAM,MArB1B,6BAyBI/G,KAAKkH,SAAS,CAAEH,MAAM,MAzB1B,+BA6BI,OACE,kBAACI,EAAA,EAAD,CAAOC,UAAQ,EAAClC,MAAO,IAAMC,KAAMnF,KAAK8G,MAAMC,KAAMM,QAASrH,KAAKoF,MAChE,kBAAC+B,EAAA,EAAMG,OAAP,KACE,4BAAQjH,UAAU,WAAlB,uBAEF,kBAAC8G,EAAA,EAAMI,KAAP,mDAEGvH,KAAKC,MAAMwH,UApCtB,GAAiClG,a,QCzC3BmG,G,mBACJ,WAAYzH,GAAQ,IAAD,8BACjB,4CAAMA,KACD6G,MAAQ,CACXa,UAAW,IAIb,EAAKxD,gBAAkB,EAAKA,gBAAgB1C,KAArB,gBACvB,EAAK2C,oBAAsB,EAAKA,oBAAoB3C,KAAzB,gBAC3B,EAAKmG,iBAAmB,EAAKA,iBAAiBnG,KAAtB,gBATP,E,iFAkBjBoG,OAAOC,iBAAiB,SAAU9H,KAAK+H,SAEvC,IAAMC,EAAQhI,KAOd,GALA6D,UAAQoE,OAAM,WACZpE,UAAQqE,aAAalE,SAASC,eAAe,wBAC7C+D,EAAMG,gBAGHC,cAAiB,CACpB,IAAIC,EAAmBrE,SAASsE,cAAc,wBAC9CtI,KAAKuI,gBAAkBC,IAAQH,EAAkB,CAC/CI,QAAS,EACTC,QAAS,EACTC,WAAY,GACZC,qBAAsB,EACtBC,QAAQ,EACRC,cAAe,GACfC,cAAc,EACdC,QAAS,SAAS3E,GAChB,OAAO,GAET4E,UAAW,SAAS5E,GAClB,OAAO,KAKXrE,KAAKuI,gBAAgBW,GAAG,aAAa,SAAS7E,GAC5CL,SAASiD,KAAKkC,c,6CAWlBtB,OAAOuB,oBAAoB,SAAUpJ,KAAK+H,W,qCAU1C/H,KAAKuI,gBAAgBc,OAAO,EAAG,GAC/BrJ,KAAKuI,gBAAgBe,QAAQ,EAAG,EAAG,K,gCASnCzF,UAAQ0F,sB,kCAQG,IAAD,OACNvJ,KAAKC,MAAMqG,YACbzC,UAAQ2F,sBACR3F,UAAQ4F,mBAAkB,GAE1B,CAAC,MAAO,SAAU,QAAQpG,SAAQ,SAAAZ,GAChC,IAAMG,EAAWgE,YAAYnE,EAAO,EAAKxC,MAAMqG,WAE/CoD,OAAOC,KAAK,EAAK1J,MAAM0C,SAASC,IAAWS,SAAQ,SAAAuG,GACjD,IAAIC,EACgC,IAAlC,EAAK5J,MAAMwC,GAAOmH,EAAS,GAAW,GAAtC,eAAmDnH,GAErD,EAAKxC,MAAM0C,SAASC,GAAUgH,GAAQ1G,OAAOG,SAAQ,SAAAH,GACnDW,UAAQiG,QAAQ,CACd/F,OAAQC,SAASC,eAAT,UAA2BrB,GAA3B,OAAsCgH,IAC9CG,OAAQ/F,SAASC,eAAT,UAA2BrB,GAA3B,OAAsCM,IAC9C8G,SAAU,CAAC,MAAO,CAAEC,SAAU,gBAAiBC,OAAQ,IACvDC,UAAW,CAAC,WAAY,CAAEF,SAAS,QAAD,OAAUJ,KAC5CO,QAAS,CACP,CAAC,YAAa,CAAEC,MAAO,WACvB,CAAC,YAAa,CAAEA,MAAO,uBAOjCxG,UAAQ4F,mBAAkB,GAAO,M,6CAU/BzJ,KAAKC,MAAM+F,eACb6B,OAAOC,iBAAiB,YAAa9H,KAAK4H,kBAE1CC,OAAOuB,oBAAoB,YAAapJ,KAAK4H,oB,uCAUhCvD,GACf,IAAMiG,EAAetG,SAClBC,eAAe,YACfsG,wBAEGC,EAAkBxG,SACrBC,eAAe,eACfsG,wBAEGE,EAAgBzG,SACnBC,eAAe,aACfsG,wBAEHG,WACE1K,KAAKkH,SAAS,CACZyD,MACItG,EAAEuG,QAAUN,EAAanI,KAAO0F,OAAOgD,SACvCP,EAAaQ,MACf,IACFC,MACI1G,EAAE2G,QAAUV,EAAarI,IAAM4F,OAAOoD,SACtCX,EAAaY,OACf,IACFC,SACI9G,EAAEuG,QAAUJ,EAAgBrI,KAAO0F,OAAOgD,SAC1CL,EAAgBM,MAClB,IACFM,SACI/G,EAAE2G,QAAUR,EAAgBvI,IAAM4F,OAAOoD,SACzCT,EAAgBU,OAClB,IACFG,OACIhH,EAAEuG,QAAUH,EAActI,KAAO0F,OAAOgD,SACxCJ,EAAcK,MAChB,IACFQ,OACIjH,EAAE2G,QAAUP,EAAcxI,IAAM4F,OAAOoD,SACvCR,EAAcS,OAChB,MAEJ,O,sCAUYzD,GAAM,IAAD,OACnBzH,KAAKkH,SAAS,CAAES,UAAWF,IAAO,WAChC,EAAK8D,eAAepG,Y,4CAWtBnF,KAAKwL,mBAAmBrG,S,+BAGhB,IAAD,OACDsG,EAAkB,CACtB7H,kBAAmB5D,KAAKC,MAAM2D,kBAC9BZ,oBAAqBhD,KAAKC,MAAM+C,oBAChCmB,gBAAiBnE,KAAKmE,gBACtBC,oBAAqBpE,KAAKoE,oBAC1BrC,cAAe/B,KAAKC,MAAM8B,cAC1BiE,eAAgBhG,KAAKC,MAAM+F,eAC3BxF,gBAAiBR,KAAKC,MAAMO,gBAC5BwB,YAAahC,KAAKC,MAAM+B,YACxBF,SAAU9B,KAAKC,MAAM6B,SACrBa,SAAU3C,KAAKC,MAAM0C,SACrB2D,UAAWtG,KAAKC,MAAMqG,WAGxB,OACE,yBAAKvF,GAAG,aAAawE,cAAY,cAC/B,kBAAC,EAAD,CACEmG,IAAK,SAAAC,GAAS,OAAK,EAAKJ,eAAiBI,GACzClE,IAAKzH,KAAK8G,MAAMa,YAElB,kBAAC,EAAD,CACE+D,IAAK,SAAAC,GAAS,OAAK,EAAKH,mBAAqBG,GAC7C3E,OAAO,eACPC,KAAK,uDAGNjH,KAAKC,MAAM2L,YAAcA,KACxB,yBAAKrG,cAAY,kBAAkBxE,GAAG,mBAAtC,2CAC0C,6BAD1C,qBAKF,yBAAKA,GAAG,yBACN,yBAAKA,GAAG,uBACN,yBAAKA,GAAG,uBACN,kBAAC,EAAD,iBACM0K,EADN,CAEEhJ,MAAO,MACPG,SAAUgE,YAAY,MAAO5G,KAAKC,MAAMqG,WACxCX,KAAM3F,KAAKC,MAAM4L,IACjB3F,OAAQlG,KAAK8G,MAAM6D,KACnBvE,OAAQpG,KAAK8G,MAAMiE,QAErB,kBAAC,EAAD,iBACMU,EADN,CAEEhJ,MAAO,SACPG,SAAUgE,YAAY,SAAU5G,KAAKC,MAAMqG,WAC3CX,KAAM3F,KAAKC,MAAM6L,OACjB5F,OAAQlG,KAAK8G,MAAMqE,QACnB/E,OAAQpG,KAAK8G,MAAMsE,WAErB,kBAAC,EAAD,iBACMK,EADN,CAEEhJ,MAAO,OACPG,SAAUgE,YAAY,OAAQ5G,KAAKC,MAAMqG,WACzCX,KAAM3F,KAAKC,MAAM8L,KACjB7F,OAAQlG,KAAK8G,MAAMuE,MACnBjF,OAAQpG,KAAK8G,MAAMwE,SAErB,kBAAC,EAAD,CACE7E,aAAczG,KAAKC,MAAMwG,aACzBE,gBAAiB3G,KAAKC,MAAM0G,gBAC5BD,cAAe1G,KAAKC,MAAMyG,eAAiB1G,KAAKC,MAAMqG,UACtDA,UAAWtG,KAAKC,MAAMqG,WAAa,oB,GA3Q3B/E,cAqRTmG","file":"static/js/4.be71136f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Popover from 'react-bootstrap/Popover';\nimport { faPlusSquare, faMinusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './styles/Popovers.css';\n\n/**\n * Tooltip containing information about each talent node. Displayed when \n user hovers over a talent\n *\n */\nexport class TalentTooltip extends Component {\n  render() {\n    return (\n      <Popover\n        placement={this.props.placement}\n        style={this.props.style}\n        outOfBoundaries={this.props.outOfBoundaries}\n        arrowProps={this.props.arrowProps}\n        className={this.props.className}\n      >\n        <Popover.Title>\n          <div className=\"node-tooltip-title\">{this.props.talentName}</div>\n          {this.props.isShownTalentID && (\n            <div className=\"node-tooltip-id\">{this.props.talentID}</div>\n          )}\n          <div style={{ clear: 'both' }}></div>\n        </Popover.Title>\n\n        <Popover.Content className=\"node-tooltip-body\">\n          <div\n            className={`node-tooltip-bg node-tooltip-bg${\n              this.props.value === this.props.max ? '-max' : '-next'\n            }`}\n          >\n            <div>\n              <b>\n                {this.props.value !== this.props.max ? 'Next level:' : 'Maxed:'}\n              </b>\n            </div>\n\n            {this.props.text}\n          </div>\n\n          <div id=\"node-tooltip-assign-container\">\n            <FontAwesomeIcon\n              className=\"node-tooltip-decrease\"\n              icon={faMinusSquare}\n              size=\"2x\"\n              onClick={this.props.talentDecrease}\n            />\n\n            <span className=\"node-tooltip-value\">\n              {this.props.value + '/' + this.props.max}\n            </span>\n\n            <FontAwesomeIcon\n              className=\"node-tooltip-increase\"\n              icon={faPlusSquare}\n              size=\"2x\"\n              onClick={this.props.talentIncrease}\n            />\n          </div>\n        </Popover.Content>\n      </Popover>\n    );\n  }\n}\n\nexport default { TalentTooltip };\n","import React, { Component } from 'react';\nimport FitText from '@kennethormandy/react-fittext';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { jsPlumb } from 'jsplumb';\nimport { TalentTooltip } from './Popovers';\nimport { replaceTalentText, getMaxTalentCount } from './utils';\n\nimport './styles/Node.css';\n\n/**\n * Component for the individual talent nodes\n *\n * @class Node\n * @extends {Component}\n */\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n\n    // Context bindings\n    this.talentIncrease = this.talentIncrease.bind(this);\n    this.talentDecrease = this.talentDecrease.bind(this);\n    this.setTooltip = this.setTooltip.bind(this);\n    this.getStyle = this.getStyle.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.value !== nextProps.value ||\n      this.props.nodeSize !== nextProps.nodeSize ||\n      this.props.isShownValues !== nextProps.isShownValues ||\n      this.props.isShownTalentID !== nextProps.isShownTalentID ||\n      this.props.isSpeedMode !== nextProps.isSpeedMode\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determine styling of the node. Image depends on whether the node is\n   * a large skill node or a small stat node\n   *\n   * @returns {object} Object containing the CSS styles\n   * (e.g. positioning, background image) for the node\n   * @memberof Node\n   */\n  getStyle() {\n    let style = {};\n\n    style.top = this.props.y;\n    style.left = this.props.x;\n\n    if (this.props.type === 'node-large') {\n      style.backgroundImage = `url(${process.env.PUBLIC_URL}/images/talents/${this.props.image}.png)`;\n    } else {\n      style.backgroundImage = `url(${process.env.PUBLIC_URL}/images/talents/${this.props.color}GenericSmall.png)`;\n    }\n\n    return style;\n  }\n\n  /**\n   * Set tooltip for the node. Tooltip text is dynamic as it depends on the\n   * current level of the node\n   *\n   * @returns {string} Updated tooltip text reflecting the level of the node\n   * @memberof Node\n   */\n  setTooltip() {\n    let tooltip;\n    let talentValues = this.props.treeData[this.props.treeName][this.props.idx][\n      'values'\n    ];\n\n    if (this.props.value === this.props.max) {\n      tooltip = replaceTalentText(\n        this.props.tooltip,\n        talentValues,\n        this.props.max - 1\n      );\n    } else {\n      tooltip = replaceTalentText(\n        this.props.tooltip,\n        talentValues,\n        this.props.value\n      );\n    }\n\n    return tooltip;\n  }\n\n  /**\n   * Increase the value of the clicked node. Controls whether the node can\n   * be increased (e.g. max level reached, max talent points spent), as well\n   * as the display of associated toasts and missing prerequisite talents\n   *\n   * Additionally, `this.state` is updated to reflect current node value\n   *\n   * @memberof Node\n   */\n  talentIncrease() {\n    if (this.props.calcPointsRemaining() > 0) {\n      // Check prerequisites\n      const prereqs = this.props.treeData[this.props.treeName][this.props.idx]\n        .prereq;\n\n      let prereqsOK = true;\n      let missingPrereqs = [];\n\n      prereqs.forEach(idx => {\n        const prereqValue = this.props.fullTree[idx - 1];\n        const prereqMax = getMaxTalentCount(\n          this.props.treeData[this.props.treeName][idx].values\n        );\n        if (prereqValue !== prereqMax) {\n          prereqsOK = false;\n          missingPrereqs.push(\n            <li key={idx}>\n              <strong>\n                {this.props.treeData[this.props.treeName][idx].name}\n              </strong>\n            </li>\n          );\n        }\n      });\n\n      if (prereqsOK) {\n        if (this.props.value < this.props.max) {\n          this.props.changeTalentValue(\n            this.props.color,\n            this.props.idx,\n            this.props.value,\n            'increase'\n          );\n          jsPlumb\n            .select({\n              source: document.getElementById(\n                `${this.props.treeName + this.props.idx}`\n              )\n            })\n            .addClass(`line-${this.props.color}`);\n        }\n      } else {\n        this.props.showPrereqToast(missingPrereqs);\n      }\n    } else {\n      this.props.showPointLimitToast();\n    }\n  }\n\n  /**\n   * Decrease value of the clicked node and update `this.state` to reflect\n   * the new value. Checks whether the node can be decreased in the event of\n   * having dependent nodes. Context menu is disabled\n   *\n   * @param {MouseEvent} e Mouse context event\n   * @memberof Node\n   */\n  talentDecrease(e) {\n    // Check dependent nodes\n    const deps = this.props.treeData[this.props.treeName][this.props.idx].dep;\n\n    let depsOK = true;\n\n    for (let idx of deps) {\n      const depValue = this.props.fullTree[idx - 1];\n      if (depValue > 0) {\n        depsOK = false;\n        break;\n      }\n    }\n\n    if (depsOK & (this.props.value > 0)) {\n      this.props.changeTalentValue(\n        this.props.color,\n        this.props.idx,\n        this.props.value,\n        'decrease'\n      );\n\n      if (this.props.value === 1) {\n        jsPlumb\n          .select({\n            source: document.getElementById(\n              `${this.props.treeName + this.props.idx}`\n            )\n          })\n          .removeClass(`line-${this.props.color}`);\n      }\n    }\n  }\n\n  render() {\n    let compressor = this.props.type === 'node-large' ? 0.31 : 0.21;\n    let isShownValues = this.props.isShownValues && this.props.value !== 0;\n\n    if (this.props.isSpeedMode) {\n      return (\n        <NodeContent\n          talentID={this.props.treeName + this.props.idx}\n          getStyle={this.getStyle}\n          isShownValues={isShownValues}\n          nodeSize={this.props.nodeSize}\n          type={this.props.type}\n          compressor={compressor}\n          value={this.props.value}\n          max={this.props.max}\n          onClick={this.talentIncrease}\n          onContextMenu={e => {\n            e.preventDefault();\n            this.talentDecrease();\n          }}\n        />\n      );\n    } else {\n      return (\n        <NodeOverlay\n          {...this.props}\n          talentIncrease={this.talentIncrease}\n          talentDecrease={this.talentDecrease}\n          setTooltip={this.setTooltip}\n          getStyle={this.getStyle}\n          compressor={compressor}\n          nodeSize={this.props.nodeSize}\n          isShownValues={isShownValues}\n        />\n      );\n    }\n  }\n}\n\nconst NodeOverlay = props => {\n  return (\n    <OverlayTrigger\n      trigger=\"click\"\n      placement=\"right\"\n      rootClose={true}\n      flip={true}\n      delay={{ show: 0, hide: 0 }}\n      overlay={\n        <TalentTooltip\n          calcPointsRemaining={props.calcPointsRemaining}\n          talentDecrease={props.talentDecrease}\n          talentIncrease={props.talentIncrease}\n          isShownTalentID={props.isShownTalentID}\n          idx={props.idx}\n          talentID={props.treeName + props.idx}\n          talentName={props.talentName}\n          value={props.value}\n          max={props.max}\n          text={props.setTooltip()}\n        />\n      }\n    >\n      <NodeContent\n        talentID={props.treeName + props.idx}\n        getStyle={props.getStyle}\n        isShownValues={props.isShownValues}\n        nodeSize={props.nodeSize}\n        type={props.type}\n        compressor={props.compressor}\n        value={props.value}\n        max={props.max}\n        onContextMenu={e => e.preventDefault()}\n      />\n    </OverlayTrigger>\n  );\n};\n\nconst NodeContent = props => {\n  return (\n    <div\n      data-testid={props.talentID}\n      id={props.talentID}\n      className={`node ${props.type}-${props.nodeSize} ${\n        props.value === 0 ? 'node-inactive' : ''\n      }`}\n      style={props.getStyle()}\n      onClick={props.onClick}\n      onContextMenu={props.onContextMenu}\n    >\n      {props.isShownValues && (\n        <FitText compressor={props.compressor}>\n          <div className=\"node-value\" data-testid=\"node-value\">\n            {props.value + '/' + props.max}\n          </div>\n        </FitText>\n      )}\n    </div>\n  );\n};\n\nexport default Node;\n","import React, { Component } from 'react';\nimport Node from './Node';\nimport ErrorBoundary from './Error';\nimport { getMaxTalentCount } from './utils';\n\nimport './styles/Tree.css';\n\n/**\n * Component for the individual talent trees\n *\n * @class Tree\n * @extends {Component}\n */\n\nclass Tree extends Component {\n  /**\n   * Create an array of all talent nodes for the current commander\n   *\n   * @param {number[]} values Array containing the node values stored\n   * in `this.state` for a given tree color\n   * @param {string} color Color of the tree to generate nodes for\n   * @returns {Array} Array of `Node`'s for a given tree\n   * @memberof Tree\n   */\n  drawNodes() {\n    let nodes = [];\n    const treeName = this.props.treeName;\n\n    for (let i = 1; i < this.props.data.length + 1; i++) {\n      var curNode = this.props.treeData[treeName][i];\n\n      nodes.push(\n        <Node\n          changeTalentValue={this.props.changeTalentValue}\n          calcPointsRemaining={this.props.calcPointsRemaining}\n          showPrereqToast={this.props.showPrereqToast}\n          showPointLimitToast={this.props.showPointLimitToast}\n          isShownValues={this.props.isShownValues}\n          isShownTalentID={this.props.isShownTalentID}\n          isSpeedMode={this.props.isSpeedMode}\n          nodeSize={this.props.nodeSize}\n          treeData={this.props.treeData}\n          key={treeName + i}\n          idx={i}\n          treeName={treeName}\n          talentName={curNode['name']}\n          image={curNode['image']}\n          tooltip={curNode['text']}\n          type={curNode['type']}\n          value={this.props.data[i - 1]}\n          max={getMaxTalentCount(curNode['values'])}\n          fullTree={this.props.data}\n          x={curNode['pos'][0] + '%'}\n          y={curNode['pos'][1] + '%'}\n          color={this.props.color}\n        />\n      );\n    }\n\n    return nodes;\n  }\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <div id={`tree-${this.props.color}`} className=\"tree-container\">\n          {this.drawNodes()}\n\n          {this.props.isShownMouseXY && (\n            <div id={`tree-${this.props.color}-mouse`}>\n              X: {parseFloat(this.props.mouseX).toFixed(1)} Y:{' '}\n              {parseFloat(this.props.mouseY).toFixed(1)}\n            </div>\n          )}\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default Tree;\n","import React, { Component } from 'react';\nimport FitText from '@kennethormandy/react-fittext';\nimport { getTreeName } from './utils';\n\nimport './styles/Hexagon.css';\n\n/**\n * Component containing the central commander image and skill label hexagon\n *\n * @class Hexagon\n * @extends {Component}\n */\nclass Hexagon extends Component {\n  render() {\n    if (this.props.commander) {\n      return (\n        <div id=\"tree-center\">\n          <div id=\"hexagon-bg\">\n            <img\n              src={`${process.env.PUBLIC_URL}/images/ui/hexagon.png`}\n              alt={'Commander Hexagon'}\n            ></img>\n          </div>\n\n          <img\n            data-testid=\"hexagon-commander\"\n            id=\"hexagon-commander\"\n            src={`${process.env.PUBLIC_URL}/images/commanders/${this.props.commander}.png`}\n            alt={this.props.commander}\n            onClick={() => {\n              this.props.toggleSelect();\n            }}\n          ></img>\n\n          <div id=\"hexagon-label-container\">\n            <div className=\"hexagon-label hexagon-label-red\">\n              <FitText compressor={0.7}>\n                <div>\n                  {this.props.isShownTotals && (\n                    <div\n                      className=\"tree-total\"\n                      data-testid=\"tree-total\"\n                    >{`(${this.props.calcPointsSpent('red')})`}</div>\n                  )}\n                  {getTreeName('red', this.props.commander)}\n                </div>\n              </FitText>\n            </div>\n\n            <div className=\"hexagon-label hexagon-label-yellow\">\n              <FitText compressor={0.7}>\n                <div>\n                  {this.props.isShownTotals && (\n                    <div\n                      className=\"tree-total\"\n                      data-testid=\"tree-total\"\n                    >{`(${this.props.calcPointsSpent('yellow')})`}</div>\n                  )}\n                  {getTreeName('yellow', this.props.commander)}\n                </div>\n              </FitText>\n            </div>\n\n            <div className=\"hexagon-label hexagon-label-blue\">\n              <FitText compressor={0.7}>\n                <div>\n                  {this.props.isShownTotals && (\n                    <div\n                      className=\"tree-total\"\n                      data-testid=\"tree-total\"\n                    >{`(${this.props.calcPointsSpent('blue')})`}</div>\n                  )}\n                  {getTreeName('blue', this.props.commander)}\n                </div>\n              </FitText>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default Hexagon;\n","import React, { Component } from 'react';\nimport Toast from 'react-bootstrap/Toast';\n\nimport './styles/Toasts.css';\n\n/**\n * Generic toast component\n *\n * @class ToastMessage\n * @extends {Component}\n */\nexport class ToastMessage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n\n    // Context bindings\n    this.hide = this.hide.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.header !== nextProps.header ||\n      this.props.body !== nextProps.body ||\n      this.state.open !== nextState.open\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  show() {\n    this.setState({ open: true });\n  }\n\n  hide() {\n    this.setState({ open: false });\n  }\n\n  render() {\n    return (\n      <Toast autohide delay={3000} show={this.state.open} onClose={this.hide}>\n        <Toast.Header>\n          <strong className=\"mr-auto\">{this.props.header}</strong>\n        </Toast.Header>\n        <Toast.Body>{this.props.body}</Toast.Body>\n      </Toast>\n    );\n  }\n}\n\n/**\n * Toast showing warning message about missing talents that need to be\n * completed prior to the select talent.\n *\n * @class PrereqToast\n * @extends {Component}\n */\nexport class PrereqToast extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n\n    // Context bindings\n    this.hide = this.hide.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.msg !== nextProps.msg ||\n      this.state.open !== nextState.open\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  show() {\n    this.setState({ open: true });\n  }\n\n  hide() {\n    this.setState({ open: false });\n  }\n\n  render() {\n    return (\n      <Toast autohide delay={4000} show={this.state.open} onClose={this.hide}>\n        <Toast.Header>\n          <strong className=\"mr-auto\">Incomplete Talents</strong>\n        </Toast.Header>\n        <Toast.Body>\n          Upgrade talents to the maximum level first:\n          {this.props.msg}\n        </Toast.Body>\n      </Toast>\n    );\n  }\n}\n\nexport default { ToastMessage, PrereqToast };\n","import React, { Component } from 'react';\nimport { jsPlumb } from 'jsplumb';\nimport panzoom from 'panzoom';\nimport Tree from './Tree';\nimport Hexagon from './Hexagon';\nimport { PrereqToast, ToastMessage } from './Toasts';\nimport { getTreeName, isTouchDevice } from './utils';\n\nimport { dataVersion } from '../package.json';\nimport './styles/TreePanel.css';\n\n/**\n * Component for the main tree panel. Controls the display of all nodes and\n * node selections\n *\n * @class TreePanel\n * @extends {Component}\n */\nclass TreePanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prereqMsg: ''\n    };\n\n    // Context bindings\n    this.showPrereqToast = this.showPrereqToast.bind(this);\n    this.showPointLimitToast = this.showPointLimitToast.bind(this);\n    this.setMousePosition = this.setMousePosition.bind(this);\n  }\n\n  /**\n   * Add event listeners and setup jsplumb container with initial lines\n   *\n   * @memberof TreePanel\n   */\n  componentDidMount() {\n    window.addEventListener('resize', this.repaint);\n\n    const this_ = this;\n\n    jsPlumb.ready(function() {\n      jsPlumb.setContainer(document.getElementById('tree-square-content'));\n      this_.drawLines();\n    });\n\n    if (!isTouchDevice()) {\n      let panZoomContainer = document.querySelector('#tree-square-content');\n      this.panZoomInstance = panzoom(panZoomContainer, {\n        minZoom: 1,\n        maxZoom: 3,\n        pinchSpeed: 0.5,\n        zoomDoubleClickSpeed: 1,\n        bounds: true,\n        boundsPadding: 0.5,\n        smoothScroll: false,\n        onTouch: function(e) {\n          return false;\n        },\n        filterKey: function(e) {\n          return true;\n        }\n      });\n\n      // This has the effect of closing any open popovers\n      this.panZoomInstance.on('transform', function(e) {\n        document.body.click();\n      });\n    }\n  }\n\n  /**\n   * Remove event listeners on unmount\n   *\n   * @memberof TreePanel\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.repaint);\n  }\n\n  /**\n   * Reset the pan/zoom state of the entire tree panel. Called on commander changes\n   * and talent resets\n   *\n   * @memberof TreePanel\n   */\n  resetPanZoom() {\n    this.panZoomInstance.moveTo(0, 0);\n    this.panZoomInstance.zoomAbs(0, 0, 1);\n  }\n\n  /**\n   * Call for repainting jsplumb lines on window resize\n   *\n   * @memberof TreePanel\n   */\n  repaint() {\n    jsPlumb.repaintEverything();\n  }\n\n  /**\n   * Draw lines between nodes\n   *\n   * @memberof TreePanel\n   */\n  drawLines() {\n    if (this.props.commander) {\n      jsPlumb.deleteEveryEndpoint();\n      jsPlumb.setSuspendDrawing(true);\n\n      ['red', 'yellow', 'blue'].forEach(color => {\n        const treeName = getTreeName(color, this.props.commander);\n\n        Object.keys(this.props.treeData[treeName]).forEach(nodeID => {\n          var activateState =\n            this.props[color][nodeID - 1] === 0 ? '' : `line-${color}`;\n\n          this.props.treeData[treeName][nodeID].prereq.forEach(prereq => {\n            jsPlumb.connect({\n              source: document.getElementById(`${treeName}${nodeID}`),\n              target: document.getElementById(`${treeName}${prereq}`),\n              endpoint: ['Dot', { cssClass: 'line-endpoint', radius: 1 }],\n              connector: ['Straight', { cssClass: `line ${activateState}` }],\n              anchors: [\n                ['Perimeter', { shape: 'Circle' }],\n                ['Perimeter', { shape: 'Circle' }]\n              ]\n            });\n          });\n        });\n      });\n\n      jsPlumb.setSuspendDrawing(false, true);\n    }\n  }\n\n  /**\n   * Toggle event listeners for setting mouse position\n   *\n   * @memberof TreePanel\n   */\n  toggleMouseListeners() {\n    if (this.props.isShownMouseXY) {\n      window.addEventListener('mousemove', this.setMousePosition);\n    } else {\n      window.removeEventListener('mousemove', this.setMousePosition);\n    }\n  }\n\n  /**\n   * Store mouse position relative to each tree container\n   *\n   * @param {MouseEvent} e Mouse move event\n   * @memberof TreePanel\n   */\n  setMousePosition(e) {\n    const redContainer = document\n      .getElementById('tree-red')\n      .getBoundingClientRect();\n\n    const yellowContainer = document\n      .getElementById('tree-yellow')\n      .getBoundingClientRect();\n\n    const blueContainer = document\n      .getElementById('tree-blue')\n      .getBoundingClientRect();\n\n    setTimeout(\n      this.setState({\n        redX:\n          ((e.clientX - redContainer.left + window.scrollX) /\n            redContainer.width) *\n          100,\n        redY:\n          ((e.clientY - redContainer.top + window.scrollY) /\n            redContainer.height) *\n          100,\n        yellowX:\n          ((e.clientX - yellowContainer.left + window.scrollX) /\n            yellowContainer.width) *\n          100,\n        yellowY:\n          ((e.clientY - yellowContainer.top + window.scrollY) /\n            yellowContainer.height) *\n          100,\n        blueX:\n          ((e.clientX - blueContainer.left + window.scrollX) /\n            blueContainer.width) *\n          100,\n        blueY:\n          ((e.clientY - blueContainer.top + window.scrollY) /\n            blueContainer.height) *\n          100\n      }),\n      2000\n    );\n  }\n\n  /**\n   * Show a toast containing a list of missing prerequisite talents. Toast is\n   * hidden automatically after a delay.\n   *\n   * @memberof TreePanel\n   */\n  showPrereqToast(msg) {\n    this.setState({ prereqMsg: msg }, () => {\n      this.prereqToastRef.show();\n    });\n  }\n\n  /**\n   * Show toast warning about reaching the maximum talent point limit. Toast\n   * is hidden automatically after a delay.\n   *\n   * @memberof TreePanel\n   */\n  showPointLimitToast() {\n    this.pointLimitToastRef.show();\n  }\n\n  render() {\n    const sharedTreeProps = {\n      changeTalentValue: this.props.changeTalentValue,\n      calcPointsRemaining: this.props.calcPointsRemaining,\n      showPrereqToast: this.showPrereqToast,\n      showPointLimitToast: this.showPointLimitToast,\n      isShownValues: this.props.isShownValues,\n      isShownMouseXY: this.props.isShownMouseXY,\n      isShownTalentID: this.props.isShownTalentID,\n      isSpeedMode: this.props.isSpeedMode,\n      nodeSize: this.props.nodeSize,\n      treeData: this.props.treeData,\n      commander: this.props.commander\n    };\n\n    return (\n      <div id=\"tree-panel\" data-testid=\"tree-panel\">\n        <PrereqToast\n          ref={component => (this.prereqToastRef = component)}\n          msg={this.state.prereqMsg}\n        />\n        <ToastMessage\n          ref={component => (this.pointLimitToastRef = component)}\n          header=\"Talent Limit\"\n          body=\"You have spent the maximum number of talent points\"\n        />\n\n        {this.props.dataVersion < dataVersion && (\n          <div data-testid=\"version-warning\" id=\"version-warning\">\n            Warning: this build uses an old version <br /> of the game data\n          </div>\n        )}\n\n        <div id=\"tree-square-container\">\n          <div id=\"tree-square-section\">\n            <div id=\"tree-square-content\">\n              <Tree\n                {...sharedTreeProps}\n                color={'red'}\n                treeName={getTreeName('red', this.props.commander)}\n                data={this.props.red}\n                mouseX={this.state.redX}\n                mouseY={this.state.redY}\n              />\n              <Tree\n                {...sharedTreeProps}\n                color={'yellow'}\n                treeName={getTreeName('yellow', this.props.commander)}\n                data={this.props.yellow}\n                mouseX={this.state.yellowX}\n                mouseY={this.state.yellowY}\n              />\n              <Tree\n                {...sharedTreeProps}\n                color={'blue'}\n                treeName={getTreeName('blue', this.props.commander)}\n                data={this.props.blue}\n                mouseX={this.state.blueX}\n                mouseY={this.state.blueY}\n              />\n              <Hexagon\n                toggleSelect={this.props.toggleSelect}\n                calcPointsSpent={this.props.calcPointsSpent}\n                isShownTotals={this.props.isShownTotals && this.props.commander}\n                commander={this.props.commander || 'unknown'}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TreePanel;\n"],"sourceRoot":""}