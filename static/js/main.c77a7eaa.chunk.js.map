{"version":3,"sources":["utils.js","Error.js","values.js","data sync /^/.//v.*//Attack/.json$","data sync /^/.//v.*//Archer/.json$","data sync /^/.//v.*//Cavalry/.json$","data sync /^/.//v.*//Conquering/.json$","data sync /^/.//v.*//Defense/.json$","data sync /^/.//v.*//Garrison/.json$","data sync /^/.//v.*//Gathering/.json$","data sync /^/.//v.*//Infantry/.json$","data sync /^/.//v.*//Integration/.json$","data sync /^/.//v.*//Leadership/.json$","data sync /^/.//v.*//Mobility/.json$","data sync /^/.//v.*//Peacekeeping/.json$","data sync /^/.//v.*//Skill/.json$","data sync /^/.//v.*//Support/.json$","data sync /^/.//v.*//Versatility/.json$","serviceWorker.js","GuidedTour.js","NavBarButtons.js","Tooltips.js","NavBarSettings.js","NavBarCommander.js","Announcement.js","Modals.js","NavBar.js","SummaryPanel.js","StatsPanel.js","StatsTalentsPanel.js","InfoPanel.js","data/AllTrees.js","App.js","index.js"],"names":["sumArray","arr","reduce","partial","a","isMultidimensional","filter","Array","isArray","length","getMaxTalentCount","talentValues","replaceTalentText","text","replacementIdx","newText","i","re","RegExp","replace","getTreeName","color","commander","commanderData","Commanders","setTitle","r","y","b","sep","newTitle","createSummaryString","title","document","rSpent","ySpent","bSpent","name","shortName","getURL","embed","window","location","origin","search","isEmbed","path","includes","isTouchDevice","matchMedia","matches","isNewUser","localStorage","getItem","JSON","parse","isUpgrade","oldVer","newVer","split","map","Number","oldMajor","oldMinor","newMajor","newMinor","encode","match","v","valuesToLetters","hasOwnProperty","join","decode","encoded","k","lettersToValues","ErrorBoundary","props","state","error","errorInfo","this","setState","style","whiteSpace","toString","componentStack","children","Component","maxPoints","c","d","e","f","g","h","j","l","m","n","o","p","q","s","t","u","w","x","z","webpackContext","req","id","webpackContextResolve","__webpack_require__","Error","code","keys","Object","resolve","module","exports","Boolean","hostname","GuidedTour","restartTour","run","stepIndex","handleJoyrideCallback","data","action","index","status","type","STATUS","FINISHED","SKIPPED","ACTIONS","CLOSE","EVENTS","STEP_AFTER","TARGET_NOT_FOUND","PREV","steps","content","target","placement","disableBeacon","locale","last","callback","continuous","showProgress","showSkipButton","disableOverlayClose","styles","options","primaryColor","overlayColor","NavBarButtons","useState","isDownloading","setIsDownloading","className","data-testid","disabled","calcPointsSpent","onClick","showReset","icon","faTrashAlt","elementID","addBanner","ReactGA","event","category","label","dpr","devicePixelRatio","node","getElementById","visibility","domtoimage","toJpeg","height","offsetHeight","width","offsetWidth","transform","transformOrigin","then","dataUrl","link","createElement","href","download","red","yellow","blue","click","takeScreenshot","isScreenshotStats","Spinner","size","animation","variant","faCamera","showShare","faShareAlt","HelpTooltip","OverlayTrigger","flip","trigger","overlay","Tooltip","tooltip","faQuestionCircle","GeneralTooltip","NavBarSettings","Dropdown","alignRight","as","NavItem","Toggle","NavLink","faCog","Menu","Form","Group","Header","Check","checked","isShownInfoPanel","onChange","toggleInfoPanel","isShownValues","toggleValueDisplay","isShownTotals","toggleTotalDisplay","Divider","ToggleButtonGroup","value","nodeSize","val","toggleNodeSize","ToggleButton","toggleScreenshotStats","isSpeedMode","toggleSpeedMode","process","NavBarCommander","toggleSelect","prevState","isOpen","createSelectItems","commanderList","sort","legendaryCommanders","epicCommanders","forEach","selectItem","Item","key","changeCommander","alt","src","tier","push","nextProps","nextState","show","onToggle","Announcement","InvalidBuildModal","toggle","modal","Modal","centered","onHide","closeButton","faExclamationTriangle","Body","message","Footer","Button","AnnouncementModal","isInvalidBuild","faBullhorn","bugs","url","rel","faInfoCircle","AboutModal","getContributors","contributors","showDonate","Tabs","defaultActiveKey","Tab","eventKey","version","author","toggleAnnounce","toggleTour","ResetModal","resetTalents","ShareModal","copyURL","input","readOnly","select","execCommand","innerHTML","copyEmbedURL","shareSocial","faLink","defaultValue","faCopy","EmailShareButton","EmailIcon","round","RedditShareButton","RedditIcon","TwitterShareButton","TwitterIcon","WeiboShareButton","WeiboIcon","WhatsappShareButton","WhatsappIcon","PocketShareButton","PocketIcon","faCode","rows","NavBar","showAbout","aboutModalRef","resetModalRef","shareModalRef","ref","component","Navbar","Brand","minDeviceWidth","cursor","Nav","toggleMouseXY","toggleTalentID","isShownMouseXY","isShownTalentID","GuideIcon","guides","SummaryPanel","guide","getGuides","calcPointsRemaining","StatsPanel","getAllStats","allStats","stats","StatsTalentsPanel","toggleStatsTalents","isShownStatsTalents","calcStatsTalents","talents","nodes","some","values","idx","talentInfo","treeData","Collapse","in","mainTalents","InfoPanel","orientation","loadTreeData","Attack","require","Archer","Cavalry","Conquering","Defense","Garrison","Gathering","Infantry","Integration","Leadership","Mobility","Peacekeeping","Skill","Support","Versatility","TreePanel","React","lazy","App","getEmptyState","storage","dataVersion","getEmptyStats","Health","updateURL","method","queryString","history","replaceState","zeroTalents","createZeroTalents","treePanelRef","drawLines","resetPanZoom","numRed","numYellow","numBlue","fill","changeTalentValue","valueIdx","how","talent","stat","multiStat","newArr","newStats","curStat","createMaxValueArray","maxArray","points","repaint","setItem","toggleMouseListeners","tourRef","announceRef","invalidModalFlag","invalidBuildMessage","urlParams","slice","urlDataVersion","comID","parseInt","commanderName","find","el","treeName","talentData","fallback","infoPanelRef","self","top","initialize","pageview","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","homepage"],"mappings":"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","file":"static/js/main.c77a7eaa.chunk.js","sourcesContent":["import { valuesToLetters, lettersToValues } from './values';\nimport Commanders from './data/commanders.json';\nimport { title } from '../package.json';\n\n/**\n * Sum all values of an array\n *\n * @param {Number[]} arr Array to calculate sum of\n * @returns {Number} Sum of the array\n */\nexport function sumArray(arr) {\n  return arr.reduce((partial, a) => partial + a, 0);\n}\n\n/**\n * Check if two arrays are equal\n *\n * @param {array} a First array\n * @param {array} b Second array\n * @returns {boolean} Are the two arrays equal?\n */\nexport function arraysEqual(a, b) {\n  if (a === b) return true;\n  if (a == null || b == null) return false;\n  // eslint-disable-next-line\n  if (a.length != b.length) return false;\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n/**\n * Check if all array elements are different/unique\n *\n * @param {Array} arr Array to check\n * @returns {Boolean} Whether all elements are different/unique\n */\nexport function arrayAllUnique(arr) {\n  const tmp = new Set(arr);\n  if (tmp.size === arr.length) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Check if array is nested/multidimensional\n *\n * @param {Array} arr array to check for nesting\n * @returns {Boolean} Boolean indicating whether array is multidimensional\n */\nexport function isMultidimensional(arr) {\n  return arr.filter(Array.isArray).length !== 0;\n}\n\n/**\n * Get maximum number of spendable points for a talent\n *\n * @param {Array} talentValues array of values for a given talent\n * @returns {Number} Number of maximum spendable points\n */\nexport function getMaxTalentCount(talentValues) {\n  let max;\n  if (!isMultidimensional(talentValues)) {\n    max = talentValues.length;\n  } else {\n    // All multidimensional arrays should be same length (checked by unit test)\n    max = talentValues[0].length;\n  }\n  return max;\n}\n\n/**\n * Replace talent text placeholders (e.g. `${1}`) with selected values\n *\n * @param {string} text Full talent text\n * @param {Array} talentValues Array (or multidimensional array) of values for the talent\n * @param {Number} replacementIdx Index of the value to use as replacement\n * @returns {string} Talent text with placeholders replaced\n */\nexport function replaceTalentText(text, talentValues, replacementIdx) {\n  let newText = text;\n\n  if (isMultidimensional(talentValues)) {\n    for (let i = 0; i < talentValues.length; i++) {\n      let re = new RegExp(`\\\\$\\\\{${i + 1}\\\\}`, 'g');\n      newText = newText.replace(re, talentValues[i][replacementIdx]);\n    }\n  } else {\n    newText = newText.replace(/\\$\\{1\\}/g, talentValues[replacementIdx]);\n  }\n\n  return newText;\n}\n\n/**\n * Get the full name of a talent tree (e.g. Skill, Garrison). The name\n * depends on the tree color and the selected commander\n *\n * @param {string} color Color of the tree to retrieve the name for\n * @param {string} commander Name of the commander\n * @returns {string} full tree name\n */\nexport function getTreeName(color, commander) {\n  const commanderData = Commanders[commander];\n  if (commanderData) {\n    return commanderData[color];\n  }\n}\n\n/**\n * Set the window title with commander name and talents spent in each tree\n *\n * @param {string} commander Full name of the commander\n * @param {Number[]} r Array of red tree values\n * @param {Number[]} y Array of yellow tree values\n * @param {Number[]} b Array of blue tree values\n * @param {string} [sep='/'] Separator to use between point totals\n */\nexport function setTitle(commander, r, y, b, sep = '/') {\n  const newTitle = `${createSummaryString(commander, r, y, b, sep)} | ${title}`;\n  document.title = newTitle;\n}\n\n/**\n * Create a string with commander name and talents spent in each tree\n *\n * @param {string} commander Full name of the commander\n * @param {Number[]} r Array of red tree values\n * @param {Number[]} y Array of yellow tree values\n * @param {Number[]} b Array of blue tree values\n * @param {string} [sep='/'] Separator to use between point totals\n * @returns {string} String summarizing the commander and points spent\n */\nexport function createSummaryString(commander, r, y, b, sep = '/') {\n  const rSpent = sumArray(r);\n  const ySpent = sumArray(y);\n  const bSpent = sumArray(b);\n  const name = Commanders[commander].shortName || commander;\n  return `${name} (${rSpent}${sep}${ySpent}${sep}${bSpent})`;\n}\n\n/**\n * Get current talent URL\n *\n * @param {Boolean} embed Should returned URL be embeddable?\n * @returns {String} Current/embeddable URL\n */\nexport function getURL(embed = false) {\n  if (embed) {\n    return `${window.location.origin}/${window.location.search.replace(\n      '?',\n      '?embed;'\n    )}`;\n  } else {\n    if (isEmbed(window.location.search)) {\n      return `${window.location.origin}/${window.location.search.replace(\n        '?embed;',\n        '?'\n      )}`;\n    } else {\n      return `${window.location.origin}/${window.location.search}`;\n    }\n  }\n}\n\n/**\n * Check whether app is launched in embed mode\n *\n * @param {String} path URL path to check for embed\n * @returns {Boolean} Whether URL path contains an embed directive\n */\nexport function isEmbed(path) {\n  return path.includes('embed') ? true : false;\n}\n\n/**\n * Detect if device is touch enabled\n *\n * @returns {Boolean} Whether device is touch or not\n */\nexport function isTouchDevice() {\n  if (window.matchMedia('(pointer: coarse)').matches) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Check whether user is new or returning\n *\n * @returns {Boolean} Whether user is new or returning\n */\nexport function isNewUser() {\n  if (\n    !localStorage.getItem('isNewUser') ||\n    JSON.parse(localStorage.getItem('isNewUser') === true)\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Check whether release is an upgrade. Ignores hotfix/patch releases\n *\n * @param {String} oldVer SemVer string of old version\n * @param {String} newVer SemVer string of new version\n * @returns {Boolean} Whether newVer is an upgrade\n */\nexport function isUpgrade(oldVer, newVer) {\n  // New users are never considered upgrades\n  if (isNewUser()) {\n    return false;\n  }\n\n  const [oldMajor, oldMinor] = oldVer.split('.').map(Number);\n  const [newMajor, newMinor] = newVer.split('.').map(Number);\n\n  if (newMajor > oldMajor || newMinor > oldMinor) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Encode/compress the passed text\n *\n * @param {string} text Text to be encoded/compressed\n * @returns {string} Encoded/compressed version of the text\n */\nexport function encode(text) {\n  const encoded = text\n    .match(/(..?)/g)\n    .map(v => {\n      return valuesToLetters.hasOwnProperty(v) ? valuesToLetters[v] : v;\n    })\n    .join('');\n\n  return encoded;\n}\n\n/**\n * Decode encoded text\n *\n * @param {string} encoded Encoded form of the text\n * @returns {string} Decoded string\n */\nexport function decode(encoded) {\n  const decoded = encoded\n    .split('')\n    .map(k => {\n      return lettersToValues.hasOwnProperty(k) ? lettersToValues[k] : k;\n    })\n    .join('');\n\n  return decoded;\n}\n\nexport default {\n  sumArray,\n  arraysEqual,\n  arrayAllUnique,\n  isMultidimensional,\n  getMaxTalentCount,\n  replaceTalentText,\n  setTitle,\n  createSummaryString,\n  getURL,\n  isEmbed,\n  isTouchDevice,\n  isNewUser,\n  isUpgrade,\n  encode,\n  decode\n};\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h3>Something broke!</h3>\n          <details style={{ whiteSpace: 'pre-wrap' }}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","/** Maximum number of talent points available in the game */\nexport const maxPoints = 74;\n\n// Max width of mobile/tablet devices (px)\nexport const mobileBreakpoint = 1280;\n\n/** Mapping value pairs to letters for encoding */\nexport const valuesToLetters = {\n  '00': 'a',\n  '01': 'b',\n  '02': 'c',\n  '03': 'd',\n  '04': 'e',\n  '10': 'f',\n  '11': 'g',\n  '12': 'h',\n  '13': 'i',\n  '14': 'j',\n  '20': 'k',\n  '21': 'l',\n  '22': 'm',\n  '23': 'n',\n  '24': 'o',\n  '30': 'p',\n  '31': 'q',\n  '32': 'r',\n  '33': 's',\n  '34': 't',\n  '35': 'u',\n  '40': 'v',\n  '41': 'w',\n  '42': 'x',\n  '43': 'y',\n  '44': 'z'\n};\n\n/** Mapping letters to value pairs for decoding */\nexport const lettersToValues = {\n  a: '00',\n  b: '01',\n  c: '02',\n  d: '03',\n  e: '04',\n  f: '10',\n  g: '11',\n  h: '12',\n  i: '13',\n  j: '14',\n  k: '20',\n  l: '21',\n  m: '22',\n  n: '23',\n  o: '24',\n  p: '30',\n  q: '31',\n  r: '32',\n  s: '33',\n  t: '34',\n  u: '35',\n  v: '40',\n  w: '41',\n  x: '42',\n  y: '43',\n  z: '44'\n};\n","var map = {\n\t\"./v1/Attack.json\": 127\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 126;","var map = {\n\t\"./v1/Archer.json\": 129\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 128;","var map = {\n\t\"./v1/Cavalry.json\": 131\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 130;","var map = {\n\t\"./v1/Conquering.json\": 133\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 132;","var map = {\n\t\"./v1/Defense.json\": 135\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 134;","var map = {\n\t\"./v1/Garrison.json\": 137\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 136;","var map = {\n\t\"./v1/Gathering.json\": 139\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 138;","var map = {\n\t\"./v1/Infantry.json\": 141\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 140;","var map = {\n\t\"./v1/Integration.json\": 143\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 142;","var map = {\n\t\"./v1/Leadership.json\": 145\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 144;","var map = {\n\t\"./v1/Mobility.json\": 147\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 146;","var map = {\n\t\"./v1/Peacekeeping.json\": 149\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 148;","var map = {\n\t\"./v1/Skill.json\": 151\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 150;","var map = {\n\t\"./v1/Support.json\": 153\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 152;","var map = {\n\t\"./v1/Versatility.json\": 155\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 154;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport Joyride, { ACTIONS, EVENTS, STATUS } from 'react-joyride';\nimport { isNewUser } from './utils';\n\n/**\n * Component containing the guided tour for app onboarding\n *\n * @class GuidedTour\n * @extends {Component}\n */\nclass GuidedTour extends Component {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      run: isNewUser() ? true : false,\n      stepIndex: 0,\n      steps: [\n        {\n          content: 'Select your commander using this dropdown',\n          target: '#select-commander',\n          placement: 'auto',\n          disableBeacon: true\n        },\n        {\n          content:\n            'View guides for the selected commander and check the number of points you have left to spend',\n          target: '#summary-panel',\n          placement: 'auto'\n        },\n        {\n          content: 'Check various stats given by your talent build',\n          target: '#stats-panel',\n          placement: 'auto'\n        },\n        {\n          content:\n            'Reset your talent build. This will delete all assigned talent points',\n          target: '#button-reset',\n          placement: 'auto'\n        },\n        {\n          content:\n            'Save a screenshot of your current talent build. No need to settle for those blurry in-game screenshots anymore!',\n          target: '#button-screenshot',\n          placement: 'auto'\n        },\n        {\n          content:\n            'Talent builds can be shared with a link. Click this to get your shareable link, or simply copy your current URL',\n          target: '#button-share',\n          placement: 'auto'\n        },\n        {\n          content:\n            'Change display settings, or activate additional functionality like Speed Mode',\n          target: '#select-settings'\n        },\n        {\n          content:\n            'Get additional info about the app. You can also restart the guided tour here',\n          target: '#nav-icon',\n          locale: { last: 'Finish' }\n        }\n      ]\n    };\n  }\n\n  /**\n   * Restart the guided tour by resetting the current tour step\n   *\n   * @memberof GuidedTour\n   */\n  restartTour = () => {\n    this.setState({\n      run: true,\n      stepIndex: 0\n    });\n  };\n\n  /**\n   * Handle tour events (next step, tour close etc)\n   *\n   * @memberof GuidedTour\n   */\n  handleJoyrideCallback = data => {\n    const { action, index, status, type } = data;\n\n    if ([STATUS.FINISHED, STATUS.SKIPPED].includes(status)) {\n      // Need to set our running state to false, so we can restart if we click start again.\n      this.setState({ run: false, stepIndex: 0 });\n    } else if (action === ACTIONS.CLOSE) {\n      this.setState({ run: false, stepIndex: 0 });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      // Update state to advance the tour\n      this.setState({ stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) });\n    }\n  };\n\n  render() {\n    return (\n      <Joyride\n        run={this.state.run}\n        callback={this.handleJoyrideCallback}\n        stepIndex={this.state.stepIndex}\n        steps={this.state.steps}\n        continuous={true}\n        showProgress={true}\n        showSkipButton={false}\n        disableOverlayClose={true}\n        styles={{\n          options: {\n            primaryColor: 'var(--color-highlight)',\n            overlayColor: 'rgba(0, 0, 0, 0.6)'\n          }\n        }}\n      />\n    );\n  }\n}\n\nexport default GuidedTour;\n","import React, { useState } from 'react';\nimport ReactGA from 'react-ga';\nimport Spinner from 'react-bootstrap/Spinner';\nimport domtoimage from 'dom-to-image';\nimport {\n  faTrashAlt,\n  faCamera,\n  faShareAlt\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { createSummaryString } from './utils';\n\nimport './styles/NavBarButtons.css';\n\n/**\n * Nav bar component containing main buttons\n *\n */\nfunction NavBarButtons(props) {\n  const [isDownloading, setIsDownloading] = useState(false);\n\n  /**\n   * Take a screenshot of the talent tree, add banner, and download\n   *\n   * @param {boolean} [addBanner=true] Should a logo/banner be rendered?\n   * @memberof NavBarButtons\n   */\n  function takeScreenshot(elementID, addBanner = true) {\n    ReactGA.event({\n      category: 'App',\n      action: 'Screenshot',\n      label: props.commander\n    });\n\n    setIsDownloading(true);\n    const dpr = window.devicePixelRatio || 1;\n    const node = document.getElementById(elementID);\n\n    if (addBanner) {\n      document.getElementById('banner').style.visibility = 'visible';\n    }\n\n    domtoimage\n      .toJpeg(node, {\n        height: node.offsetHeight * dpr,\n        width: node.offsetWidth * dpr,\n        style: {\n          transform: 'scale(' + dpr + ')',\n          transformOrigin: 'top left',\n          width: node.offsetWidth + 'px',\n          height: node.offsetHeight + 'px'\n        }\n      })\n      .then(dataUrl => {\n        const link = document.createElement('a');\n        link.href = dataUrl;\n        link.download = `${createSummaryString(\n          props.commander,\n          props.red,\n          props.yellow,\n          props.blue,\n          '-'\n        )}.jpeg`;\n        link.click();\n\n        document.getElementById('banner').style.visibility = 'hidden';\n        setIsDownloading(false);\n      });\n  }\n\n  return (\n    <form className=\"form-inline\">\n      <button\n        id=\"button-reset\"\n        data-testid=\"button-reset\"\n        type=\"button\"\n        className=\"btn btn-sm btn-danger\"\n        disabled={props.commander | props.calcPointsSpent() ? false : true}\n        onClick={() => props.showReset()}\n      >\n        <FontAwesomeIcon icon={faTrashAlt} />\n        <span className=\"nav-button-text\">Reset</span>\n      </button>\n\n      <button\n        id=\"button-screenshot\"\n        data-testid=\"button-screenshot\"\n        type=\"button\"\n        disabled={props.commander | props.calcPointsSpent() ? false : true}\n        className=\"btn btn-sm btn-primary\"\n        onClick={() => {\n          const elementID = props.isScreenshotStats\n            ? 'main-container'\n            : 'tree-panel';\n          takeScreenshot(elementID);\n        }}\n      >\n        {isDownloading ? (\n          <Spinner size=\"sm\" animation=\"border\" variant=\"light\" />\n        ) : (\n          <FontAwesomeIcon icon={faCamera} />\n        )}\n        <span className=\"nav-button-text\">Screenshot</span>\n      </button>\n\n      <button\n        id=\"button-share\"\n        data-testid=\"button-share\"\n        type=\"button\"\n        disabled={props.commander | props.calcPointsSpent() ? false : true}\n        className=\"btn btn-sm btn-success\"\n        onClick={() => props.showShare()}\n      >\n        <FontAwesomeIcon icon={faShareAlt} />\n        <span className=\"nav-button-text\">Share</span>\n      </button>\n    </form>\n  );\n}\n\nexport default NavBarButtons;\n","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './styles/Tooltips.css';\n\n/**\n * Tooltip showing a hoverable 'help' tooltip\n *\n * @returns {Tooltip} Tooltip\n */\nexport function HelpTooltip(props) {\n  return (\n    <OverlayTrigger\n      placement=\"top\"\n      flip={true}\n      trigger={['hover', 'click']}\n      overlay={<Tooltip className=\"help-text\">{props.tooltip}</Tooltip>}\n    >\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"help-icon\" />\n    </OverlayTrigger>\n  );\n}\n\n/**\n * General tooltip component\n *\n * @returns {Tooltip} Tooltip\n */\nexport function GeneralTooltip(props) {\n  return (\n    <OverlayTrigger\n      placement=\"top\"\n      flip={true}\n      trigger={['hover', 'click']}\n      overlay={<Tooltip className=\"help-text\">{props.tooltip}</Tooltip>}\n    >\n      {props.children}\n    </OverlayTrigger>\n  );\n}\n\nexport default { HelpTooltip, GeneralTooltip };\n","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport NavItem from 'react-bootstrap/NavItem';\nimport NavLink from 'react-bootstrap/NavLink';\nimport Form from 'react-bootstrap/Form';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { HelpTooltip } from './Tooltips';\n\nimport './styles/NavBarSettings.css';\n\nfunction NavBarSettings(props) {\n  return (\n    <Dropdown alignRight as={NavItem} id=\"select-settings\">\n      <Dropdown.Toggle as={NavLink} data-testid=\"select-settings\">\n        <FontAwesomeIcon icon={faCog} />\n        <span className=\"nav-button-text\">Settings</span>\n      </Dropdown.Toggle>\n\n      <Dropdown.Menu id=\"settings-menu\" className=\"nav-menu\">\n        <Form>\n          <Form.Group id=\"settings-group\">\n            <Dropdown.Header>Display</Dropdown.Header>\n            <Form.Check\n              type=\"switch\"\n              id=\"settings-info-panel\"\n              data-testid=\"settings-info-panel\"\n              label=\"Info panel\"\n              checked={props.isShownInfoPanel}\n              onChange={e => props.toggleInfoPanel()}\n            />\n            <Form.Check\n              type=\"switch\"\n              id=\"settings-values\"\n              data-testid=\"settings-values\"\n              label=\"Node values\"\n              checked={props.isShownValues}\n              onChange={e => props.toggleValueDisplay()}\n            />\n            <Form.Check\n              type=\"switch\"\n              id=\"settings-totals\"\n              data-testid=\"settings-totals\"\n              label=\"Total spent\"\n              checked={props.isShownTotals}\n              onChange={e => props.toggleTotalDisplay()}\n            />\n\n            <Dropdown.Divider />\n\n            <Dropdown.Header>Node Size</Dropdown.Header>\n            <div className=\"d-flex flex-column\">\n              <ToggleButtonGroup\n                name=\"size\"\n                size=\"sm\"\n                value={props.nodeSize}\n                onChange={val => {\n                  props.toggleNodeSize(val);\n                }}\n              >\n                <ToggleButton\n                  type=\"radio\"\n                  name=\"radio\"\n                  value=\"S\"\n                  variant=\"outline-primary\"\n                >\n                  S\n                </ToggleButton>\n                <ToggleButton\n                  type=\"radio\"\n                  name=\"radio\"\n                  value=\"M\"\n                  variant=\"outline-primary\"\n                >\n                  M\n                </ToggleButton>\n                <ToggleButton\n                  type=\"radio\"\n                  name=\"radio\"\n                  value=\"L\"\n                  variant=\"outline-primary\"\n                >\n                  L\n                </ToggleButton>\n              </ToggleButtonGroup>\n\n              <Dropdown.Divider />\n              <Dropdown.Header>Screenshot</Dropdown.Header>\n              <Form.Check\n                type=\"switch\"\n                id=\"settings-screenshot-stats\"\n                label=\"Include Stats\"\n                checked={props.isScreenshotStats}\n                onChange={e => props.toggleScreenshotStats()}\n              />\n\n              <Dropdown.Divider />\n              <Dropdown.Header>Expert</Dropdown.Header>\n              <div className=\"help-wrapper\">\n                <Form.Check\n                  type=\"switch\"\n                  id=\"settings-speed-mode\"\n                  label=\"Speed mode\"\n                  checked={props.isSpeedMode}\n                  onChange={e => props.toggleSpeedMode()}\n                />\n                <HelpTooltip\n                  tooltip=\"No tooltips. Left/right click nodes directly to assign/remove\n            points\"\n                />\n              </div>\n            </div>\n\n            {process.env.NODE_ENV === 'development' && (\n              <>\n                <Dropdown.Divider />\n                <Dropdown.Header>Dev Mode</Dropdown.Header>\n                <Form.Check\n                  type=\"switch\"\n                  id=\"settings-mouse\"\n                  data-testid=\"settings-mouse\"\n                  label=\"Show mouse XY\"\n                  checked={props.isShownMouseXY}\n                  onChange={e => props.toggleMouseXY()}\n                />\n                <Form.Check\n                  type=\"switch\"\n                  id=\"settings-talentID\"\n                  label=\"Show talent ID\"\n                  checked={props.isShownTalentID}\n                  onChange={e => props.toggleTalentID()}\n                />\n              </>\n            )}\n          </Form.Group>\n        </Form>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n}\n\nexport default NavBarSettings;\n","import React, { Component } from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport NavItem from 'react-bootstrap/NavItem';\nimport NavLink from 'react-bootstrap/NavLink';\n\nimport Commanders from './data/commanders.json';\nimport './styles/NavBarCommander.css';\n\n/**\n * Nav bar component containing commander drop down\n *\n * @class NavBarCommander\n * @extends {Component}\n */\nclass NavBarCommander extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.commander !== nextProps.commander ||\n      this.state.isOpen !== nextState.isOpen\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Toggle open state of the commander select dropdown\n   *\n   * @memberof NavBarCommander\n   */\n  toggleSelect = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  };\n\n  /**\n   * Create a list of all available commanders (sorted)\n   *\n   * @returns {Dropdown.Item[]} Array of Dropdown items for all commanders\n   * @memberof NavBarCommander\n   */\n  createSelectItems = () => {\n    const commanderList = Object.keys(Commanders).sort();\n    let legendaryCommanders = [];\n    let epicCommanders = [];\n\n    commanderList.forEach(c => {\n      let selectItem = (\n        <Dropdown.Item\n          data-testid=\"menu-item\"\n          key={c}\n          onClick={() => {\n            this.props.changeCommander(c);\n          }}\n        >\n          <img\n            className=\"select-commander-icon\"\n            alt={c}\n            src={`${process.env.PUBLIC_URL}/images/commanders/${c}.png`}\n          ></img>\n          {Commanders[c]['shortName'] ? Commanders[c]['shortName'] : c}\n        </Dropdown.Item>\n      );\n\n      if (Commanders[c].tier === 'Legendary') {\n        legendaryCommanders.push(selectItem);\n      } else if (Commanders[c].tier === 'Epic') {\n        epicCommanders.push(selectItem);\n      }\n    });\n    return [\n      <Dropdown.Header key=\"header-legendary\">Legendary</Dropdown.Header>,\n      ...legendaryCommanders,\n      <Dropdown.Divider key=\"div1\" />,\n      <Dropdown.Header key=\"header-epic\">Epic</Dropdown.Header>,\n      ...epicCommanders\n    ];\n  };\n\n  render() {\n    return (\n      <Dropdown\n        id=\"select-commander\"\n        alignRight\n        as={NavItem}\n        show={this.state.isOpen}\n        onToggle={this.toggleSelect}\n      >\n        <Dropdown.Toggle as={NavLink} data-testid=\"select-commander\">\n          {this.props.commander ? (\n            <img\n              data-testid=\"select-commander-icon\"\n              className=\"select-commander-icon select-commander-icon-header\"\n              alt={this.props.commander}\n              src={`${process.env.PUBLIC_URL}/images/commanders/${this.props.commander}.png`}\n            ></img>\n          ) : (\n            <img\n              data-testid=\"select-commander-icon\"\n              className=\"select-commander-icon select-commander-icon-header\"\n              alt=\"Unknown commander\"\n              src={`${process.env.PUBLIC_URL}/images/commanders/unknown.png`}\n            ></img>\n          )}\n          <span className=\"nav-button-text\">\n            {this.props.commander\n              ? Commanders[this.props.commander]['shortName']\n                ? Commanders[this.props.commander]['shortName']\n                : this.props.commander\n              : ' Commander'}\n          </span>\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu id=\"select-commander-menu\" className=\"nav-menu\">\n          {this.createSelectItems()}\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n\nexport default NavBarCommander;\n","import React from 'react';\nimport './styles/Announcement.css';\n\nfunction Announcement(props) {\n  return (\n    <>\n      <h1>{`New release: v1.3.0`}</h1>\n\n      <h2>New Features</h2>\n      <div>\n        I have received many requests for this feature and it is finally here:\n        screenshots!\n        <br />\n        <br />\n        Click the Screenshot button in the top navigation bar to take a\n        screenshot of your current talent build. Whatever you see in the middle\n        talent tree window will be what gets saved.\n        <br />\n        <br />\n        Don't settle for those blurry in-game screenshots anymore!\n      </div>\n      <img\n        src={`${process.env.PUBLIC_URL}/screenshots/screenshot.png`}\n        className=\"announce-img announce-img-border\"\n        alt=\"guide\"\n      ></img>\n\n      <hr className=\"announce-hr\" />\n\n      <div>\n        Two new legendary commanders have been added: Artemisia I and Ramesses\n        II. This includes full talent trees as well as commander guides.\n      </div>\n      <img\n        src={`${process.env.PUBLIC_URL}/screenshots/artemisia_ramesses.png`}\n        className=\"announce-img\"\n        alt=\"guide\"\n      ></img>\n\n      <h2>Other Changes</h2>\n      <ul>\n        <li>Created a new icon and logo for the website</li>\n        <li>\n          Commander image sizes have been reduced, so the commander list should\n          load faster. Image quality has not been reduced.\n        </li>\n      </ul>\n\n      <h2>Bug Fixes</h2>\n      <ul>\n        <li>\n          Fixed a bug where new users would always see the announcement window.\n        </li>\n        <li>Fixed some talent description typos.</li>\n      </ul>\n    </>\n  );\n}\n\nexport default Announcement;\n","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport Announcement from './Announcement';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport {\n  faExclamationTriangle,\n  faInfoCircle,\n  faTrashAlt,\n  faShareAlt,\n  faLink,\n  faCode,\n  faCopy,\n  faBullhorn\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  TwitterShareButton,\n  WhatsappShareButton,\n  RedditShareButton,\n  WeiboShareButton,\n  PocketShareButton,\n  EmailShareButton,\n  TwitterIcon,\n  WhatsappIcon,\n  RedditIcon,\n  PocketIcon,\n  EmailIcon,\n  WeiboIcon\n} from 'react-share';\n\nimport { title, author, contributors, bugs, version } from '../package.json';\nimport { getURL } from './utils';\nimport './styles/Modals.css';\n\n/**\n * Modal displaying warning about an invalid build retrived from URL\n *\n * @class InvalidBuildModal\n * @extends {Component}\n */\nexport class InvalidBuildModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: true\n    };\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n\n  render() {\n    return (\n      <Modal centered show={this.state.modal} onHide={this.toggle}>\n        <Modal.Header closeButton>\n          <span>\n            <FontAwesomeIcon\n              icon={faExclamationTriangle}\n              className=\"modal-icon\"\n            />\n          </span>\n          Invalid Talent Build\n        </Modal.Header>\n        <Modal.Body className=\"modal-body\">\n          <div>\n            The talent build you're trying to view is invalid. Make sure you've\n            copied and pasted the link correctly.\n            <br />\n            <br />\n          </div>\n          <div data-testid=\"invalid-modal-body\">\n            <b>Reason:</b> {this.props.message}\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={this.toggle}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\n/**\n * Modal displaying announcements\n *\n * @class AnnouncementModal\n * @extends {Component}\n */\nexport class AnnouncementModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal:\n        this.props.isNewUser ||\n        this.props.isEmbed ||\n        !this.props.isUpgrade ||\n        this.props.isInvalidBuild\n          ? false\n          : true\n    };\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n\n  show = () => {\n    this.setState({ modal: true });\n  };\n\n  render() {\n    return (\n      <Modal\n        data-testid=\"announce-modal\"\n        centered\n        size=\"lg\"\n        show={this.state.modal}\n        onHide={this.toggle}\n      >\n        <Modal.Header closeButton>\n          <span>\n            <FontAwesomeIcon icon={faBullhorn} className=\"modal-icon\" />\n          </span>\n          Announcement\n        </Modal.Header>\n        <Modal.Body className=\"modal-body\">\n          <Announcement />\n          <hr className=\"announce-hr\" />\n          If you have any feature requests, or notice any website issues, you\n          can make a post{' '}\n          <a href={bugs.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            here\n          </a>\n          .\n        </Modal.Body>\n        <Modal.Footer>\n          <span className=\"modal-reminder\">\n            ( You can view this announcement again on the Info page\n            <FontAwesomeIcon icon={faInfoCircle} className=\"modal-icon\" />)\n          </span>\n          <Button variant=\"primary\" onClick={this.toggle}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\n/**\n * Modal displaying information about the application\n *\n * @class AboutModal\n * @extends {Component}\n */\nexport class AboutModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.modal !== nextState.modal) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n\n  getContributors = () => {\n    let contributorsList = contributors.map((c, i) => [\n      i > 0 && ', ',\n      <a href={c.url} target=\"_blank\" rel=\"noopener noreferrer\" key={c.name}>\n        {c.name}\n      </a>\n    ]);\n\n    return contributorsList;\n  };\n\n  showDonate = () => {\n    ReactGA.event({\n      category: 'App',\n      action: 'Donate'\n    });\n  };\n\n  render() {\n    return (\n      <Modal centered show={this.state.modal} onHide={this.toggle}>\n        <Modal.Header closeButton>\n          <span>\n            <FontAwesomeIcon icon={faInfoCircle} className=\"modal-icon\" />\n          </span>\n          {title}\n        </Modal.Header>\n\n        <Modal.Body>\n          <Tabs defaultActiveKey=\"about\" className=\"tab-title\">\n            <Tab eventKey=\"about\" title=\"About\">\n              <div>\n                <img\n                  id=\"modal-app-icon\"\n                  src={`${process.env.PUBLIC_URL}/logo.svg`}\n                  alt=\"RoK Talents Logo\"\n                ></img>\n                Talent builder for Rise of Kingdoms. Best viewed on PC/laptop.\n              </div>\n              <br />\n              <div>\n                <span className=\"about-label\">App version:</span> {version}\n              </div>\n              <div>\n                <span className=\"about-label\">Creator:</span>{' '}\n                <a href={author.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {author.name}\n                </a>\n              </div>\n              <div>\n                <span className=\"about-label\">Contributors:</span>{' '}\n                {this.getContributors()}\n              </div>\n              <div>\n                <span className=\"about-label\">Report bug:</span>{' '}\n                <a href={bugs.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                  Submit\n                </a>\n              </div>\n              <div>\n                <span className=\"about-label\">Support development:</span>{' '}\n                <a\n                  href=\"https://www.buymeacoffee.com/simonho\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img\n                    id=\"coffee\"\n                    src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\"\n                    alt=\"Buy Me A Coffee\"\n                    onClick={this.showDonate}\n                  ></img>\n                </a>\n              </div>\n            </Tab>\n\n            <Tab eventKey=\"releases\" title=\"Releases\">\n              <Button\n                id=\"button-releases\"\n                variant=\"success\"\n                size=\"sm\"\n                onClick={() => {\n                  this.toggle();\n                  this.props.toggleAnnounce();\n                }}\n              >\n                View latest release\n              </Button>\n            </Tab>\n\n            <Tab eventKey=\"instructions\" title=\"Instructions\">\n              <ol>\n                <li>Choose commander in the top-right dropdown list</li>\n                <li>Assign points by clicking on talent nodes</li>\n                <li>Check your build stats in the Stats panel</li>\n                <li>\n                  Click the Share button to get a{' '}\n                  <strong>shareable link</strong> to your build\n                </li>\n              </ol>\n              <Button\n                id=\"button-tour\"\n                variant=\"success\"\n                size=\"sm\"\n                onClick={() => {\n                  this.toggle();\n                  this.props.toggleTour();\n                }}\n              >\n                Show Guided Tour\n              </Button>\n            </Tab>\n          </Tabs>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\n/**\n * Modal displaying reset/delete confirmation\n *\n * @class ResetModal\n * @extends {Component}\n */\nexport class ResetModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.modal !== nextState.modal) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n\n  render() {\n    return (\n      <Modal centered show={this.state.modal} onHide={this.toggle}>\n        <Modal.Header closeButton>\n          <span>\n            <FontAwesomeIcon icon={faTrashAlt} className=\"modal-icon\" />\n          </span>\n          Reset\n        </Modal.Header>\n\n        <Modal.Body className=\"modal-body\">\n          <div>Are you sure you want to reset the talent build?</div>\n          <div>This will remove all assigned talent points.</div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button\n            variant=\"danger\"\n            onClick={() => {\n              this.props.resetTalents();\n              this.toggle();\n            }}\n          >\n            Reset\n          </Button>\n          <Button variant=\"secondary\" onClick={this.toggle}>\n            Cancel\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\n/**\n * Modal displaying sharing options for talent build\n *\n * @class ShareModal\n * @extends {Component}\n */\nexport class ShareModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.modal !== nextState.modal) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  };\n\n  copyURL = () => {\n    const input = document.getElementById('url');\n    input.readOnly = true;\n    input.select();\n    document.execCommand('copy');\n    document.getElementById('copyButton').innerHTML = '\\u2713';\n    ReactGA.event({\n      category: 'Share',\n      action: 'Copy URL'\n    });\n  };\n\n  copyEmbedURL = () => {\n    const input = document.getElementById('url-embed');\n    input.readOnly = true;\n    input.select();\n    document.execCommand('copy');\n    document.getElementById('copyEmbedButton').innerHTML = '\\u2713';\n    ReactGA.event({\n      category: 'Share',\n      action: 'Copy Embed URL'\n    });\n  };\n\n  shareSocial = () => {\n    ReactGA.event({\n      category: 'Share',\n      action: 'Share social media'\n    });\n  };\n\n  render() {\n    return (\n      <Modal centered show={this.state.modal} onHide={this.toggle}>\n        <Modal.Header closeButton>\n          <span>\n            <FontAwesomeIcon icon={faShareAlt} className=\"modal-icon\" />\n          </span>\n          Share Talent Build\n        </Modal.Header>\n\n        <Modal.Body>\n          <Tabs defaultActiveKey=\"link\" className=\"tab-title\">\n            <Tab eventKey=\"link\" title=\"Link\">\n              <div className=\"share-modal-label\">\n                Shareable link to this talent build:\n              </div>\n\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">\n                    <FontAwesomeIcon icon={faLink} />\n                  </span>\n                </div>\n                <input\n                  id=\"url\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  defaultValue={getURL()}\n                  readOnly\n                ></input>\n                <div className=\"input-group-append\">\n                  <button\n                    id=\"copyButton\"\n                    className=\"btn btn-success\"\n                    type=\"button\"\n                    onClick={this.copyURL}\n                  >\n                    <FontAwesomeIcon icon={faCopy} />\n                  </button>\n                </div>\n              </div>\n\n              <hr />\n\n              <div className=\"share-modal-label\">Share to social media:</div>\n\n              <div id=\"share-modal-social\" onClick={this.shareSocial}>\n                <EmailShareButton url={window.location.href}>\n                  <EmailIcon size={32} round />\n                </EmailShareButton>\n                <RedditShareButton url={window.location.href}>\n                  <RedditIcon size={32} round />\n                </RedditShareButton>\n                <TwitterShareButton url={window.location.href}>\n                  <TwitterIcon size={32} round />\n                </TwitterShareButton>\n                <WeiboShareButton url={window.location.href}>\n                  <WeiboIcon size={32} round />\n                </WeiboShareButton>\n                <WhatsappShareButton url={window.location.href}>\n                  <WhatsappIcon size={32} round />\n                </WhatsappShareButton>\n                <PocketShareButton url={window.location.href}>\n                  <PocketIcon size={32} round />\n                </PocketShareButton>\n              </div>\n            </Tab>\n\n            <Tab eventKey=\"embed\" title=\"Embed\">\n              <div>\n                If you have a blog or website, you can use the{' '}\n                <strong>HTML</strong> code below to embed this talent build\n                directly into your site.\n              </div>\n              <div>\n                <strong>Note</strong>: The embedded talent build will be\n                view-only.\n              </div>\n              <br />\n\n              <div className=\"input-group mb-3\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">\n                    <FontAwesomeIcon icon={faCode} />\n                  </span>\n                </div>\n                <textarea\n                  id=\"url-embed\"\n                  className=\"form-control\"\n                  rows={5}\n                  defaultValue={`<iframe height=\"400\" width=\"400\" allowfullscreen=\"true\" sandbox=\"allow-scripts allow-modals allow-same-origin allow-popups allow-popups-to-escape-sandbox\" src=\"${getURL(\n                    true\n                  )}\"></iframe>`}\n                  readOnly\n                ></textarea>\n                <div className=\"input-group-append\">\n                  <button\n                    id=\"copyEmbedButton\"\n                    className=\"btn btn-success\"\n                    type=\"button\"\n                    onClick={this.copyEmbedURL}\n                  >\n                    <FontAwesomeIcon icon={faCopy} />\n                  </button>\n                </div>\n              </div>\n            </Tab>\n          </Tabs>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={this.toggle}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default {\n  InvalidBuildModal,\n  AnnouncementModal,\n  AboutModal,\n  ResetModal,\n  ShareModal\n};\n","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport MediaQuery from 'react-responsive';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavBarButtons from './NavBarButtons';\nimport NavBarSettings from './NavBarSettings';\nimport NavBarCommander from './NavBarCommander';\nimport { AboutModal, ResetModal, ShareModal } from './Modals';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { title } from '../package.json';\nimport './styles/NavBar.css';\n\n/**\n * Nav bar component containing main application buttons/controls\n *\n * @class NavBar\n * @extends {Component}\n */\nclass NavBar extends Component {\n  /**\n   * Control visibility of the \"About\" modal\n   *\n   * @memberof NavBar\n   */\n  showAbout = () => {\n    this.aboutModalRef.toggle();\n    ReactGA.event({\n      category: 'App',\n      action: 'View about modal'\n    });\n  };\n\n  /**\n   * Control visibility of the \"Reset\" modal\n   *\n   * @memberof NavBar\n   */\n  showReset = () => {\n    this.resetModalRef.toggle();\n  };\n\n  /**\n   * Control visibility of the \"Share\" modal\n   *\n   * @memberof NavBar\n   */\n  showShare = () => {\n    this.shareModalRef.toggle();\n    ReactGA.event({\n      category: 'Share',\n      action: 'View share modal'\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <AboutModal\n          ref={component => (this.aboutModalRef = component)}\n          toggleTour={this.props.toggleTour}\n          toggleAnnounce={this.props.toggleAnnounce}\n        />\n        <ResetModal\n          ref={component => (this.resetModalRef = component)}\n          resetTalents={this.props.resetTalents}\n        />\n        <ShareModal ref={component => (this.shareModalRef = component)} />\n\n        <Navbar\n          variant=\"light\"\n          className={this.props.isSpeedMode ? 'nav-speed' : 'navbar'}\n        >\n          <Navbar.Brand href=\"/\">\n            <img\n              id=\"nav-app-icon\"\n              src={`${process.env.PUBLIC_URL}/icon.svg`}\n              alt=\"RoK Talents Logo\"\n            ></img>\n          </Navbar.Brand>\n\n          <MediaQuery minDeviceWidth={450}>\n            <Navbar.Brand href=\"/\">{title}</Navbar.Brand>\n          </MediaQuery>\n\n          <Navbar.Brand\n            id=\"nav-icon\"\n            className=\"mr-auto\"\n            style={{ cursor: 'pointer' }}\n            onClick={() => this.showAbout(true)}\n          >\n            <FontAwesomeIcon icon={faInfoCircle} />\n          </Navbar.Brand>\n\n          <Nav className=\"ml-auto\">\n            <NavBarButtons\n              isScreenshotStats={this.props.isScreenshotStats}\n              calcPointsSpent={this.props.calcPointsSpent}\n              showReset={this.showReset}\n              showShare={this.showShare}\n              commander={this.props.commander}\n              red={this.props.red}\n              yellow={this.props.yellow}\n              blue={this.props.blue}\n            />\n\n            <NavBarSettings\n              toggleInfoPanel={this.props.toggleInfoPanel}\n              toggleTotalDisplay={this.props.toggleTotalDisplay}\n              toggleValueDisplay={this.props.toggleValueDisplay}\n              toggleNodeSize={this.props.toggleNodeSize}\n              toggleScreenshotStats={this.props.toggleScreenshotStats}\n              toggleSpeedMode={this.props.toggleSpeedMode}\n              toggleMouseXY={this.props.toggleMouseXY}\n              toggleTalentID={this.props.toggleTalentID}\n              isShownInfoPanel={this.props.isShownInfoPanel}\n              isShownValues={this.props.isShownValues}\n              isShownTotals={this.props.isShownTotals}\n              isScreenshotStats={this.props.isScreenshotStats}\n              isSpeedMode={this.props.isSpeedMode}\n              isShownMouseXY={this.props.isShownMouseXY}\n              isShownTalentID={this.props.isShownTalentID}\n              nodeSize={this.props.nodeSize}\n            />\n\n            <NavBarCommander\n              changeCommander={this.props.changeCommander}\n              commander={this.props.commander}\n            />\n          </Nav>\n        </Navbar>\n      </>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport { GeneralTooltip } from './Tooltips';\nimport Commanders from './data/commanders.json';\nimport './styles/SummaryPanel.css';\n\n/**\n * Summary panel component displaying commander info\n *\n */\nfunction SummaryPanel(props) {\n  function getGuides() {\n    if (Commanders[props.commander].guides) {\n      let guides = [];\n\n      for (let guide in Commanders[props.commander].guides) {\n        guides.push(\n          <GuideIcon key={guide} commander={props.commander} name={guide} />\n        );\n      }\n      return <div id=\"summary-panel-guides\">Guide: {guides}</div>;\n    }\n  }\n\n  return (\n    <div id=\"summary-panel\" className=\"info-box\">\n      <h1>{props.commander ? props.commander : 'Summary'}</h1>\n      <h3>{props.commander && Commanders[props.commander].title}</h3>\n      <h3>{props.commander && getGuides()}</h3>\n\n      <div id=\"summary-panel-summary\">\n        <p>Points remaining: {props.calcPointsRemaining()}</p>\n        <p>Points spent: {props.calcPointsSpent()}</p>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Icon for commander guides\n *\n * @returns {DOMElement} Icon linking to the external commander guide\n */\nfunction GuideIcon(props) {\n  function clickGuide() {\n    ReactGA.event({\n      category: 'Navigation',\n      action: `View guide (${props.name})`,\n      label: props.commander\n    });\n  }\n\n  return (\n    <GeneralTooltip tooltip={props.name}>\n      <a\n        href={Commanders[props.commander].guides[props.name]}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        onClick={clickGuide}\n      >\n        <img\n          className=\"summary-panel-guide-icon\"\n          src={`${process.env.PUBLIC_URL}/images/guides/${props.name}.png`}\n          alt={props.name}\n        ></img>\n      </a>\n    </GeneralTooltip>\n  );\n}\n\nexport default SummaryPanel;\n","import React, { Component } from 'react';\nimport { HelpTooltip } from './Tooltips';\n\nimport './styles/StatsPanel.css';\n\n/**\n * Stats panel component displaying stats about the current talent build\n *\n * @class StatsPanel\n * @extends {Component}\n */\nclass StatsPanel extends Component {\n  /**\n   * Get all calculated stats and their values\n   *\n   * @returns {DOMElement[]} Array of DOM elements containing stats and values\n   * @memberof StatsPanel\n   */\n  getAllStats = () => {\n    let allStats = [];\n    const keys = Object.keys(this.props.stats);\n    keys.sort();\n    for (var i = 0; i < keys.length; i++) {\n      allStats.push(\n        <p key={keys[i]}>{`${keys[i]}: ${this.props.stats[keys[i]]}%`}</p>\n      );\n    }\n    return allStats;\n  };\n\n  render() {\n    return (\n      <div id=\"stats-panel\" className=\"info-box\">\n        <h2>\n          Stats{' '}\n          <HelpTooltip tooltip=\"Totals only include unconditional and direct stat boosts. For example, does not include stats from rallies/garrison/% chance etc.\" />\n        </h2>\n        <div id=\"stats-panel-stats\">{this.getAllStats()}</div>\n      </div>\n    );\n  }\n}\n\nexport default StatsPanel;\n","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport Collapse from 'react-bootstrap/Collapse';\nimport { HelpTooltip } from './Tooltips';\nimport { getMaxTalentCount, replaceTalentText } from './utils';\n\nimport Commanders from './data/commanders.json';\nimport './styles/StatsTalentsPanel.css';\n\n/**\n * Stats talents panel component containing selected main talents\n *\n * @class StatsTalentsPanel\n * @extends {Component}\n */\nclass StatsTalentsPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isShownStatsTalents: false\n    };\n  }\n\n  /**\n   * Toggles visibility of the main talents descriptions\n   *\n   * @memberof StatsTalentsPanel\n   */\n  toggleStatsTalents = () => {\n    this.setState(prevState => ({\n      isShownStatsTalents: !prevState.isShownStatsTalents\n    }));\n\n    ReactGA.event({\n      category: 'App',\n      action: 'Toggle stats talents'\n    });\n  };\n\n  /**\n   * Calculate an array of main talents that don't belong in any of\n   * the base stat categories\n   *\n   * @returns {DOMElement[]} Array of all selected main talents\n   * @memberof StatsTalentsPanel\n   */\n  calcStatsTalents = () => {\n    const commander = this.props.commander;\n    let talents = [];\n\n    ['red', 'yellow', 'blue'].forEach(color => {\n      const nodes = this.props[color];\n\n      if (nodes.some(values => values !== 0)) {\n        nodes.forEach((value, idx) => {\n          const talentInfo = this.props.treeData[Commanders[commander][color]][\n            idx + 1\n          ];\n\n          if (value > 0 && talentInfo.type === 'node-large') {\n            talents.push(\n              <div key={talentInfo.name} className={`stats-talents-main`}>\n                <div className=\"stats-talents-title\">\n                  <span className={`bullet bg-${color}`}></span>\n\n                  {`${talentInfo.name} (${value}/${getMaxTalentCount(\n                    talentInfo.values\n                  )})`}\n                </div>\n\n                <Collapse in={this.state.isShownStatsTalents}>\n                  <div className=\"stats-talents-text\">\n                    {replaceTalentText(\n                      talentInfo.text,\n                      talentInfo.values,\n                      value - 1\n                    )}\n                  </div>\n                </Collapse>\n              </div>\n            );\n          }\n        });\n      }\n    });\n\n    return talents;\n  };\n\n  render() {\n    const mainTalents = this.calcStatsTalents();\n    return (\n      <div\n        id=\"stats-talents\"\n        className=\"info-box\"\n        onClick={this.toggleStatsTalents}\n      >\n        <h2 id=\"stats-talents-title\">\n          Main Talents{' '}\n          <HelpTooltip tooltip=\"Expandable list of all selected main talents\" />\n        </h2>\n        <div data-testid=\"stats-talents\">\n          {mainTalents.length === 0 ? 'None' : mainTalents}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StatsTalentsPanel;\n","import React, { Component } from 'react';\nimport MediaQuery from 'react-responsive';\nimport SummaryPanel from './SummaryPanel';\nimport StatsPanel from './StatsPanel';\nimport StatsTalentsPanel from './StatsTalentsPanel';\nimport ErrorBoundary from './Error';\nimport { isTouchDevice } from './utils';\n\nimport './styles/InfoPanel.css';\n\n/**\n * Info panel component displaying stats about the current talent build\n *\n * @class InfoPanel\n * @extends {Component}\n */\nclass InfoPanel extends Component {\n  render() {\n    return (\n      <div\n        id=\"info-panel\"\n        data-testid=\"info-panel\"\n        className={\n          this.props.isShownInfoPanel ? 'info-panel-open' : 'info-panel-closed'\n        }\n      >\n        <ErrorBoundary>\n          <div id=\"summary-panel-container\">\n            <SummaryPanel\n              commander={this.props.commander}\n              calcPointsRemaining={this.props.calcPointsRemaining}\n              calcPointsSpent={this.props.calcPointsSpent}\n            />\n            <MediaQuery orientation=\"portrait\">\n              <StatsPanel stats={this.props.stats} />\n            </MediaQuery>\n          </div>\n        </ErrorBoundary>\n\n        <MediaQuery orientation=\"landscape\">\n          <ErrorBoundary>\n            <StatsPanel stats={this.props.stats} />\n          </ErrorBoundary>\n\n          {!isTouchDevice() && (\n            <ErrorBoundary>\n              <StatsTalentsPanel\n                calcPointsSpent={this.props.calcPointsSpent}\n                commander={this.props.commander}\n                treeData={this.props.treeData}\n                red={this.props.red}\n                yellow={this.props.yellow}\n                blue={this.props.blue}\n              />\n            </ErrorBoundary>\n          )}\n        </MediaQuery>\n      </div>\n    );\n  }\n}\n\nexport default InfoPanel;\n","// Utility to map data files to object\nfunction loadTreeData(version) {\n  const treeData = {\n    Attack: require(`./v${version}/Attack.json`),\n    Archer: require(`./v${version}/Archer.json`),\n    Cavalry: require(`./v${version}/Cavalry.json`),\n    Conquering: require(`./v${version}/Conquering.json`),\n    Defense: require(`./v${version}/Defense.json`),\n    Garrison: require(`./v${version}/Garrison.json`),\n    Gathering: require(`./v${version}/Gathering.json`),\n    Infantry: require(`./v${version}/Infantry.json`),\n    Integration: require(`./v${version}/Integration.json`),\n    Leadership: require(`./v${version}/Leadership.json`),\n    Mobility: require(`./v${version}/Mobility.json`),\n    Peacekeeping: require(`./v${version}/Peacekeeping.json`),\n    Skill: require(`./v${version}/Skill.json`),\n    Support: require(`./v${version}/Support.json`),\n    Versatility: require(`./v${version}/Versatility.json`)\n  };\n\n  if (process.env.NODE_ENV === 'development') {\n    console.info(`Info: Loading game data version ${version}`);\n  }\n\n  return treeData;\n}\n\nexport default loadTreeData;\n","import React, { Component, Suspense } from 'react';\nimport ReactGA from 'react-ga';\nimport Spinner from 'react-bootstrap/Spinner';\nimport GuidedTour from './GuidedTour';\nimport NavBar from './NavBar';\nimport InfoPanel from './InfoPanel';\nimport { InvalidBuildModal, AnnouncementModal } from './Modals';\nimport ErrorBoundary from './Error';\nimport loadTreeData from './data/AllTrees';\nimport Commanders from './data/commanders.json';\nimport { maxPoints } from './values';\nimport { version, dataVersion } from '../package.json';\nimport {\n  sumArray,\n  getMaxTalentCount,\n  getTreeName,\n  setTitle,\n  isTouchDevice,\n  isUpgrade,\n  isNewUser,\n  encode,\n  decode\n} from './utils';\n\nimport './styles/App.css';\nimport './styles/fonts.css';\n\nconst TreePanel = React.lazy(() => import('./TreePanel'));\nlet treeData;\n\n/**\n * Main application component. Contains high level logic for managing application state\n *\n * @class App\n * @extends {Component}\n */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.invalidModalFlag = false;\n    this.invalidBuildMessage = '';\n\n    // Set initial state from query string\n    const urlParams = this.props.url.slice(1).split(';');\n\n    if (this.props.isEmbed) {\n      ReactGA.event({\n        category: 'Load',\n        action: 'Embed'\n      });\n    }\n\n    switch (urlParams.length) {\n      case 1: // blank url\n        this.state = this.getEmptyState();\n        treeData = loadTreeData(dataVersion);\n        this.updateURL('clear');\n        ReactGA.event({\n          category: 'Load',\n          action: 'New'\n        });\n        break;\n      case 5: // complete url\n      case 6: // embed url\n        // eslint-disable-next-line\n        let path, urlDataVersion, comID, red, yellow, blue;\n        if (urlParams.length === 5) {\n          [urlDataVersion, comID, red, yellow, blue] = urlParams;\n        } else if (urlParams.length === 6) {\n          [path, urlDataVersion, comID, red, yellow, blue] = urlParams;\n        }\n        urlDataVersion = parseInt(urlDataVersion);\n\n        const commanderName = Object.keys(Commanders).find(\n          key => Commanders[key]['id'] === comID\n        );\n\n        // Check for invalid build\n        if (urlDataVersion > dataVersion) {\n          this.invalidBuildMessage = 'Incorrect game data version';\n          this.invalidModalFlag = true;\n        } else if (!commanderName) {\n          this.invalidBuildMessage = 'Unknown commander ID';\n          this.invalidModalFlag = true;\n        } else {\n          this.state = this.getEmptyState();\n          treeData = loadTreeData(urlDataVersion);\n          this.state = {\n            ...this.state,\n            dataVersion: urlDataVersion,\n            commander: commanderName,\n            ...this.createZeroTalents(commanderName)\n          };\n\n          const colorPairs = [\n            [red, 'red'],\n            [yellow, 'yellow'],\n            [blue, 'blue']\n          ];\n\n          for (let color of colorPairs) {\n            // Decode and split talent string into array\n            let talents = decode(color[0])\n              .split('')\n              .map(Number);\n            const maxArray = this.createMaxValueArray(\n              this.state.commander,\n              color[1]\n            );\n\n            if (talents.length !== this.state[color[1]].length) {\n              // Check talent array is correct length\n              this.invalidBuildMessage = `Incorrect number of talents (${color[1]} tree)`;\n              this.invalidModalFlag = true;\n              break;\n            } else if (\n              // Check spent values are not too large\n              talents.some(function(el, idx) {\n                return el > maxArray[idx];\n              })\n            ) {\n              this.invalidBuildMessage = `Too many points assigned in talent (${color[1]} tree)`;\n              this.invalidModalFlag = true;\n              break;\n            } else {\n              // Store color array in state\n              this.state[color[1]] = talents;\n\n              // Calculate stats for the color\n              const treeName = getTreeName(color[1], commanderName);\n              for (let i = 0; i < talents.length; i++) {\n                const talentData = treeData[treeName][i + 1];\n                const stat = talentData['stats'];\n\n                if (talents[i] > 0 && stat) {\n                  const multiStat = Array.isArray(stat);\n                  if (multiStat) {\n                    for (let j = 0; j < stat.length; j++) {\n                      this.state.stats[stat[j]] +=\n                        talentData['values'][talents[i] - 1];\n                    }\n                  } else {\n                    this.state.stats[stat] +=\n                      talentData['values'][talents[i] - 1];\n                  }\n                }\n              }\n            }\n          }\n\n          // Check that the talent build has not overspent points\n          if (this.calcPointsRemaining() < 0) {\n            this.invalidBuildMessage = `Number of spent talent points exceeds maximum`;\n            this.invalidModalFlag = true;\n          }\n        }\n\n        if (this.invalidModalFlag) {\n          this.state = this.getEmptyState();\n          treeData = loadTreeData(dataVersion);\n          this.updateURL('clear');\n          ReactGA.event({\n            category: 'Load',\n            action: 'Error',\n            label: this.props.url\n          });\n        } else {\n          this.updateURL('update');\n          ReactGA.event({\n            category: 'Load',\n            action: 'Existing',\n            label: this.props.url\n          });\n        }\n        break;\n      default:\n        // Incorrect number of url params\n        this.invalidBuildMessage = `Incorrect number of build parameters (length: ${urlParams.length}, expected: 5)`;\n        this.invalidModalFlag = true;\n        this.state = this.getEmptyState();\n        treeData = loadTreeData(dataVersion);\n        this.updateURL('clear');\n        ReactGA.event({\n          category: 'Load',\n          action: 'Error',\n          label: this.props.url\n        });\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.isEmbed) {\n      localStorage.setItem('version', version);\n    }\n\n    if (isNewUser()) {\n      localStorage.setItem('isNewUser', false);\n    }\n  }\n\n  /**\n   * Get empty state values for new application instance. Also checks\n   * local storage for saved settings\n   *\n   * @returns {object} Object containing blank state values\n   * @memberof App\n   */\n  getEmptyState = () => {\n    let storage;\n\n    if (this.props.isEmbed) {\n      // Set default settings for embedded mode\n      storage = {\n        nodeSize: 'L',\n        isShownInfoPanel: false,\n        isShownValues: true,\n        isShownTotals: true,\n        isScreenshotStats: false,\n        isSpeedMode: false,\n        isShownMouseXY: false,\n        isShownTalentID: false\n      };\n    } else {\n      // Get/set default settings for regular mode\n      const isShownInfoPanel = JSON.parse(\n        localStorage.getItem('isShownInfoPanel')\n      );\n      const isShownValues = JSON.parse(localStorage.getItem('isShownValues'));\n      const isShownTotals = JSON.parse(localStorage.getItem('isShownTotals'));\n      const isScreenshotStats = JSON.parse(\n        localStorage.getItem('isScreenshotStats')\n      );\n      const isSpeedMode = JSON.parse(localStorage.getItem('isSpeedMode'));\n      const isShownMouseXY = JSON.parse(localStorage.getItem('isShownMouseXY'));\n      const isShownTalentID = JSON.parse(\n        localStorage.getItem('isShownTalentID')\n      );\n\n      // Default values\n      storage = {\n        nodeSize: localStorage.getItem('nodeSize') || 'M',\n        isShownInfoPanel: isShownInfoPanel === null ? true : isShownInfoPanel,\n        isShownValues: isShownValues === null ? true : isShownValues,\n        isShownTotals: isShownTotals === null ? true : isShownTotals,\n        isScreenshotStats:\n          isScreenshotStats === null ? false : isScreenshotStats,\n        isSpeedMode: isSpeedMode === null ? false : isSpeedMode,\n        isShownMouseXY: isShownMouseXY === null ? false : isShownMouseXY,\n        isShownTalentID: isShownTalentID === null ? false : isShownTalentID\n      };\n    }\n\n    return {\n      dataVersion: dataVersion,\n      commander: '',\n      red: [],\n      yellow: [],\n      blue: [],\n      stats: this.getEmptyStats(),\n      ...storage\n    };\n  };\n\n  /**\n   * Get object containing all stats and set them to 0\n   *\n   * @returns {object} Object containing stats with 0 values\n   * @memberof App\n   */\n  getEmptyStats = () => {\n    return { Attack: 0, Defense: 0, Health: 0, 'March Speed': 0 };\n  };\n\n  /**\n   * Update the current URL\n   *\n   * @param {string} method {update | clear} Should the new URL be updated\n   * with the new state or cleared (new app state)?\n   * @memberof App\n   */\n  updateURL = method => {\n    let queryString;\n\n    switch (method) {\n      case 'update':\n        queryString =\n          '?' +\n          (this.props.isEmbed ? 'embed;' : '') +\n          [\n            this.state.dataVersion,\n            Commanders[this.state.commander].id,\n            encode(this.state.red.join('')),\n            encode(this.state.yellow.join('')),\n            encode(this.state.blue.join(''))\n          ].join(';');\n\n        setTitle(\n          this.state.commander,\n          this.state.red,\n          this.state.yellow,\n          this.state.blue\n        );\n        break;\n      case 'clear':\n        queryString = '/';\n        break;\n      default:\n        break;\n    }\n    window.history.replaceState('', '', queryString);\n  };\n\n  /**\n   * Set blank state object for the newly selected commander,\n   * followed by `this.updateURL()`\n   *\n   * @param {string} commander Name of the commander being changed to\n   * @memberof App\n   */\n  changeCommander = commander => {\n    if (this.state.dataVersion !== dataVersion) {\n      treeData = loadTreeData(dataVersion);\n    }\n\n    const zeroTalents = this.createZeroTalents(commander);\n    this.setState(\n      {\n        dataVersion: dataVersion,\n        commander: commander,\n        ...zeroTalents,\n        stats: this.getEmptyStats()\n      },\n      () => {\n        this.updateURL('update');\n        this.treePanelRef.drawLines();\n\n        ReactGA.event({\n          category: 'Navigation',\n          action: 'Change commander',\n          label: commander\n        });\n      }\n    );\n\n    if (!isTouchDevice()) {\n      this.treePanelRef.resetPanZoom();\n    }\n  };\n\n  /**\n   * Create a new/blank state object for a commander. The individual talent\n   * tree arrays will be filled with an appropriate number of `0`\n   *\n   * @param {string} commander Name of commander to create empty talents for\n   * @returns {object} Object containing `0` arrays for each tree color\n   * @memberof App\n   */\n  createZeroTalents = commander => {\n    const numRed = Object.keys(treeData[Commanders[commander]['red']]).length;\n    const numYellow = Object.keys(treeData[Commanders[commander]['yellow']])\n      .length;\n    const numBlue = Object.keys(treeData[Commanders[commander]['blue']]).length;\n\n    const zeroTalents = {\n      red: Array(numRed).fill(0),\n      yellow: Array(numYellow).fill(0),\n      blue: Array(numBlue).fill(0)\n    };\n\n    return zeroTalents;\n  };\n\n  /**\n   * Set all tree node values to `0` for the currently selected commander\n   *\n   * @memberof App\n   */\n  resetTalents = () => {\n    ReactGA.event({\n      category: 'App',\n      action: 'Reset build'\n    });\n    this.changeCommander(this.state.commander);\n  };\n\n  /**\n   * Change the value of a single talent node. Followed by `this.updateURL()`\n   *\n   * @param {string} color Color of the tree the node belongs to\n   * @param {number} idx Index of the node in the tree/color array.\n   * @param {number} valueIdx Index of the changed value.\n   * @param {string} how {increase | decrease} Should node value be increased\n   *  or decreased?\n   * @memberof App\n   */\n  changeTalentValue = (color, idx, valueIdx, how) => {\n    let talent = treeData[Commanders[this.state.commander][color]][idx];\n    let stat = talent['stats'];\n    let multiStat = Array.isArray(stat);\n    let newArr = this.state[color];\n    let newStats = { ...this.state.stats };\n\n    if (how === 'increase') {\n      newArr[idx - 1] += 1;\n\n      // increase stat value\n      if (stat) {\n        if (multiStat) {\n          // multi-stat\n          stat.forEach(curStat => {\n            if (valueIdx === 0) {\n              newStats[curStat] += talent['values'][0];\n            } else {\n              newStats[curStat] +=\n                talent['values'][valueIdx] - talent['values'][valueIdx - 1];\n            }\n          });\n        } else {\n          // single stat\n          if (valueIdx === 0) {\n            newStats[stat] += talent['values'][0];\n          } else {\n            newStats[stat] +=\n              talent['values'][valueIdx] - talent['values'][valueIdx - 1];\n          }\n        }\n      }\n    } else if (how === 'decrease') {\n      newArr[idx - 1] -= 1;\n\n      // decrease stat value\n      if (stat) {\n        if (multiStat) {\n          // multi-stat\n          stat.forEach(curStat => {\n            if (valueIdx <= 1) {\n              newStats[curStat] -= talent['values'][0];\n            } else {\n              newStats[curStat] -=\n                talent['values'][valueIdx - 1] - talent['values'][valueIdx - 2];\n            }\n          });\n        } else {\n          // single stat\n          if (valueIdx <= 1) {\n            newStats[stat] -= talent['values'][0];\n          } else {\n            newStats[stat] -=\n              talent['values'][valueIdx - 1] - talent['values'][valueIdx - 2];\n          }\n        }\n      }\n    }\n\n    this.setState({ [color]: newArr, stats: newStats }, () =>\n      this.updateURL('update')\n    );\n  };\n\n  /**\n   * Get the maximum number of available points for each talent\n   *\n   * @param {string} commander Name of the commander\n   * @param {string} color Color of the tree to get max values for\n   * @returns {Number[]} Array of maximum available points for each talent in the tree\n   * @memberof App\n   */\n  createMaxValueArray = (commander, color) => {\n    let maxArray = [];\n\n    Object.keys(treeData[Commanders[commander][color]]).forEach(id => {\n      maxArray.push(\n        getMaxTalentCount(treeData[Commanders[commander][color]][id]['values'])\n      );\n    });\n\n    return maxArray;\n  };\n\n  /**\n   * Calculate the total number of talent points spent. This is just a sum\n   * of all the color/tree array values\n   *\n   * @param {string} color Color of the tree to sum. Omitting this param sums\n   * across all trees\n   * @returns {number} Total number of talent points spent\n   * @memberof App\n   */\n  calcPointsSpent = (color = 'total') => {\n    let points;\n\n    if (color === 'total') {\n      points = [...this.state.red, ...this.state.yellow, ...this.state.blue];\n    } else {\n      points = [...this.state[color]];\n    }\n\n    return sumArray(points);\n  };\n\n  /**\n   * Calculate number of remaining talent points available to be spent\n   *\n   * @returns {number} Number of remaining talent points\n   * @memberof App\n   */\n  calcPointsRemaining = () => {\n    return maxPoints - this.calcPointsSpent();\n  };\n\n  /**\n   * Toggle display of info panel\n   *\n   * @memberof App\n   */\n  toggleInfoPanel = () => {\n    this.setState(\n      prevState => ({\n        isShownInfoPanel: !prevState.isShownInfoPanel\n      }),\n      () => {\n        this.treePanelRef.repaint();\n        localStorage.setItem('isShownInfoPanel', this.state.isShownInfoPanel);\n      }\n    );\n\n    ReactGA.event({\n      category: 'Settings',\n      action: 'Toggle info panel'\n    });\n  };\n\n  /**\n   * Toggle display of total number of points spent in each tree\n   *\n   * @memberof App\n   */\n  toggleTotalDisplay = () => {\n    this.setState(\n      prevState => ({\n        isShownTotals: !prevState.isShownTotals\n      }),\n      () => {\n        localStorage.setItem('isShownTotals', this.state.isShownTotals);\n      }\n    );\n\n    ReactGA.event({\n      category: 'Settings',\n      action: 'Toggle tree totals'\n    });\n  };\n\n  /**\n   * Toggle display of node values\n   *\n   * @memberof App\n   */\n  toggleValueDisplay = () => {\n    this.setState(\n      prevState => ({\n        isShownValues: !prevState.isShownValues\n      }),\n      () => {\n        localStorage.setItem('isShownValues', this.state.isShownValues);\n      }\n    );\n\n    ReactGA.event({\n      category: 'Settings',\n      action: 'Toggle node values'\n    });\n  };\n\n  /**\n   * Toggle node size\n   *\n   * @param {string} size Desired node size\n   * @memberof App\n   */\n  toggleNodeSize = size => {\n    this.setState({ nodeSize: size }, () => {\n      this.treePanelRef.repaint();\n      localStorage.setItem('nodeSize', this.state.nodeSize);\n    });\n\n    ReactGA.event({\n      category: 'Settings',\n      action: 'Toggle node size',\n      label: size\n    });\n  };\n\n  /**\n   * Toggle screenshot stats\n   *\n   * @memberof App\n   */\n  toggleScreenshotStats = () => {\n    this.setState(\n      prevState => ({\n        isScreenshotStats: !prevState.isScreenshotStats\n      }),\n      () => {\n        localStorage.setItem('isScreenshotStats', this.state.isScreenshotStats);\n      }\n    );\n\n    ReactGA.event({\n      category: 'Settings',\n      action: 'Toggle screenshot stats'\n    });\n  };\n\n  /**\n   * Toggle speed mode\n   *\n   * @memberof App\n   */\n  toggleSpeedMode = () => {\n    this.setState(\n      prevState => ({\n        isSpeedMode: !prevState.isSpeedMode\n      }),\n      () => {\n        this.treePanelRef.drawLines();\n        localStorage.setItem('isSpeedMode', this.state.isSpeedMode);\n      }\n    );\n\n    ReactGA.event({\n      category: 'Settings',\n      action: 'Toggle speed mode'\n    });\n  };\n\n  /**\n   * Toggle mouse XY position display\n   *\n   * @memberof App\n   */\n  toggleMouseXY = () => {\n    this.setState(\n      prevState => ({\n        isShownMouseXY: !prevState.isShownMouseXY\n      }),\n      () => {\n        this.treePanelRef.toggleMouseListeners();\n        localStorage.setItem('isShownMouseXY', this.state.isShownMouseXY);\n      }\n    );\n  };\n\n  /**\n   * Toggle tooltip talent ID\n   *\n   * @memberof App\n   */\n  toggleTalentID = () => {\n    this.setState(\n      prevState => ({\n        isShownTalentID: !prevState.isShownTalentID\n      }),\n      () => {\n        localStorage.setItem('isShownTalentID', this.state.isShownTalentID);\n      }\n    );\n  };\n\n  /**\n   * Toggle guided tour\n   *\n   * @memberof App\n   */\n  toggleTour = () => {\n    this.tourRef.restartTour();\n  };\n\n  /**\n   * Toggle announcement\n   *\n   * @memberof App\n   */\n  toggleAnnounce = () => {\n    this.announceRef.show();\n  };\n\n  render() {\n    return (\n      <div id=\"app\">\n        {!this.props.isEmbed && (\n          <GuidedTour ref={component => (this.tourRef = component)} />\n        )}\n\n        {this.invalidModalFlag && (\n          <InvalidBuildModal message={this.invalidBuildMessage} />\n        )}\n\n        <AnnouncementModal\n          ref={component => (this.announceRef = component)}\n          isEmbed={this.props.isEmbed}\n          isUpgrade={\n            localStorage.getItem('version')\n              ? isUpgrade(localStorage.getItem('version'), version)\n              : true\n          }\n          isNewUser={isNewUser()}\n          isInvalidBuild={this.invalidModalFlag}\n        />\n\n        {!this.props.isEmbed && (\n          <ErrorBoundary>\n            <NavBar\n              toggleInfoPanel={this.toggleInfoPanel}\n              toggleTotalDisplay={this.toggleTotalDisplay}\n              toggleValueDisplay={this.toggleValueDisplay}\n              toggleNodeSize={this.toggleNodeSize}\n              toggleScreenshotStats={this.toggleScreenshotStats}\n              toggleSpeedMode={this.toggleSpeedMode}\n              toggleMouseXY={this.toggleMouseXY}\n              toggleTalentID={this.toggleTalentID}\n              toggleAnnounce={this.toggleAnnounce}\n              toggleTour={this.toggleTour}\n              changeCommander={this.changeCommander}\n              calcPointsSpent={this.calcPointsSpent}\n              resetTalents={this.resetTalents}\n              commander={this.state.commander}\n              red={this.state.red}\n              yellow={this.state.yellow}\n              blue={this.state.blue}\n              nodeSize={this.state.nodeSize}\n              isShownInfoPanel={this.state.isShownInfoPanel}\n              isShownValues={this.state.isShownValues}\n              isShownTotals={this.state.isShownTotals}\n              isScreenshotStats={this.state.isScreenshotStats}\n              isSpeedMode={this.state.isSpeedMode}\n              isShownMouseXY={this.state.isShownMouseXY}\n              isShownTalentID={this.state.isShownTalentID}\n            />\n          </ErrorBoundary>\n        )}\n\n        <div id=\"main-container\">\n          <Suspense\n            fallback={\n              <div id=\"spinner\">\n                <Spinner size=\"lg\" animation=\"border\" variant=\"light\" />\n                <br />\n                <span>Loading</span>\n              </div>\n            }\n          >\n            {!this.props.isEmbed && (\n              <ErrorBoundary>\n                <InfoPanel\n                  ref={component => (this.infoPanelRef = component)}\n                  calcPointsSpent={this.calcPointsSpent}\n                  calcPointsRemaining={this.calcPointsRemaining}\n                  treeData={treeData}\n                  commander={this.state.commander}\n                  red={this.state.red}\n                  yellow={this.state.yellow}\n                  blue={this.state.blue}\n                  stats={this.state.stats}\n                  isShownInfoPanel={this.state.isShownInfoPanel}\n                />\n              </ErrorBoundary>\n            )}\n\n            <ErrorBoundary>\n              <TreePanel\n                ref={component => (this.treePanelRef = component)}\n                changeCommander={this.changeCommander}\n                resetTalents={this.resetTalents}\n                changeTalentValue={this.changeTalentValue}\n                calcPointsSpent={this.calcPointsSpent}\n                calcPointsRemaining={this.calcPointsRemaining}\n                treeData={treeData}\n                dataVersion={this.state.dataVersion}\n                commander={this.state.commander}\n                red={this.state.red}\n                yellow={this.state.yellow}\n                blue={this.state.blue}\n                nodeSize={this.state.nodeSize}\n                isShownValues={this.state.isShownValues}\n                isShownTotals={this.state.isShownTotals}\n                isSpeedMode={this.state.isSpeedMode}\n                isShownMouseXY={this.state.isShownMouseXY}\n                isShownTalentID={this.state.isShownTalentID}\n                isEmbed={this.props.isEmbed}\n              />\n            </ErrorBoundary>\n          </Suspense>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport { isEmbed } from './utils';\nimport { homepage } from '../package.json';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nconst embed = isEmbed(window.location.search);\n\nif (window.self === window.top || embed) {\n  ReactGA.initialize('UA-114296077-2');\n  ReactGA.pageview('/');\n\n  const url = window.location.search;\n  ReactDOM.render(\n    <App url={url} isEmbed={embed} />,\n    document.getElementById('root')\n  );\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n} else {\n  ReactDOM.render(\n    <div>\n      Please visit the full website at{' '}\n      <a href={homepage} target=\"_blank\" rel=\"noopener noreferrer\">\n        {homepage.split('//')[1]}\n      </a>\n    </div>,\n    document.getElementById('root')\n  );\n}\n"],"sourceRoot":""}