{"version":3,"sources":["Popovers.js","Node.js","Tree.js","Hexagon.js","Toasts.js","TreePanel.js"],"names":["TalentTooltip","orientation","Popover","placement","this","props","style","outOfBoundaries","arrowProps","className","compressor","Title","talentname","isShownTalentID","talentid","clear","Content","value","max","text","Container","id","Row","Col","icon","faMinusSquare","size","onClick","talentdecrease","xs","calcPointsRemaining","faPlusSquare","talentincrease","minDeviceWidth","mobileBreakpoint","createPopover","maxDeviceWidth","Component","Node","talentIncrease","bind","talentDecrease","setTooltip","getStyle","nextProps","nextState","nodeSize","isShownValues","top","y","left","x","type","backgroundImage","process","image","color","talentValues","treeData","treeName","idx","replaceTalentText","tooltip","prereqs","prereq","prereqsOK","missingPrereqs","forEach","fullTree","getMaxTalentCount","values","push","key","name","changeTalentValue","jsPlumb","select","source","document","getElementById","addClass","showPrereqToast","showPointLimitToast","e","deps","dep","depsOK","removeClass","NodeOverlay","OverlayTrigger","trigger","rootClose","flip","delay","show","hide","overlay","talentName","data-testid","onContextMenu","preventDefault","Tree","nodes","i","data","length","curNode","Error","drawNodes","isShownMouseXY","parseFloat","mouseX","toFixed","mouseY","Hexagon","commander","src","alt","toggleSelect","isShownTotals","calcPointsSpent","getTreeName","ToastMessage","state","open","setState","Toast","autohide","onClose","Header","header","Body","body","PrereqToast","msg","TreePanel","prereqMsg","setMousePosition","window","addEventListener","repaint","this_","ready","setContainer","drawLines","panZoomContainer","querySelector","panZoomInstance","panzoom","minZoom","maxZoom","pinchSpeed","zoomDoubleClickSpeed","bounds","boundsPadding","smoothScroll","onTouch","filterKey","on","click","removeEventListener","moveTo","zoomAbs","repaintEverything","deleteEveryEndpoint","setSuspendDrawing","Object","keys","nodeID","activateState","connect","target","endpoint","cssClass","radius","connector","anchors","shape","redContainer","getBoundingClientRect","yellowContainer","blueContainer","setTimeout","redX","clientX","scrollX","width","redY","clientY","scrollY","height","yellowX","yellowY","blueX","blueY","prereqToastRef","pointLimitToastRef","sharedTreeProps","ref","component","dataVersion","red","yellow","blue"],"mappings":"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","file":"static/js/4.fa698d0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport MediaQuery from 'react-responsive';\nimport FitText from '@kennethormandy/react-fittext';\nimport Popover from 'react-bootstrap/Popover';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { faPlusSquare, faMinusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { mobileBreakpoint } from './values';\n\nimport './styles/Popovers.css';\n\n/**\n * Tooltip containing information about each talent node. Displayed when \n user hovers over a talent\n *\n */\nexport class TalentTooltip extends Component {\n  createPopover(orientation) {\n    return (\n      <Popover\n        placement={this.props.placement}\n        style={this.props.style}\n        outOfBoundaries={this.props.outOfBoundaries}\n        arrowProps={this.props.arrowProps}\n        className={this.props.className}\n      >\n        <FitText compressor={2.1}>\n          <div>\n            <Popover.Title>\n              <div className=\"node-tooltip-title\">{this.props.talentname}</div>\n              {this.props.isShownTalentID && (\n                <div className=\"node-tooltip-id\">{this.props.talentid}</div>\n              )}\n              <div style={{ clear: 'both' }}></div>\n            </Popover.Title>\n\n            <Popover.Content className=\"node-tooltip-body\">\n              <div>\n                <div>\n                  <b>\n                    {this.props.value !== this.props.max ? 'Next:' : 'Maxed:'}\n                  </b>\n                </div>\n\n                {this.props.text}\n\n                <Container id=\"node-tooltip-assign-container\">\n                  <Row>\n                    <Col>\n                      {this.props.value > 0 && (\n                        <FontAwesomeIcon\n                          className=\"node-tooltip-decrease-button\"\n                          icon={faMinusSquare}\n                          size=\"2x\"\n                          onClick={this.props.talentdecrease}\n                        />\n                      )}\n                    </Col>\n                    <Col xs={5}>\n                      <FitText compressor={0.4}>\n                        <span>{this.props.value + '/' + this.props.max}</span>\n                      </FitText>\n                    </Col>\n                    <Col>\n                      {this.props.calcPointsRemaining() > 0 &&\n                        this.props.value !== this.props.max && (\n                          <FontAwesomeIcon\n                            className=\"node-tooltip-increase-button\"\n                            icon={faPlusSquare}\n                            size=\"2x\"\n                            onClick={this.props.talentincrease}\n                          />\n                        )}\n                    </Col>\n                  </Row>\n                </Container>\n              </div>\n            </Popover.Content>\n          </div>\n        </FitText>\n      </Popover>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <MediaQuery minDeviceWidth={mobileBreakpoint}>\n          {this.createPopover('desktop')}\n        </MediaQuery>\n        <MediaQuery maxDeviceWidth={mobileBreakpoint - 1}>\n          {this.createPopover('mobile')}\n        </MediaQuery>\n      </>\n    );\n  }\n}\n\nexport default { TalentTooltip };\n","import React, { Component } from 'react';\nimport FitText from '@kennethormandy/react-fittext';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { jsPlumb } from 'jsplumb';\nimport { TalentTooltip } from './Popovers';\nimport { replaceTalentText, getMaxTalentCount } from './utils';\n\nimport './styles/Node.css';\n\n/**\n * Component for the individual talent nodes\n *\n * @class Node\n * @extends {Component}\n */\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n\n    // Context bindings\n    this.talentIncrease = this.talentIncrease.bind(this);\n    this.talentDecrease = this.talentDecrease.bind(this);\n    this.setTooltip = this.setTooltip.bind(this);\n    this.getStyle = this.getStyle.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.value !== nextProps.value ||\n      this.props.nodeSize !== nextProps.nodeSize ||\n      this.props.isShownValues !== nextProps.isShownValues ||\n      this.props.isShownTalentID !== nextProps.isShownTalentID\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determine styling of the node. Image depends on whether the node is\n   * a large skill node or a small stat node\n   *\n   * @returns {object} Object containing the CSS styles\n   * (e.g. positioning, background image) for the node\n   * @memberof Node\n   */\n  getStyle() {\n    let style = {};\n\n    style.top = this.props.y;\n    style.left = this.props.x;\n\n    if (this.props.type === 'node-large') {\n      style.backgroundImage = `url(${process.env.PUBLIC_URL}/images/talents/${this.props.image}.png)`;\n    } else {\n      style.backgroundImage = `url(${process.env.PUBLIC_URL}/images/talents/${this.props.color}GenericSmall.png)`;\n    }\n\n    return style;\n  }\n\n  /**\n   * Set tooltip for the node. Tooltip text is dynamic as it depends on the\n   * current level of the node\n   *\n   * @returns {string} Updated tooltip text reflecting the level of the node\n   * @memberof Node\n   */\n  setTooltip() {\n    let tooltip;\n    let talentValues = this.props.treeData[this.props.treeName][this.props.idx][\n      'values'\n    ];\n\n    if (this.props.value === this.props.max) {\n      tooltip = replaceTalentText(\n        this.props.tooltip,\n        talentValues,\n        this.props.max - 1\n      );\n    } else {\n      tooltip = replaceTalentText(\n        this.props.tooltip,\n        talentValues,\n        this.props.value\n      );\n    }\n\n    return tooltip;\n  }\n\n  /**\n   * Increase the value of the clicked node. Controls whether the node can\n   * be increased (e.g. max level reached, max talent points spent), as well\n   * as the display of associated toasts and missing prerequisite talents\n   *\n   * Additionally, `this.state` is updated to reflect current node value\n   *\n   * @memberof Node\n   */\n  talentIncrease() {\n    if (this.props.calcPointsRemaining() > 0) {\n      // Check prerequisites\n      const prereqs = this.props.treeData[this.props.treeName][this.props.idx]\n        .prereq;\n\n      let prereqsOK = true;\n      let missingPrereqs = [];\n\n      prereqs.forEach(idx => {\n        const prereqValue = this.props.fullTree[idx - 1];\n        const prereqMax = getMaxTalentCount(\n          this.props.treeData[this.props.treeName][idx].values\n        );\n        if (prereqValue !== prereqMax) {\n          prereqsOK = false;\n          missingPrereqs.push(\n            <li key={idx}>\n              <strong>\n                {this.props.treeData[this.props.treeName][idx].name}\n              </strong>\n            </li>\n          );\n        }\n      });\n\n      if (prereqsOK) {\n        if (this.props.value < this.props.max) {\n          this.props.changeTalentValue(\n            this.props.color,\n            this.props.idx,\n            'increase'\n          );\n          jsPlumb\n            .select({\n              source: document.getElementById(\n                `${this.props.treeName + this.props.idx}`\n              )\n            })\n            .addClass(`line-${this.props.color}`);\n        }\n      } else {\n        this.props.showPrereqToast(missingPrereqs);\n      }\n    } else {\n      this.props.showPointLimitToast();\n    }\n  }\n\n  /**\n   * Decrease value of the clicked node and update `this.state` to reflect\n   * the new value. Checks whether the node can be decreased in the event of\n   * having dependent nodes. Context menu is disabled\n   *\n   * @param {MouseEvent} e Mouse context event\n   * @memberof Node\n   */\n  talentDecrease(e) {\n    // Check dependent nodes\n    const deps = this.props.treeData[this.props.treeName][this.props.idx].dep;\n\n    let depsOK = true;\n\n    for (let idx of deps) {\n      const depValue = this.props.fullTree[idx - 1];\n      if (depValue > 0) {\n        depsOK = false;\n        break;\n      }\n    }\n\n    if (depsOK & (this.props.value > 0)) {\n      this.props.changeTalentValue(\n        this.props.color,\n        this.props.idx,\n        'decrease'\n      );\n\n      if (this.props.value === 1) {\n        jsPlumb\n          .select({\n            source: document.getElementById(\n              `${this.props.treeName + this.props.idx}`\n            )\n          })\n          .removeClass(`line-${this.props.color}`);\n      }\n    }\n  }\n\n  render() {\n    let compressor = this.props.type === 'node-large' ? 0.3 : 0.25;\n\n    return (\n      <NodeOverlay\n        {...this.props}\n        talentIncrease={this.talentIncrease}\n        talentDecrease={this.talentDecrease}\n        setTooltip={this.setTooltip}\n        getStyle={this.getStyle}\n        compressor={compressor}\n        nodeSize={this.props.nodeSize}\n        isShownValues={this.props.isShownValues && this.props.value !== 0}\n      />\n    );\n  }\n}\n\nconst NodeOverlay = props => {\n  return (\n    <OverlayTrigger\n      trigger=\"click\"\n      placement=\"right\"\n      rootClose={true}\n      flip={true}\n      delay={{ show: 0, hide: 0 }}\n      overlay={\n        <TalentTooltip\n          calcPointsRemaining={props.calcPointsRemaining}\n          talentdecrease={props.talentDecrease}\n          talentincrease={props.talentIncrease}\n          isShownTalentID={props.isShownTalentID}\n          idx={props.idx}\n          talentid={props.treeName + props.idx}\n          talentname={props.talentName}\n          value={props.value}\n          max={props.max}\n          text={props.setTooltip()}\n        />\n      }\n    >\n      <div\n        data-testid={props.treeName + props.idx}\n        id={props.treeName + props.idx}\n        className={`node ${props.type}-${props.nodeSize} ${\n          props.value === 0 ? 'node-inactive' : ''\n        }`}\n        style={props.getStyle()}\n        onContextMenu={e => e.preventDefault()}\n      >\n        {props.isShownValues && (\n          <FitText compressor={props.compressor}>\n            <div className=\"node-value\" data-testid=\"node-value\">\n              {props.value + '/' + props.max}\n            </div>\n          </FitText>\n        )}\n      </div>\n    </OverlayTrigger>\n  );\n};\n\nexport default Node;\n","import React, { Component } from 'react';\nimport Node from './Node';\nimport ErrorBoundary from './Error';\nimport { getMaxTalentCount } from './utils';\n\nimport './styles/Tree.css';\n\n/**\n * Component for the individual talent trees\n *\n * @class Tree\n * @extends {Component}\n */\n\nclass Tree extends Component {\n  /**\n   * Create an array of all talent nodes for the current commander\n   *\n   * @param {number[]} values Array containing the node values stored\n   * in `this.state` for a given tree color\n   * @param {string} color Color of the tree to generate nodes for\n   * @returns {Array} Array of `Node`'s for a given tree\n   * @memberof Tree\n   */\n  drawNodes() {\n    let nodes = [];\n    const treeName = this.props.treeName;\n\n    for (let i = 1; i < this.props.data.length + 1; i++) {\n      var curNode = this.props.treeData[treeName][i];\n\n      nodes.push(\n        <Node\n          changeTalentValue={this.props.changeTalentValue}\n          calcPointsRemaining={this.props.calcPointsRemaining}\n          showPrereqToast={this.props.showPrereqToast}\n          showPointLimitToast={this.props.showPointLimitToast}\n          isShownValues={this.props.isShownValues}\n          isShownTalentID={this.props.isShownTalentID}\n          nodeSize={this.props.nodeSize}\n          treeData={this.props.treeData}\n          key={treeName + i}\n          idx={i}\n          treeName={treeName}\n          talentName={curNode['name']}\n          image={curNode['image']}\n          tooltip={curNode['text']}\n          type={curNode['type']}\n          value={this.props.data[i - 1]}\n          max={getMaxTalentCount(curNode['values'])}\n          fullTree={this.props.data}\n          x={curNode['pos'][0] + '%'}\n          y={curNode['pos'][1] + '%'}\n          color={this.props.color}\n        />\n      );\n    }\n\n    return nodes;\n  }\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <div id={`tree-${this.props.color}`} className=\"tree-container\">\n          {this.drawNodes()}\n\n          {this.props.isShownMouseXY && (\n            <div id={`tree-${this.props.color}-mouse`}>\n              X: {parseFloat(this.props.mouseX).toFixed(1)} Y:{' '}\n              {parseFloat(this.props.mouseY).toFixed(1)}\n            </div>\n          )}\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default Tree;\n","import React, { Component } from 'react';\nimport FitText from '@kennethormandy/react-fittext';\nimport { getTreeName } from './utils';\n\nimport './styles/Hexagon.css';\n\n/**\n * Component containing the central commander image and skill label hexagon\n *\n * @class Hexagon\n * @extends {Component}\n */\nclass Hexagon extends Component {\n  render() {\n    if (this.props.commander) {\n      return (\n        <div id=\"tree-center\">\n          <div id=\"hexagon-bg\">\n            <img\n              src={`${process.env.PUBLIC_URL}/images/ui/hexagon.png`}\n              alt={'Commander Hexagon'}\n            ></img>\n          </div>\n\n          <img\n            data-testid=\"hexagon-commander\"\n            id=\"hexagon-commander\"\n            src={`${process.env.PUBLIC_URL}/images/commanders/${this.props.commander}.png`}\n            alt={this.props.commander}\n            onClick={() => {\n              this.props.toggleSelect();\n            }}\n          ></img>\n\n          <div id=\"hexagon-label-container\">\n            <div className=\"hexagon-label hexagon-label-red\">\n              <FitText compressor={0.7}>\n                <div>\n                  {this.props.isShownTotals && (\n                    <div\n                      className=\"tree-total\"\n                      data-testid=\"tree-total\"\n                    >{`(${this.props.calcPointsSpent('red')})`}</div>\n                  )}\n                  {getTreeName('red', this.props.commander)}\n                </div>\n              </FitText>\n            </div>\n\n            <div className=\"hexagon-label hexagon-label-yellow\">\n              <FitText compressor={0.7}>\n                <div>\n                  {this.props.isShownTotals && (\n                    <div\n                      className=\"tree-total\"\n                      data-testid=\"tree-total\"\n                    >{`(${this.props.calcPointsSpent('yellow')})`}</div>\n                  )}\n                  {getTreeName('yellow', this.props.commander)}\n                </div>\n              </FitText>\n            </div>\n\n            <div className=\"hexagon-label hexagon-label-blue\">\n              <FitText compressor={0.7}>\n                <div>\n                  {this.props.isShownTotals && (\n                    <div\n                      className=\"tree-total\"\n                      data-testid=\"tree-total\"\n                    >{`(${this.props.calcPointsSpent('blue')})`}</div>\n                  )}\n                  {getTreeName('blue', this.props.commander)}\n                </div>\n              </FitText>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default Hexagon;\n","import React, { Component } from 'react';\nimport Toast from 'react-bootstrap/Toast';\n\nimport './styles/Toasts.css';\n\n/**\n * Generic toast component\n *\n * @class ToastMessage\n * @extends {Component}\n */\nexport class ToastMessage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n\n    // Context bindings\n    this.hide = this.hide.bind(this);\n  }\n\n  show() {\n    this.setState({ open: true });\n  }\n\n  hide() {\n    this.setState({ open: false });\n  }\n\n  render() {\n    return (\n      <Toast autohide delay={2000} show={this.state.open} onClose={this.hide}>\n        <Toast.Header>\n          <span className={`bullet bg-red`}></span>\n          <strong className=\"mr-auto\">{this.props.header}</strong>\n        </Toast.Header>\n        <Toast.Body>{this.props.body}</Toast.Body>\n      </Toast>\n    );\n  }\n}\n\n/**\n * Toast showing warning message about missing talents that need to be\n * completed prior to the select talent.\n *\n * @class PrereqToast\n * @extends {Component}\n */\nexport class PrereqToast extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n\n    // Context bindings\n    this.hide = this.hide.bind(this);\n  }\n\n  show() {\n    this.setState({ open: true });\n  }\n\n  hide() {\n    this.setState({ open: false });\n  }\n\n  render() {\n    return (\n      <Toast autohide delay={2000} show={this.state.open} onClose={this.hide}>\n        <Toast.Header>\n          <span className={`bullet bg-red`}></span>\n          <strong className=\"mr-auto\">Incomplete Talents</strong>\n        </Toast.Header>\n        <Toast.Body>\n          Upgrade talents to the maximum level first:\n          {this.props.msg}\n        </Toast.Body>\n      </Toast>\n    );\n  }\n}\n\nexport default { ToastMessage, PrereqToast };\n","import React, { Component } from 'react';\nimport { jsPlumb } from 'jsplumb';\nimport panzoom from 'panzoom';\nimport Tree from './Tree';\nimport Hexagon from './Hexagon';\nimport { PrereqToast, ToastMessage } from './Toasts';\nimport { getTreeName } from './utils';\n\nimport { dataVersion } from '../package.json';\nimport './styles/TreePanel.css';\n\n/**\n * Component for the main tree panel. Controls the display of all nodes and\n * node selections\n *\n * @class TreePanel\n * @extends {Component}\n */\nclass TreePanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prereqMsg: ''\n    };\n\n    // Context bindings\n    this.showPrereqToast = this.showPrereqToast.bind(this);\n    this.showPointLimitToast = this.showPointLimitToast.bind(this);\n    this.setMousePosition = this.setMousePosition.bind(this);\n  }\n\n  /**\n   * Add event listeners and setup jsplumb container with initial lines\n   *\n   * @memberof TreePanel\n   */\n  componentDidMount() {\n    window.addEventListener('resize', this.repaint);\n\n    const this_ = this;\n\n    jsPlumb.ready(function() {\n      jsPlumb.setContainer(document.getElementById('tree-square-content'));\n      this_.drawLines();\n    });\n\n    let panZoomContainer = document.querySelector('#tree-square-content');\n    this.panZoomInstance = panzoom(panZoomContainer, {\n      minZoom: 1,\n      maxZoom: 3,\n      pinchSpeed: 0.5,\n      zoomDoubleClickSpeed: 1,\n      bounds: true,\n      boundsPadding: 0.5,\n      smoothScroll: false,\n      onTouch: function(e) {\n        return false;\n      },\n      filterKey: function(e) {\n        return true;\n      }\n    });\n\n    // This has the effect of closing any open popovers\n    this.panZoomInstance.on('transform', function(e) {\n      document.body.click();\n    });\n  }\n\n  /**\n   * Remove event listeners on unmount\n   *\n   * @memberof TreePanel\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.repaint);\n  }\n\n  /**\n   * Reset the pan/zoom state of the entire tree panel. Called on commander changes\n   * and talent resets\n   *\n   * @memberof TreePanel\n   */\n  resetPanZoom() {\n    this.panZoomInstance.moveTo(0, 0);\n    this.panZoomInstance.zoomAbs(0, 0, 1);\n  }\n\n  /**\n   * Call for repainting jsplumb lines on window resize\n   *\n   * @memberof TreePanel\n   */\n  repaint() {\n    jsPlumb.repaintEverything();\n  }\n\n  /**\n   * Draw lines between nodes\n   *\n   * @memberof TreePanel\n   */\n  drawLines() {\n    if (this.props.commander) {\n      jsPlumb.deleteEveryEndpoint();\n      jsPlumb.setSuspendDrawing(true);\n\n      ['red', 'yellow', 'blue'].forEach(color => {\n        const treeName = getTreeName(color, this.props.commander);\n\n        Object.keys(this.props.treeData[treeName]).forEach(nodeID => {\n          var activateState =\n            this.props[color][nodeID - 1] === 0 ? '' : `line-${color}`;\n\n          this.props.treeData[treeName][nodeID].prereq.forEach(prereq => {\n            jsPlumb.connect({\n              source: document.getElementById(`${treeName}${nodeID}`),\n              target: document.getElementById(`${treeName}${prereq}`),\n              endpoint: ['Dot', { cssClass: 'line-endpoint', radius: 1 }],\n              connector: ['Straight', { cssClass: `line ${activateState}` }],\n              anchors: [\n                ['Perimeter', { shape: 'Circle' }],\n                ['Perimeter', { shape: 'Circle' }]\n              ]\n            });\n          });\n        });\n      });\n\n      jsPlumb.setSuspendDrawing(false, true);\n    }\n  }\n\n  /**\n   * Toggle event listeners for setting mouse position\n   *\n   * @memberof TreePanel\n   */\n  toggleMouseListeners() {\n    if (this.props.isShownMouseXY) {\n      window.addEventListener('mousemove', this.setMousePosition);\n    } else {\n      window.removeEventListener('mousemove', this.setMousePosition);\n    }\n  }\n\n  /**\n   * Store mouse position relative to each tree container\n   *\n   * @param {MouseEvent} e Mouse move event\n   * @memberof TreePanel\n   */\n  setMousePosition(e) {\n    const redContainer = document\n      .getElementById('tree-red')\n      .getBoundingClientRect();\n\n    const yellowContainer = document\n      .getElementById('tree-yellow')\n      .getBoundingClientRect();\n\n    const blueContainer = document\n      .getElementById('tree-blue')\n      .getBoundingClientRect();\n\n    setTimeout(\n      this.setState({\n        redX:\n          ((e.clientX - redContainer.left + window.scrollX) /\n            redContainer.width) *\n          100,\n        redY:\n          ((e.clientY - redContainer.top + window.scrollY) /\n            redContainer.height) *\n          100,\n        yellowX:\n          ((e.clientX - yellowContainer.left + window.scrollX) /\n            yellowContainer.width) *\n          100,\n        yellowY:\n          ((e.clientY - yellowContainer.top + window.scrollY) /\n            yellowContainer.height) *\n          100,\n        blueX:\n          ((e.clientX - blueContainer.left + window.scrollX) /\n            blueContainer.width) *\n          100,\n        blueY:\n          ((e.clientY - blueContainer.top + window.scrollY) /\n            blueContainer.height) *\n          100\n      }),\n      2000\n    );\n  }\n\n  /**\n   * Show a toast containing a list of missing prerequisite talents. Toast is\n   * hidden automatically after a delay.\n   *\n   * @memberof TreePanel\n   */\n  showPrereqToast(msg) {\n    this.setState({ prereqMsg: msg }, () => {\n      this.prereqToastRef.show();\n    });\n  }\n\n  /**\n   * Show toast warning about reaching the maximum talent point limit. Toast\n   * is hidden automatically after a delay.\n   *\n   * @memberof TreePanel\n   */\n  showPointLimitToast() {\n    this.pointLimitToastRef.show();\n  }\n\n  render() {\n    const sharedTreeProps = {\n      changeTalentValue: this.props.changeTalentValue,\n      calcPointsRemaining: this.props.calcPointsRemaining,\n      showPrereqToast: this.showPrereqToast,\n      showPointLimitToast: this.showPointLimitToast,\n      isShownValues: this.props.isShownValues,\n      isShownMouseXY: this.props.isShownMouseXY,\n      isShownTalentID: this.props.isShownTalentID,\n      nodeSize: this.props.nodeSize,\n      treeData: this.props.treeData,\n      commander: this.props.commander\n    };\n\n    return (\n      <div id=\"tree-panel\" data-testid=\"tree-panel\">\n        <PrereqToast\n          ref={component => (this.prereqToastRef = component)}\n          msg={this.state.prereqMsg}\n        />\n        <ToastMessage\n          ref={component => (this.pointLimitToastRef = component)}\n          header=\"Talent Limit\"\n          body=\"You have spent the maximum number of talent points\"\n        />\n\n        {this.props.dataVersion < dataVersion && (\n          <div data-testid=\"version-warning\" id=\"version-warning\">\n            (warning: this build uses an old <br /> version of the game data)\n          </div>\n        )}\n\n        <div id=\"tree-square-container\">\n          <div id=\"tree-square-section\">\n            <div id=\"tree-square-content\">\n              <Tree\n                {...sharedTreeProps}\n                color={'red'}\n                treeName={getTreeName('red', this.props.commander)}\n                data={this.props.red}\n                mouseX={this.state.redX}\n                mouseY={this.state.redY}\n              />\n              <Tree\n                {...sharedTreeProps}\n                color={'yellow'}\n                treeName={getTreeName('yellow', this.props.commander)}\n                data={this.props.yellow}\n                mouseX={this.state.yellowX}\n                mouseY={this.state.yellowY}\n              />\n              <Tree\n                {...sharedTreeProps}\n                color={'blue'}\n                treeName={getTreeName('blue', this.props.commander)}\n                data={this.props.blue}\n                mouseX={this.state.blueX}\n                mouseY={this.state.blueY}\n              />\n              <Hexagon\n                toggleSelect={this.props.toggleSelect}\n                calcPointsSpent={this.props.calcPointsSpent}\n                isShownTotals={this.props.isShownTotals && this.props.commander}\n                commander={this.props.commander || 'unknown'}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TreePanel;\n"],"sourceRoot":""}