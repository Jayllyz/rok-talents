{"version":3,"sources":["Popovers.js","Node.js","Tree.js","Hexagon.js","Banner.js","Toasts.js","TreePanel.js"],"names":["TalentTooltip","Popover","placement","this","props","style","outOfBoundaries","arrowProps","className","Title","talentName","isShownTalentID","talentID","clear","Content","value","max","text","isEmbed","id","icon","faMinusSquare","size","onClick","talentDecrease","faPlusSquare","talentIncrease","Component","Node","getStyle","top","y","left","x","type","backgroundImage","process","image","color","setTooltip","talentValues","treeData","treeName","idx","replaceTalentText","tooltip","calcPointsRemaining","prereqs","prereq","prereqsOK","missingPrereqs","forEach","fullTree","getMaxTalentCount","values","push","key","name","changeTalentValue","jsPlumb","select","source","document","getElementById","addClass","showPrereqToast","showPointLimitToast","e","deps","dep","depsOK","removeClass","nextProps","nextState","nodeSize","isShownValues","isSpeedMode","compressor","onContextMenu","preventDefault","NodeOverlay","OverlayTrigger","trigger","rootClose","flip","delay","show","hide","overlay","NodeContent","data-testid","Tree","drawNodes","nodes","i","data","length","curNode","Error","isShownMouseXY","parseFloat","mouseX","toFixed","mouseY","Hexagon","commander","src","alt","isShownTotals","calcPointsSpent","getTreeName","Banner","visibility","fontSize","embed","href","homepage","target","rel","split","ToastMessage","setState","open","state","header","body","Toast","autohide","onClose","Header","Body","PrereqToast","msg","TreePanel","resetPanZoom","panZoomInstance","moveTo","zoomAbs","repaint","repaintEverything","drawLines","deleteEveryEndpoint","setSuspendDrawing","Object","keys","nodeID","activateState","connect","endpoint","cssClass","radius","connector","anchors","shape","toggleMouseListeners","window","addEventListener","setMousePosition","removeEventListener","redContainer","getBoundingClientRect","yellowContainer","blueContainer","setTimeout","redX","clientX","scrollX","width","redY","clientY","scrollY","height","yellowX","yellowY","blueX","blueY","prereqMsg","prereqToastRef","pointLimitToastRef","this_","ready","setContainer","isTouchDevice","panZoomContainer","querySelector","panzoom","minZoom","maxZoom","pinchSpeed","zoomDoubleClickSpeed","bounds","boundsPadding","smoothScroll","onTouch","filterKey","on","click","sharedTreeProps","ref","component","dataVersion","getURL","createSummaryString","red","yellow","blue","faExternalLinkAlt"],"mappings":"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","file":"static/js/3.2c0a6a72.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Popover from 'react-bootstrap/Popover';\nimport { faPlusSquare, faMinusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './styles/Popovers.css';\n\n/**\n * Tooltip containing information about each talent node. Displayed when \n user hovers over a talent\n *\n */\nexport class TalentTooltip extends Component {\n  render() {\n    return (\n      <Popover\n        placement={this.props.placement}\n        style={this.props.style}\n        outOfBoundaries={this.props.outOfBoundaries}\n        arrowProps={this.props.arrowProps}\n        className={this.props.className}\n      >\n        <Popover.Title>\n          <div className=\"node-tooltip-title\">{this.props.talentName}</div>\n          {this.props.isShownTalentID && (\n            <div className=\"node-tooltip-id\">{this.props.talentID}</div>\n          )}\n          <div style={{ clear: 'both' }}></div>\n        </Popover.Title>\n\n        <Popover.Content className=\"node-tooltip-body\">\n          <div\n            className={`node-tooltip-bg node-tooltip-bg${\n              this.props.value === this.props.max ? '-max' : '-next'\n            }`}\n          >\n            <div>\n              <b>\n                {this.props.value !== this.props.max ? 'Next level:' : 'Maxed:'}\n              </b>\n            </div>\n\n            {this.props.text}\n          </div>\n          {!this.props.isEmbed && (\n            <div id=\"node-tooltip-assign-container\">\n              <FontAwesomeIcon\n                className=\"node-tooltip-decrease\"\n                icon={faMinusSquare}\n                size=\"2x\"\n                onClick={this.props.talentDecrease}\n              />\n\n              <span className=\"node-tooltip-value\">\n                {this.props.value + '/' + this.props.max}\n              </span>\n\n              <FontAwesomeIcon\n                className=\"node-tooltip-increase\"\n                icon={faPlusSquare}\n                size=\"2x\"\n                onClick={this.props.talentIncrease}\n              />\n            </div>\n          )}\n        </Popover.Content>\n      </Popover>\n    );\n  }\n}\n\nexport default { TalentTooltip };\n","import React, { Component } from 'react';\nimport FitText from '@kennethormandy/react-fittext';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport { jsPlumb } from 'jsplumb';\nimport { TalentTooltip } from './Popovers';\nimport { replaceTalentText, getMaxTalentCount } from './utils';\n\nimport './styles/Node.css';\n\n/**\n * Component for the individual talent nodes\n *\n * @class Node\n * @extends {Component}\n */\nclass Node extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.value !== nextProps.value ||\n      this.props.nodeSize !== nextProps.nodeSize ||\n      this.props.isShownValues !== nextProps.isShownValues ||\n      this.props.isShownTalentID !== nextProps.isShownTalentID ||\n      this.props.isSpeedMode !== nextProps.isSpeedMode\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determine styling of the node. Image depends on whether the node is\n   * a large skill node or a small stat node\n   *\n   * @returns {object} Object containing the CSS styles\n   * (e.g. positioning, background image) for the node\n   * @memberof Node\n   */\n  getStyle = () => {\n    let style = {};\n\n    style.top = this.props.y;\n    style.left = this.props.x;\n\n    if (this.props.type === 'node-large') {\n      style.backgroundImage = `url(${process.env.PUBLIC_URL}/images/talents/${this.props.image}.png)`;\n    } else {\n      style.backgroundImage = `url(${process.env.PUBLIC_URL}/images/talents/${this.props.color}GenericSmall.png)`;\n    }\n\n    return style;\n  };\n\n  /**\n   * Set tooltip for the node. Tooltip text is dynamic as it depends on the\n   * current level of the node\n   *\n   * @returns {string} Updated tooltip text reflecting the level of the node\n   * @memberof Node\n   */\n  setTooltip = () => {\n    let tooltip;\n    let talentValues = this.props.treeData[this.props.treeName][this.props.idx][\n      'values'\n    ];\n\n    if (this.props.value === this.props.max) {\n      tooltip = replaceTalentText(\n        this.props.tooltip,\n        talentValues,\n        this.props.max - 1\n      );\n    } else {\n      tooltip = replaceTalentText(\n        this.props.tooltip,\n        talentValues,\n        this.props.value\n      );\n    }\n\n    return tooltip;\n  };\n\n  /**\n   * Increase the value of the clicked node. Controls whether the node can\n   * be increased (e.g. max level reached, max talent points spent), as well\n   * as the display of associated toasts and missing prerequisite talents\n   *\n   * Additionally, `this.state` is updated to reflect current node value\n   *\n   * @memberof Node\n   */\n  talentIncrease = () => {\n    if (this.props.calcPointsRemaining() > 0) {\n      // Check prerequisites\n      const prereqs = this.props.treeData[this.props.treeName][this.props.idx]\n        .prereq;\n\n      let prereqsOK = true;\n      let missingPrereqs = [];\n\n      prereqs.forEach(idx => {\n        const prereqValue = this.props.fullTree[idx - 1];\n        const prereqMax = getMaxTalentCount(\n          this.props.treeData[this.props.treeName][idx].values\n        );\n        if (prereqValue !== prereqMax) {\n          prereqsOK = false;\n          missingPrereqs.push(\n            <li key={idx}>\n              <strong>\n                {this.props.treeData[this.props.treeName][idx].name}\n              </strong>\n            </li>\n          );\n        }\n      });\n\n      if (prereqsOK) {\n        if (this.props.value < this.props.max) {\n          this.props.changeTalentValue(\n            this.props.color,\n            this.props.idx,\n            this.props.value,\n            'increase'\n          );\n          jsPlumb\n            .select({\n              source: document.getElementById(\n                `${this.props.treeName + this.props.idx}`\n              )\n            })\n            .addClass(`line-${this.props.color}`);\n        }\n      } else {\n        this.props.showPrereqToast(missingPrereqs);\n      }\n    } else {\n      this.props.showPointLimitToast();\n    }\n  };\n\n  /**\n   * Decrease value of the clicked node and update `this.state` to reflect\n   * the new value. Checks whether the node can be decreased in the event of\n   * having dependent nodes. Context menu is disabled\n   *\n   * @param {MouseEvent} e Mouse context event\n   * @memberof Node\n   */\n  talentDecrease = e => {\n    // Check dependent nodes\n    const deps = this.props.treeData[this.props.treeName][this.props.idx].dep;\n\n    let depsOK = true;\n\n    for (let idx of deps) {\n      const depValue = this.props.fullTree[idx - 1];\n      if (depValue > 0) {\n        depsOK = false;\n        break;\n      }\n    }\n\n    if (depsOK & (this.props.value > 0)) {\n      this.props.changeTalentValue(\n        this.props.color,\n        this.props.idx,\n        this.props.value,\n        'decrease'\n      );\n\n      if (this.props.value === 1) {\n        jsPlumb\n          .select({\n            source: document.getElementById(\n              `${this.props.treeName + this.props.idx}`\n            )\n          })\n          .removeClass(`line-${this.props.color}`);\n      }\n    }\n  };\n\n  render() {\n    let compressor = this.props.type === 'node-large' ? 0.31 : 0.21;\n    let isShownValues = this.props.isShownValues && this.props.value !== 0;\n\n    if (this.props.isSpeedMode) {\n      return (\n        <NodeContent\n          talentID={this.props.treeName + this.props.idx}\n          getStyle={this.getStyle}\n          isShownValues={isShownValues}\n          nodeSize={this.props.nodeSize}\n          type={this.props.type}\n          compressor={compressor}\n          value={this.props.value}\n          max={this.props.max}\n          onClick={this.talentIncrease}\n          onContextMenu={e => {\n            e.preventDefault();\n            this.talentDecrease();\n          }}\n        />\n      );\n    } else {\n      return (\n        <NodeOverlay\n          {...this.props}\n          talentIncrease={this.talentIncrease}\n          talentDecrease={this.talentDecrease}\n          setTooltip={this.setTooltip}\n          getStyle={this.getStyle}\n          compressor={compressor}\n          nodeSize={this.props.nodeSize}\n          isShownValues={isShownValues}\n          isEmbed={this.props.isEmbed}\n        />\n      );\n    }\n  }\n}\n\nconst NodeOverlay = props => {\n  return (\n    <OverlayTrigger\n      trigger=\"click\"\n      placement=\"right\"\n      rootClose={true}\n      flip={true}\n      delay={{ show: 0, hide: 0 }}\n      overlay={\n        <TalentTooltip\n          calcPointsRemaining={props.calcPointsRemaining}\n          talentDecrease={props.talentDecrease}\n          talentIncrease={props.talentIncrease}\n          isShownTalentID={props.isShownTalentID}\n          isEmbed={props.isEmbed}\n          idx={props.idx}\n          talentID={props.treeName + props.idx}\n          talentName={props.talentName}\n          value={props.value}\n          max={props.max}\n          text={props.setTooltip()}\n        />\n      }\n    >\n      <NodeContent\n        talentID={props.treeName + props.idx}\n        getStyle={props.getStyle}\n        isShownValues={props.isShownValues}\n        nodeSize={props.nodeSize}\n        type={props.type}\n        compressor={props.compressor}\n        value={props.value}\n        max={props.max}\n        onContextMenu={e => e.preventDefault()}\n      />\n    </OverlayTrigger>\n  );\n};\n\nconst NodeContent = props => {\n  return (\n    <div\n      data-testid={props.talentID}\n      id={props.talentID}\n      className={`node ${props.type}-${props.nodeSize} ${\n        props.value === 0 ? 'node-inactive' : ''\n      }`}\n      style={props.getStyle()}\n      onClick={props.onClick}\n      onContextMenu={props.onContextMenu}\n    >\n      {props.isShownValues && (\n        <FitText compressor={props.compressor}>\n          <div className=\"node-value\" data-testid=\"node-value\">\n            {props.value + '/' + props.max}\n          </div>\n        </FitText>\n      )}\n    </div>\n  );\n};\n\nexport default Node;\n","import React, { Component } from 'react';\nimport Node from './Node';\nimport ErrorBoundary from './Error';\nimport { getMaxTalentCount } from './utils';\nimport './styles/Tree.css';\n\n/**\n * Component for the individual talent trees\n *\n * @class Tree\n * @extends {Component}\n */\n\nclass Tree extends Component {\n  /**\n   * Create an array of all talent nodes for the current commander\n   *\n   * @returns {Array} Array of `Node`'s for a given tree\n   * @memberof Tree\n   */\n  drawNodes = () => {\n    let nodes = [];\n    const treeName = this.props.treeName;\n\n    for (let i = 1; i < this.props.data.length + 1; i++) {\n      var curNode = this.props.treeData[treeName][i];\n\n      nodes.push(\n        <Node\n          changeTalentValue={this.props.changeTalentValue}\n          calcPointsRemaining={this.props.calcPointsRemaining}\n          showPrereqToast={this.props.showPrereqToast}\n          showPointLimitToast={this.props.showPointLimitToast}\n          isShownValues={this.props.isShownValues}\n          isShownTalentID={this.props.isShownTalentID}\n          isSpeedMode={this.props.isSpeedMode}\n          isEmbed={this.props.isEmbed}\n          nodeSize={this.props.nodeSize}\n          treeData={this.props.treeData}\n          key={treeName + i}\n          idx={i}\n          treeName={treeName}\n          talentName={curNode['name']}\n          image={curNode['image']}\n          tooltip={curNode['text']}\n          type={curNode['type']}\n          value={this.props.data[i - 1]}\n          max={getMaxTalentCount(curNode['values'])}\n          fullTree={this.props.data}\n          x={curNode['pos'][0] + '%'}\n          y={curNode['pos'][1] + '%'}\n          color={this.props.color}\n        />\n      );\n    }\n\n    return nodes;\n  };\n\n  render() {\n    return (\n      <ErrorBoundary>\n        <div id={`tree-${this.props.color}`} className=\"tree-container\">\n          {this.drawNodes()}\n\n          {this.props.isShownMouseXY && (\n            <div id={`tree-${this.props.color}-mouse`}>\n              X: {parseFloat(this.props.mouseX).toFixed(1)} Y:{' '}\n              {parseFloat(this.props.mouseY).toFixed(1)}\n            </div>\n          )}\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default Tree;\n","import React from 'react';\nimport FitText from '@kennethormandy/react-fittext';\nimport { getTreeName } from './utils';\nimport './styles/Hexagon.css';\n\nfunction Hexagon(props) {\n  if (props.commander) {\n    return (\n      <div id=\"tree-center\">\n        <div id=\"hexagon-bg\">\n          <img\n            src={`${process.env.PUBLIC_URL}/images/ui/hexagon.png`}\n            alt={'Commander Hexagon'}\n          ></img>\n        </div>\n\n        <img\n          data-testid=\"hexagon-commander\"\n          id=\"hexagon-commander\"\n          src={`${process.env.PUBLIC_URL}/images/commanders/${props.commander}.png`}\n          alt={props.commander}\n        ></img>\n\n        <div id=\"hexagon-label-container\">\n          <div className=\"hexagon-label hexagon-label-red\">\n            <FitText compressor={0.7}>\n              <div>\n                {props.isShownTotals && (\n                  <div\n                    className=\"tree-total\"\n                    data-testid=\"tree-total\"\n                  >{`(${props.calcPointsSpent('red')})`}</div>\n                )}\n                {getTreeName('red', props.commander)}\n              </div>\n            </FitText>\n          </div>\n\n          <div className=\"hexagon-label hexagon-label-yellow\">\n            <FitText compressor={0.7}>\n              <div>\n                {props.isShownTotals && (\n                  <div\n                    className=\"tree-total\"\n                    data-testid=\"tree-total\"\n                  >{`(${props.calcPointsSpent('yellow')})`}</div>\n                )}\n                {getTreeName('yellow', props.commander)}\n              </div>\n            </FitText>\n          </div>\n\n          <div className=\"hexagon-label hexagon-label-blue\">\n            <FitText compressor={0.7}>\n              <div>\n                {props.isShownTotals && (\n                  <div\n                    className=\"tree-total\"\n                    data-testid=\"tree-total\"\n                  >{`(${props.calcPointsSpent('blue')})`}</div>\n                )}\n                {getTreeName('blue', props.commander)}\n              </div>\n            </FitText>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return false;\n  }\n}\n\nexport default Hexagon;\n","import React from 'react';\nimport { homepage } from '../package.json';\nimport './styles/Banner.css';\n\nfunction Banner(props) {\n  const style = {\n    visibility: props.show ? 'visible' : 'hidden',\n    fontSize: props.embed ? '0.9em' : ''\n  };\n\n  return (\n    <div id=\"banner\" data-testid=\"banner\" style={style}>\n      <div>\n        Created at{' '}\n        <a href={homepage} target=\"_blank\" rel=\"noopener noreferrer\">\n          {homepage.split('//')[1]}\n        </a>\n      </div>\n      <img\n        src={`${process.env.PUBLIC_URL}/icon.svg`}\n        alt=\"roktalents banner\"\n      ></img>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React, { Component } from 'react';\nimport Toast from 'react-bootstrap/Toast';\nimport './styles/Toasts.css';\n\n/**\n * Generic toast component\n *\n * @class ToastMessage\n * @extends {Component}\n */\nexport class ToastMessage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.header !== nextProps.header ||\n      this.props.body !== nextProps.body ||\n      this.state.open !== nextState.open\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  show = () => {\n    this.setState({ open: true });\n  };\n\n  hide = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    return (\n      <Toast autohide delay={3000} show={this.state.open} onClose={this.hide}>\n        <Toast.Header>\n          <strong className=\"mr-auto\">{this.props.header}</strong>\n        </Toast.Header>\n        <Toast.Body>{this.props.body}</Toast.Body>\n      </Toast>\n    );\n  }\n}\n\n/**\n * Toast showing warning message about missing talents that need to be\n * completed prior to the select talent.\n *\n * @class PrereqToast\n * @extends {Component}\n */\nexport class PrereqToast extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.msg !== nextProps.msg ||\n      this.state.open !== nextState.open\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  show = () => {\n    this.setState({ open: true });\n  };\n\n  hide = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    return (\n      <Toast autohide delay={4000} show={this.state.open} onClose={this.hide}>\n        <Toast.Header>\n          <strong className=\"mr-auto\">Incomplete Talents</strong>\n        </Toast.Header>\n        <Toast.Body>\n          Upgrade talents to the maximum level first:\n          {this.props.msg}\n        </Toast.Body>\n      </Toast>\n    );\n  }\n}\n\nexport default { ToastMessage, PrereqToast };\n","import React, { Component } from 'react';\nimport { jsPlumb } from 'jsplumb';\nimport panzoom from 'panzoom';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Tree from './Tree';\nimport Hexagon from './Hexagon';\nimport Banner from './Banner';\nimport { PrereqToast, ToastMessage } from './Toasts';\nimport {\n  createSummaryString,\n  getTreeName,\n  getURL,\n  isTouchDevice\n} from './utils';\n\nimport { dataVersion } from '../package.json';\nimport './styles/TreePanel.css';\n\n/**\n * Component for the main tree panel. Controls the display of all nodes and\n * node selections\n *\n * @class TreePanel\n * @extends {Component}\n */\nclass TreePanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prereqMsg: ''\n    };\n  }\n\n  /**\n   * Add event listeners and setup jsplumb container with initial lines\n   *\n   * @memberof TreePanel\n   */\n  componentDidMount() {\n    window.addEventListener('resize', this.repaint);\n\n    const this_ = this;\n\n    jsPlumb.ready(function() {\n      jsPlumb.setContainer(document.getElementById('tree-square-content'));\n      this_.drawLines();\n    });\n\n    if (!isTouchDevice()) {\n      let panZoomContainer = document.querySelector('#tree-square-content');\n      this.panZoomInstance = panzoom(panZoomContainer, {\n        minZoom: 1,\n        maxZoom: 3,\n        pinchSpeed: 0.5,\n        zoomDoubleClickSpeed: 1,\n        bounds: true,\n        boundsPadding: 0.5,\n        smoothScroll: false,\n        onTouch: function(e) {\n          return false;\n        },\n        filterKey: function(e) {\n          return true;\n        }\n      });\n\n      // This has the effect of closing any open popovers\n      this.panZoomInstance.on('transform', function(e) {\n        document.body.click();\n      });\n    }\n  }\n\n  /**\n   * Remove event listeners on unmount\n   *\n   * @memberof TreePanel\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.repaint);\n  }\n\n  /**\n   * Reset the pan/zoom state of the entire tree panel. Called on commander changes\n   * and talent resets\n   *\n   * @memberof TreePanel\n   */\n  resetPanZoom = () => {\n    this.panZoomInstance.moveTo(0, 0);\n    this.panZoomInstance.zoomAbs(0, 0, 1);\n  };\n\n  /**\n   * Call for repainting jsplumb lines on window resize\n   *\n   * @memberof TreePanel\n   */\n  repaint = () => {\n    jsPlumb.repaintEverything();\n  };\n\n  /**\n   * Draw lines between nodes\n   *\n   * @memberof TreePanel\n   */\n  drawLines = () => {\n    if (this.props.commander) {\n      jsPlumb.deleteEveryEndpoint();\n      jsPlumb.setSuspendDrawing(true);\n\n      ['red', 'yellow', 'blue'].forEach(color => {\n        const treeName = getTreeName(color, this.props.commander);\n\n        Object.keys(this.props.treeData[treeName]).forEach(nodeID => {\n          var activateState =\n            this.props[color][nodeID - 1] === 0 ? '' : `line-${color}`;\n\n          this.props.treeData[treeName][nodeID].prereq.forEach(prereq => {\n            jsPlumb.connect({\n              source: document.getElementById(`${treeName}${nodeID}`),\n              target: document.getElementById(`${treeName}${prereq}`),\n              endpoint: ['Dot', { cssClass: 'line-endpoint', radius: 1 }],\n              connector: ['Straight', { cssClass: `line ${activateState}` }],\n              anchors: [\n                ['Perimeter', { shape: 'Circle' }],\n                ['Perimeter', { shape: 'Circle' }]\n              ]\n            });\n          });\n        });\n      });\n\n      jsPlumb.setSuspendDrawing(false, true);\n    }\n  };\n\n  /**\n   * Toggle event listeners for setting mouse position\n   *\n   * @memberof TreePanel\n   */\n  toggleMouseListeners = () => {\n    if (this.props.isShownMouseXY) {\n      window.addEventListener('mousemove', this.setMousePosition);\n    } else {\n      window.removeEventListener('mousemove', this.setMousePosition);\n    }\n  };\n\n  /**\n   * Store mouse position relative to each tree container\n   *\n   * @param {MouseEvent} e Mouse move event\n   * @memberof TreePanel\n   */\n  setMousePosition = e => {\n    const redContainer = document\n      .getElementById('tree-red')\n      .getBoundingClientRect();\n\n    const yellowContainer = document\n      .getElementById('tree-yellow')\n      .getBoundingClientRect();\n\n    const blueContainer = document\n      .getElementById('tree-blue')\n      .getBoundingClientRect();\n\n    setTimeout(\n      this.setState({\n        redX:\n          ((e.clientX - redContainer.left + window.scrollX) /\n            redContainer.width) *\n          100,\n        redY:\n          ((e.clientY - redContainer.top + window.scrollY) /\n            redContainer.height) *\n          100,\n        yellowX:\n          ((e.clientX - yellowContainer.left + window.scrollX) /\n            yellowContainer.width) *\n          100,\n        yellowY:\n          ((e.clientY - yellowContainer.top + window.scrollY) /\n            yellowContainer.height) *\n          100,\n        blueX:\n          ((e.clientX - blueContainer.left + window.scrollX) /\n            blueContainer.width) *\n          100,\n        blueY:\n          ((e.clientY - blueContainer.top + window.scrollY) /\n            blueContainer.height) *\n          100\n      }),\n      2000\n    );\n  };\n\n  /**\n   * Show a toast containing a list of missing prerequisite talents. Toast is\n   * hidden automatically after a delay.\n   *\n   * @memberof TreePanel\n   */\n  showPrereqToast = msg => {\n    this.setState({ prereqMsg: msg }, () => {\n      this.prereqToastRef.show();\n    });\n  };\n\n  /**\n   * Show toast warning about reaching the maximum talent point limit. Toast\n   * is hidden automatically after a delay.\n   *\n   * @memberof TreePanel\n   */\n  showPointLimitToast = () => {\n    this.pointLimitToastRef.show();\n  };\n\n  render() {\n    const sharedTreeProps = {\n      changeTalentValue: this.props.changeTalentValue,\n      calcPointsRemaining: this.props.calcPointsRemaining,\n      showPrereqToast: this.showPrereqToast,\n      showPointLimitToast: this.showPointLimitToast,\n      isShownValues: this.props.isShownValues,\n      isShownMouseXY: this.props.isShownMouseXY,\n      isShownTalentID: this.props.isShownTalentID,\n      isSpeedMode: this.props.isSpeedMode,\n      nodeSize: this.props.nodeSize,\n      treeData: this.props.treeData,\n      commander: this.props.commander\n    };\n\n    return (\n      <div id=\"tree-panel\" data-testid=\"tree-panel\">\n        <PrereqToast\n          ref={component => (this.prereqToastRef = component)}\n          msg={this.state.prereqMsg}\n        />\n        <ToastMessage\n          ref={component => (this.pointLimitToastRef = component)}\n          header=\"Talent Limit\"\n          body=\"You have spent the maximum number of talent points\"\n        />\n\n        {this.props.dataVersion < dataVersion && (\n          <div data-testid=\"version-warning\" id=\"version-warning\">\n            Warning: this build uses an <br /> old version of the game data\n          </div>\n        )}\n\n        {this.props.isEmbed ? (\n          <>\n            <div data-testid=\"embed-message\" id=\"embed-message\">\n              View full build:{' '}\n              <a href={getURL()} target=\"_blank\" rel=\"noopener noreferrer\">\n                {createSummaryString(\n                  this.props.commander,\n                  this.props.red,\n                  this.props.yellow,\n                  this.props.blue\n                )}\n                <FontAwesomeIcon id=\"external-icon\" icon={faExternalLinkAlt} />\n              </a>\n            </div>\n            <Banner show={true} embed={true} />\n          </>\n        ) : (\n          <Banner show={false} embed={false} />\n        )}\n\n        <div id=\"tree-square-container\">\n          <div id=\"tree-square-section\">\n            <div id=\"tree-square-content\">\n              <Tree\n                {...sharedTreeProps}\n                color={'red'}\n                treeName={getTreeName('red', this.props.commander)}\n                data={this.props.red}\n                mouseX={this.state.redX}\n                mouseY={this.state.redY}\n                isEmbed={this.props.isEmbed}\n              />\n              <Tree\n                {...sharedTreeProps}\n                color={'yellow'}\n                treeName={getTreeName('yellow', this.props.commander)}\n                data={this.props.yellow}\n                mouseX={this.state.yellowX}\n                mouseY={this.state.yellowY}\n                isEmbed={this.props.isEmbed}\n              />\n              <Tree\n                {...sharedTreeProps}\n                color={'blue'}\n                treeName={getTreeName('blue', this.props.commander)}\n                data={this.props.blue}\n                mouseX={this.state.blueX}\n                mouseY={this.state.blueY}\n                isEmbed={this.props.isEmbed}\n              />\n              <Hexagon\n                calcPointsSpent={this.props.calcPointsSpent}\n                isShownTotals={this.props.isShownTotals && this.props.commander}\n                commander={this.props.commander || 'unknown'}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TreePanel;\n"],"sourceRoot":""}