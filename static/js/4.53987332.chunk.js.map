{"version":3,"sources":["Popovers.js","Node.js","Tree.js","Hexagon.js","Toasts.js","TreePanel.js"],"names":["TalentTooltip","orientation","compressor","large","small","undefined","Popover","placement","this","props","style","outOfBoundaries","arrowProps","className","Title","talentname","minDeviceWidth","mobileBreakpoint","value","max","clear","Content","text","maxDeviceWidth","Container","id","Row","Col","icon","faMinusSquare","size","onClick","talentdecrease","xs","calcPointsRemaining","faPlusSquare","talentincrease","isShownTalentID","talentid","createPopover","Component","Node","talentIncrease","bind","talentDecrease","setTooltip","getStyle","nextProps","nextState","nodeSize","isShownValues","top","y","left","x","type","backgroundImage","image","color","talentValues","treeData","treeName","idx","replaceTalentText","tooltip","prereqs","prereq","prereqsOK","missingPrereqs","forEach","fullTree","getMaxTalentCount","values","push","key","name","changeTalentValue","jsPlumb","select","source","document","getElementById","addClass","showPrereqToast","showPointLimitToast","e","deps","dep","depsOK","removeClass","NodeOverlay","triggerProps","clickProps","useMediaQuery","query","trigger","onContextMenu","preventDefault","OverlayTrigger","rootClose","flip","delay","show","hide","overlay","talentName","data-testid","Tree","nodes","i","data","length","curNode","Error","drawNodes","isShownMouseXY","parseFloat","mouseX","toFixed","mouseY","Hexagon","commander","src","process","alt","toggleSelect","isShownTotals","calcPointsSpent","getTreeName","ToastMessage","state","open","setState","Toast","autohide","onClose","Header","header","Body","body","PrereqToast","msg","TreePanel","prereqMsg","setMousePosition","window","addEventListener","repaint","this_","ready","setContainer","drawLines","panZoomContainer","querySelector","panZoomInstance","panzoom","minZoom","maxZoom","pinchSpeed","zoomDoubleClickSpeed","bounds","boundsPadding","smoothScroll","onTouch","filterKey","on","click","removeEventListener","moveTo","zoomAbs","repaintEverything","deleteEveryEndpoint","setSuspendDrawing","Object","keys","nodeID","activateState","connect","target","endpoint","cssClass","radius","connector","anchors","shape","redContainer","getBoundingClientRect","yellowContainer","blueContainer","setTimeout","redX","clientX","scrollX","width","redY","clientY","scrollY","height","yellowX","yellowY","blueX","blueY","prereqToastRef","pointLimitToastRef","sharedTreeProps","ref","component","dataVersion","red","yellow","blue"],"mappings":"icAkBaA,G,OAAb,sLACgBC,GACZ,IAAIC,EAQJ,MANoB,WAAhBD,EACFC,EAAa,CAAEC,MAAO,IAAKC,MAAO,IACT,YAAhBH,IACTC,EAAa,CAAEC,MAAO,IAAKC,WAAOC,IAIlC,kBAACC,EAAA,EAAD,CACEC,UAAWC,KAAKC,MAAMF,UACtBG,MAAOF,KAAKC,MAAMC,MAClBC,gBAAiBH,KAAKC,MAAME,gBAC5BC,WAAYJ,KAAKC,MAAMG,WACvBC,UAAWL,KAAKC,MAAMI,WAEtB,kBAAC,IAAD,CAASX,WAAYA,EAAWC,OAC9B,6BACE,kBAACG,EAAA,EAAQQ,MAAT,KACE,6BACE,0BAAMD,UAAU,sBACbL,KAAKC,MAAMM,YAEd,kBAAC,IAAD,CAAYC,eAAgBC,IAAmB,GAC7C,0BAAMJ,UAAU,4BACbL,KAAKC,MAAMS,MAAQ,IAAMV,KAAKC,MAAMU,MAGzC,yBAAKT,MAAO,CAAEU,MAAO,YAIzB,kBAACd,EAAA,EAAQe,QAAT,CAAiBR,UAAU,qBACzB,6BACGL,KAAKC,MAAMS,QAAUV,KAAKC,MAAMU,KAC/B,6BACE,2CAIHX,KAAKC,MAAMa,KAEZ,kBAAC,IAAD,CAAYC,eAAgBN,KAC1B,kBAACO,EAAA,EAAD,CAAWC,GAAG,iCACZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGnB,KAAKC,MAAMS,MAAQ,GAClB,kBAAC,IAAD,CACEL,UAAU,+BACVe,KAAMC,IACNC,KAAK,KACLC,QAASvB,KAAKC,MAAMuB,kBAI1B,kBAACL,EAAA,EAAD,CAAKM,GAAI,GACP,kBAAC,IAAD,CAAS/B,WAAYA,EAAWE,OAC9B,0BAAMS,UAAU,6BACbL,KAAKC,MAAMS,MAAQ,IAAMV,KAAKC,MAAMU,OAI3C,kBAACQ,EAAA,EAAD,KACGnB,KAAKC,MAAMyB,sBAAwB,GAClC1B,KAAKC,MAAMS,QAAUV,KAAKC,MAAMU,KAC9B,kBAAC,IAAD,CACEN,UAAU,+BACVe,KAAMO,IACNL,KAAK,KACLC,QAASvB,KAAKC,MAAM2B,qBAQjC5B,KAAKC,MAAM4B,iBACV,yBAAKxB,UAAU,mBAAf,OACOL,KAAKC,MAAM6B,iBAjFpC,+BA6FI,OACE,oCACE,kBAAC,IAAD,CAAYtB,eAAgBC,IAAmB,GAC5CT,KAAK+B,cAAc,YAEtB,kBAAC,IAAD,CAAYhB,eAAgBN,KACzBT,KAAK+B,cAAc,gBAnG9B,GAAmCC,c,QCD7BC,G,mBACJ,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KAGDiC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,SAAW,EAAKA,SAASH,KAAd,gBAPC,E,mFAUGI,EAAWC,GAC/B,OACExC,KAAKC,MAAMS,QAAU6B,EAAU7B,OAC/BV,KAAKC,MAAMwC,WAAaF,EAAUE,UAClCzC,KAAKC,MAAMyC,gBAAkBH,EAAUG,eACvC1C,KAAKC,MAAM4B,kBAAoBU,EAAUV,kB,iCAiB3C,IAAI3B,EAAQ,GAWZ,OATAA,EAAMyC,IAAM3C,KAAKC,MAAM2C,EACvB1C,EAAM2C,KAAO7C,KAAKC,MAAM6C,EAEA,eAApB9C,KAAKC,MAAM8C,KACb7C,EAAM8C,gBAAN,6BAA8ChD,KAAKC,MAAMgD,MAAzD,SAEA/C,EAAM8C,gBAAN,6BAA8ChD,KAAKC,MAAMiD,MAAzD,qBAGKhD,I,mCAWP,IACIiD,EAAenD,KAAKC,MAAMmD,SAASpD,KAAKC,MAAMoD,UAAUrD,KAAKC,MAAMqD,KAApD,OAkBnB,OAdItD,KAAKC,MAAMS,QAAUV,KAAKC,MAAMU,IACxB4C,YACRvD,KAAKC,MAAMuD,QACXL,EACAnD,KAAKC,MAAMU,IAAM,GAGT4C,YACRvD,KAAKC,MAAMuD,QACXL,EACAnD,KAAKC,MAAMS,S,uCAgBC,IAAD,OACf,GAAIV,KAAKC,MAAMyB,sBAAwB,EAAG,CAExC,IAAM+B,EAAUzD,KAAKC,MAAMmD,SAASpD,KAAKC,MAAMoD,UAAUrD,KAAKC,MAAMqD,KACjEI,OAECC,GAAY,EACZC,EAAiB,GAErBH,EAAQI,SAAQ,SAAAP,GACM,EAAKrD,MAAM6D,SAASR,EAAM,KAC5BS,YAChB,EAAK9D,MAAMmD,SAAS,EAAKnD,MAAMoD,UAAUC,GAAKU,UAG9CL,GAAY,EACZC,EAAeK,KACb,wBAAIC,IAAKZ,GACP,gCACG,EAAKrD,MAAMmD,SAAS,EAAKnD,MAAMoD,UAAUC,GAAKa,YAOrDR,EACE3D,KAAKC,MAAMS,MAAQV,KAAKC,MAAMU,MAChCX,KAAKC,MAAMmE,kBACTpE,KAAKC,MAAMiD,MACXlD,KAAKC,MAAMqD,IACX,YAEFe,UACGC,OAAO,CACNC,OAAQC,SAASC,eAAT,UACHzE,KAAKC,MAAMoD,SAAWrD,KAAKC,MAAMqD,QAGvCoB,SANH,eAMoB1E,KAAKC,MAAMiD,SAGjClD,KAAKC,MAAM0E,gBAAgBf,QAG7B5D,KAAKC,MAAM2E,wB,qCAYAC,GAEb,IAAMC,EAAO9E,KAAKC,MAAMmD,SAASpD,KAAKC,MAAMoD,UAAUrD,KAAKC,MAAMqD,KAAKyB,IAElEC,GAAS,EAJG,uBAMhB,YAAgBF,EAAhB,+CAAsB,CAAC,IAAdxB,EAAa,QAEpB,GADiBtD,KAAKC,MAAM6D,SAASR,EAAM,GAC5B,EAAG,CAChB0B,GAAS,EACT,QAVY,kFAcZA,EAAUhF,KAAKC,MAAMS,MAAQ,IAC/BV,KAAKC,MAAMmE,kBACTpE,KAAKC,MAAMiD,MACXlD,KAAKC,MAAMqD,IACX,YAGuB,IAArBtD,KAAKC,MAAMS,OACb2D,UACGC,OAAO,CACNC,OAAQC,SAASC,eAAT,UACHzE,KAAKC,MAAMoD,SAAWrD,KAAKC,MAAMqD,QAGvC2B,YANH,eAMuBjF,KAAKC,MAAMiD,W,+BAMtC,IAAIxD,EAAiC,eAApBM,KAAKC,MAAM8C,KAAwB,GAAM,IAE1D,OACE,kBAAC,EAAD,iBACM/C,KAAKC,MADX,CAEEiC,eAAgBlC,KAAKkC,eACrBE,eAAgBpC,KAAKoC,eACrBC,WAAYrC,KAAKqC,WACjBC,SAAUtC,KAAKsC,SACf5C,WAAYA,EACZ+C,SAAUzC,KAAKC,MAAMwC,SACrBC,cAAe1C,KAAKC,MAAMyC,eAAsC,IAArB1C,KAAKC,MAAMS,a,GA5L3CsB,cAkMbkD,EAAc,SAAAjF,GAClB,IAGIkF,EAAcC,EAmBlB,OAtBiBC,wBAAc,CAC7BC,MAAM,eAAD,OAAiB7E,IAAjB,UAKL0E,EAAe,CAAEI,QAAS,SAC1BH,EAAa,CACX7D,aAAS1B,EACT2F,cAAe,SAAAX,GAAC,OAAIA,EAAEY,qBAGxBN,EAAe,CAAEI,QAAS,SAC1BH,EAAa,CACX7D,QAAS,kBAAMtB,EAAMiC,kBACrBsD,cAAe,SAAAX,GACbA,EAAEY,iBACFxF,EAAMmC,oBAMV,kBAACsD,EAAA,EAAD,iBACMP,EADN,CAEEpF,UAAU,QACV4F,WAAW,EACXC,MAAM,EACNC,MAAO,CAAEC,KAAM,EAAGC,KAAM,GACxBC,QACE,kBAAC,EAAD,CACEtE,oBAAqBzB,EAAMyB,oBAC3BF,eAAgBvB,EAAMmC,eACtBR,eAAgB3B,EAAMiC,eACtBL,gBAAiB5B,EAAM4B,gBACvByB,IAAKrD,EAAMqD,IACXxB,SAAU7B,EAAMoD,SAAWpD,EAAMqD,IACjC/C,WAAYN,EAAMgG,WAClBvF,MAAOT,EAAMS,MACbC,IAAKV,EAAMU,IACXG,KAAMb,EAAMoC,iBAIhB,yCACM+C,EADN,CAEEc,cAAajG,EAAMoD,SAAWpD,EAAMqD,IACpCrC,GAAIhB,EAAMoD,SAAWpD,EAAMqD,IAC3BjD,UAAS,eAAUJ,EAAM8C,KAAhB,YAAwB9C,EAAMwC,SAA9B,YACS,IAAhBxC,EAAMS,MAAc,gBAAkB,IAExCR,MAAOD,EAAMqC,aAEZrC,EAAMyC,eACL,kBAAC,IAAD,CAAShD,WAAYO,EAAMP,YACzB,yBAAKW,UAAU,aAAa6F,cAAY,cACrCjG,EAAMS,MAAQ,IAAMT,EAAMU,SAS1BsB,I,QCtMAkE,G,2LAnDX,IAHA,IAAIC,EAAQ,GACN/C,EAAWrD,KAAKC,MAAMoD,SAEnBgD,EAAI,EAAGA,EAAIrG,KAAKC,MAAMqG,KAAKC,OAAS,EAAGF,IAAK,CACnD,IAAIG,EAAUxG,KAAKC,MAAMmD,SAASC,GAAUgD,GAE5CD,EAAMnC,KACJ,kBAAC,EAAD,CACEG,kBAAmBpE,KAAKC,MAAMmE,kBAC9B1C,oBAAqB1B,KAAKC,MAAMyB,oBAChCiD,gBAAiB3E,KAAKC,MAAM0E,gBAC5BC,oBAAqB5E,KAAKC,MAAM2E,oBAChClC,cAAe1C,KAAKC,MAAMyC,cAC1Bb,gBAAiB7B,KAAKC,MAAM4B,gBAC5BY,SAAUzC,KAAKC,MAAMwC,SACrBW,SAAUpD,KAAKC,MAAMmD,SACrBc,IAAKb,EAAWgD,EAChB/C,IAAK+C,EACLhD,SAAUA,EACV4C,WAAYO,EAAO,KACnBvD,MAAOuD,EAAO,MACdhD,QAASgD,EAAO,KAChBzD,KAAMyD,EAAO,KACb9F,MAAOV,KAAKC,MAAMqG,KAAKD,EAAI,GAC3B1F,IAAKoD,YAAkByC,EAAO,QAC9B1C,SAAU9D,KAAKC,MAAMqG,KACrBxD,EAAG0D,EAAO,IAAQ,GAAK,IACvB5D,EAAG4D,EAAO,IAAQ,GAAK,IACvBtD,MAAOlD,KAAKC,MAAMiD,SAKxB,OAAOkD,I,+BAIP,OACE,kBAACK,EAAA,EAAD,KACE,yBAAKxF,GAAE,eAAUjB,KAAKC,MAAMiD,OAAS7C,UAAU,kBAC5CL,KAAK0G,YAEL1G,KAAKC,MAAM0G,gBACV,yBAAK1F,GAAE,eAAUjB,KAAKC,MAAMiD,MAArB,WAAP,MACM0D,WAAW5G,KAAKC,MAAM4G,QAAQC,QAAQ,GAD5C,MACmD,IAChDF,WAAW5G,KAAKC,MAAM8G,QAAQD,QAAQ,U,GAxDlC9E,cCuEJgF,G,wLAxEH,IAAD,OACP,QAAIhH,KAAKC,MAAMgH,WAEX,yBAAKhG,GAAG,eACN,yBAAKA,GAAG,cACN,yBACEiG,IAAKC,qCACLC,IAAK,uBAIT,yBACElB,cAAY,oBACZjF,GAAG,oBACHiG,IAAG,4BAAuBlH,KAAKC,MAAMgH,UAAlC,QACHG,IAAKpH,KAAKC,MAAMgH,UAChB1F,QAAS,WACP,EAAKtB,MAAMoH,kBAIf,yBAAKpG,GAAG,2BACN,yBAAKZ,UAAU,mCACb,kBAAC,IAAD,CAASX,WAAY,IACnB,6BACGM,KAAKC,MAAMqH,eACV,yBACEjH,UAAU,aACV6F,cAAY,cAFd,WAGMlG,KAAKC,MAAMsH,gBAAgB,OAHjC,MAKDC,YAAY,MAAOxH,KAAKC,MAAMgH,cAKrC,yBAAK5G,UAAU,sCACb,kBAAC,IAAD,CAASX,WAAY,IACnB,6BACGM,KAAKC,MAAMqH,eACV,yBACEjH,UAAU,aACV6F,cAAY,cAFd,WAGMlG,KAAKC,MAAMsH,gBAAgB,UAHjC,MAKDC,YAAY,SAAUxH,KAAKC,MAAMgH,cAKxC,yBAAK5G,UAAU,oCACb,kBAAC,IAAD,CAASX,WAAY,IACnB,6BACGM,KAAKC,MAAMqH,eACV,yBACEjH,UAAU,aACV6F,cAAY,cAFd,WAGMlG,KAAKC,MAAMsH,gBAAgB,QAHjC,MAKDC,YAAY,OAAQxH,KAAKC,MAAMgH,oB,GA5D5BjF,c,SCDTyF,G,OAAb,YACE,WAAYxH,GAAQ,IAAD,8BACjB,4CAAMA,KACDyH,MAAQ,CAAEC,MAAM,GAGrB,EAAK5B,KAAO,EAAKA,KAAK5D,KAAV,gBALK,EADrB,oEAUInC,KAAK4H,SAAS,CAAED,MAAM,MAV1B,6BAcI3H,KAAK4H,SAAS,CAAED,MAAM,MAd1B,+BAkBI,OACE,kBAACE,EAAA,EAAD,CAAOC,UAAQ,EAACjC,MAAO,IAAMC,KAAM9F,KAAK0H,MAAMC,KAAMI,QAAS/H,KAAK+F,MAChE,kBAAC8B,EAAA,EAAMG,OAAP,KACE,4BAAQ3H,UAAU,WAAWL,KAAKC,MAAMgI,SAE1C,kBAACJ,EAAA,EAAMK,KAAP,KAAalI,KAAKC,MAAMkI,WAvBhC,GAAkCnG,cAoCrBoG,EAAb,YACE,WAAYnI,GAAQ,IAAD,8BACjB,4CAAMA,KACDyH,MAAQ,CAAEC,MAAM,GAGrB,EAAK5B,KAAO,EAAKA,KAAK5D,KAAV,gBALK,EADrB,oEAUInC,KAAK4H,SAAS,CAAED,MAAM,MAV1B,6BAcI3H,KAAK4H,SAAS,CAAED,MAAM,MAd1B,+BAkBI,OACE,kBAACE,EAAA,EAAD,CAAOC,UAAQ,EAACjC,MAAO,IAAMC,KAAM9F,KAAK0H,MAAMC,KAAMI,QAAS/H,KAAK+F,MAChE,kBAAC8B,EAAA,EAAMG,OAAP,KACE,4BAAQ3H,UAAU,WAAlB,uBAEF,kBAACwH,EAAA,EAAMK,KAAP,mDAEGlI,KAAKC,MAAMoI,UAzBtB,GAAiCrG,a,QC7B3BsG,G,mBACJ,WAAYrI,GAAQ,IAAD,8BACjB,4CAAMA,KACDyH,MAAQ,CACXa,UAAW,IAIb,EAAK5D,gBAAkB,EAAKA,gBAAgBxC,KAArB,gBACvB,EAAKyC,oBAAsB,EAAKA,oBAAoBzC,KAAzB,gBAC3B,EAAKqG,iBAAmB,EAAKA,iBAAiBrG,KAAtB,gBATP,E,iFAkBjBsG,OAAOC,iBAAiB,SAAU1I,KAAK2I,SAEvC,IAAMC,EAAQ5I,KAEdqE,UAAQwE,OAAM,WACZxE,UAAQyE,aAAatE,SAASC,eAAe,wBAC7CmE,EAAMG,eAGR,IAAIC,EAAmBxE,SAASyE,cAAc,wBAC9CjJ,KAAKkJ,gBAAkBC,IAAQH,EAAkB,CAC/CI,QAAS,EACTC,QAAS,EACTC,WAAY,EACZC,qBAAsB,EACtBC,QAAQ,EACRC,cAAe,GACfC,cAAc,EACdC,QAAS,SAAS9E,GAChB,OAAO,GAET+E,UAAW,SAAS/E,GAClB,OAAO,KAKX7E,KAAKkJ,gBAAgBW,GAAG,aAAa,SAAShF,GAC5CL,SAAS2D,KAAK2B,a,6CAUhBrB,OAAOsB,oBAAoB,SAAU/J,KAAK2I,W,qCAU1C3I,KAAKkJ,gBAAgBc,OAAO,EAAG,GAC/BhK,KAAKkJ,gBAAgBe,QAAQ,EAAG,EAAG,K,gCASnC5F,UAAQ6F,sB,kCAQG,IAAD,OACNlK,KAAKC,MAAMgH,YACb5C,UAAQ8F,sBACR9F,UAAQ+F,mBAAkB,GAE1B,CAAC,MAAO,SAAU,QAAQvG,SAAQ,SAAAX,GAChC,IAAMG,EAAWmE,YAAYtE,EAAO,EAAKjD,MAAMgH,WAE/CoD,OAAOC,KAAK,EAAKrK,MAAMmD,SAASC,IAAWQ,SAAQ,SAAA0G,GACjD,IAAIC,EACgC,IAAlC,EAAKvK,MAAMiD,GAAOqH,EAAS,GAAW,GAAtC,eAAmDrH,GAErD,EAAKjD,MAAMmD,SAASC,GAAUkH,GAAQ7G,OAAOG,SAAQ,SAAAH,GACnDW,UAAQoG,QAAQ,CACdlG,OAAQC,SAASC,eAAT,UAA2BpB,GAA3B,OAAsCkH,IAC9CG,OAAQlG,SAASC,eAAT,UAA2BpB,GAA3B,OAAsCK,IAC9CiH,SAAU,CAAC,MAAO,CAAEC,SAAU,gBAAiBC,OAAQ,IACvDC,UAAW,CAAC,WAAY,CAAEF,SAAS,QAAD,OAAUJ,KAC5CO,QAAS,CACP,CAAC,YAAa,CAAEC,MAAO,WACvB,CAAC,YAAa,CAAEA,MAAO,uBAOjC3G,UAAQ+F,mBAAkB,GAAO,M,6CAU/BpK,KAAKC,MAAM0G,eACb8B,OAAOC,iBAAiB,YAAa1I,KAAKwI,kBAE1CC,OAAOsB,oBAAoB,YAAa/J,KAAKwI,oB,uCAUhC3D,GACf,IAAMoG,EAAezG,SAClBC,eAAe,YACfyG,wBAEGC,EAAkB3G,SACrBC,eAAe,eACfyG,wBAEGE,EAAgB5G,SACnBC,eAAe,aACfyG,wBAEHG,WACErL,KAAK4H,SAAS,CACZ0D,MACIzG,EAAE0G,QAAUN,EAAapI,KAAO4F,OAAO+C,SACvCP,EAAaQ,MACf,IACFC,MACI7G,EAAE8G,QAAUV,EAAatI,IAAM8F,OAAOmD,SACtCX,EAAaY,OACf,IACFC,SACIjH,EAAE0G,QAAUJ,EAAgBtI,KAAO4F,OAAO+C,SAC1CL,EAAgBM,MAClB,IACFM,SACIlH,EAAE8G,QAAUR,EAAgBxI,IAAM8F,OAAOmD,SACzCT,EAAgBU,OAClB,IACFG,OACInH,EAAE0G,QAAUH,EAAcvI,KAAO4F,OAAO+C,SACxCJ,EAAcK,MAChB,IACFQ,OACIpH,EAAE8G,QAAUP,EAAczI,IAAM8F,OAAOmD,SACvCR,EAAcS,OAChB,MAEJ,O,sCAUYxD,GAAM,IAAD,OACnBrI,KAAK4H,SAAS,CAAEW,UAAWF,IAAO,WAChC,EAAK6D,eAAepG,Y,4CAWtB9F,KAAKmM,mBAAmBrG,S,+BAGhB,IAAD,OACDsG,EAAkB,CACtBhI,kBAAmBpE,KAAKC,MAAMmE,kBAC9B1C,oBAAqB1B,KAAKC,MAAMyB,oBAChCiD,gBAAiB3E,KAAK2E,gBACtBC,oBAAqB5E,KAAK4E,oBAC1BlC,cAAe1C,KAAKC,MAAMyC,cAC1BiE,eAAgB3G,KAAKC,MAAM0G,eAC3B9E,gBAAiB7B,KAAKC,MAAM4B,gBAC5BY,SAAUzC,KAAKC,MAAMwC,SACrBW,SAAUpD,KAAKC,MAAMmD,SACrB6D,UAAWjH,KAAKC,MAAMgH,WAGxB,OACE,yBAAKhG,GAAG,aAAaiF,cAAY,cAC/B,kBAAC,EAAD,CACEmG,IAAK,SAAAC,GAAS,OAAK,EAAKJ,eAAiBI,GACzCjE,IAAKrI,KAAK0H,MAAMa,YAElB,kBAAC,EAAD,CACE8D,IAAK,SAAAC,GAAS,OAAK,EAAKH,mBAAqBG,GAC7CrE,OAAO,eACPE,KAAK,uDAGNnI,KAAKC,MAAMsM,YAAcA,KACxB,yBAAKrG,cAAY,kBAAkBjF,GAAG,mBAAtC,oCACmC,6BADnC,8BAKF,yBAAKA,GAAG,yBACN,yBAAKA,GAAG,uBACN,yBAAKA,GAAG,uBACN,kBAAC,EAAD,iBACMmL,EADN,CAEElJ,MAAO,MACPG,SAAUmE,YAAY,MAAOxH,KAAKC,MAAMgH,WACxCX,KAAMtG,KAAKC,MAAMuM,IACjB3F,OAAQ7G,KAAK0H,MAAM4D,KACnBvE,OAAQ/G,KAAK0H,MAAMgE,QAErB,kBAAC,EAAD,iBACMU,EADN,CAEElJ,MAAO,SACPG,SAAUmE,YAAY,SAAUxH,KAAKC,MAAMgH,WAC3CX,KAAMtG,KAAKC,MAAMwM,OACjB5F,OAAQ7G,KAAK0H,MAAMoE,QACnB/E,OAAQ/G,KAAK0H,MAAMqE,WAErB,kBAAC,EAAD,iBACMK,EADN,CAEElJ,MAAO,OACPG,SAAUmE,YAAY,OAAQxH,KAAKC,MAAMgH,WACzCX,KAAMtG,KAAKC,MAAMyM,KACjB7F,OAAQ7G,KAAK0H,MAAMsE,MACnBjF,OAAQ/G,KAAK0H,MAAMuE,SAErB,kBAAC,EAAD,CACE5E,aAAcrH,KAAKC,MAAMoH,aACzBE,gBAAiBvH,KAAKC,MAAMsH,gBAC5BD,cAAetH,KAAKC,MAAMqH,eAAiBtH,KAAKC,MAAMgH,UACtDA,UAAWjH,KAAKC,MAAMgH,WAAa,oB,GAxQ3BjF,cAkRTsG","file":"static/js/4.53987332.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport MediaQuery from 'react-responsive';\r\nimport FitText from '@kennethormandy/react-fittext';\r\nimport Popover from 'react-bootstrap/Popover';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { faPlusSquare, faMinusSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { mobileBreakpoint } from './values';\r\n\r\nimport './styles/Popovers.css';\r\n\r\n/**\r\n * Tooltip containing information about each talent node. Displayed when \r\n user hovers over a talent\r\n *\r\n */\r\nexport class TalentTooltip extends Component {\r\n  createPopover(orientation) {\r\n    let compressor;\r\n\r\n    if (orientation === 'mobile') {\r\n      compressor = { large: 2.1, small: 0.8 };\r\n    } else if (orientation === 'desktop') {\r\n      compressor = { large: 1.6, small: undefined };\r\n    }\r\n\r\n    return (\r\n      <Popover\r\n        placement={this.props.placement}\r\n        style={this.props.style}\r\n        outOfBoundaries={this.props.outOfBoundaries}\r\n        arrowProps={this.props.arrowProps}\r\n        className={this.props.className}\r\n      >\r\n        <FitText compressor={compressor.large}>\r\n          <div>\r\n            <Popover.Title>\r\n              <div>\r\n                <span className=\"node-tooltip-title\">\r\n                  {this.props.talentname}\r\n                </span>\r\n                <MediaQuery minDeviceWidth={mobileBreakpoint + 1}>\r\n                  <span className=\"node-tooltip-title-value\">\r\n                    {this.props.value + '/' + this.props.max}\r\n                  </span>\r\n                </MediaQuery>\r\n                <div style={{ clear: 'both' }}></div>\r\n              </div>\r\n            </Popover.Title>\r\n\r\n            <Popover.Content className=\"node-tooltip-body\">\r\n              <div>\r\n                {this.props.value !== this.props.max && (\r\n                  <div>\r\n                    <b>Next point:</b>\r\n                  </div>\r\n                )}\r\n\r\n                {this.props.text}\r\n\r\n                <MediaQuery maxDeviceWidth={mobileBreakpoint}>\r\n                  <Container id=\"node-tooltip-assign-container\">\r\n                    <Row>\r\n                      <Col>\r\n                        {this.props.value > 0 && (\r\n                          <FontAwesomeIcon\r\n                            className=\"node-tooltip-decrease-button\"\r\n                            icon={faMinusSquare}\r\n                            size=\"2x\"\r\n                            onClick={this.props.talentdecrease}\r\n                          />\r\n                        )}\r\n                      </Col>\r\n                      <Col xs={5}>\r\n                        <FitText compressor={compressor.small}>\r\n                          <span className=\"node-tooltip-assign-value\">\r\n                            {this.props.value + '/' + this.props.max}\r\n                          </span>\r\n                        </FitText>\r\n                      </Col>\r\n                      <Col>\r\n                        {this.props.calcPointsRemaining() > 0 &&\r\n                          this.props.value !== this.props.max && (\r\n                            <FontAwesomeIcon\r\n                              className=\"node-tooltip-increase-button\"\r\n                              icon={faPlusSquare}\r\n                              size=\"2x\"\r\n                              onClick={this.props.talentincrease}\r\n                            />\r\n                          )}\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                </MediaQuery>\r\n\r\n                {this.props.isShownTalentID && (\r\n                  <div className=\"node-tooltip-id\">\r\n                    ID: {this.props.talentid}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Popover.Content>\r\n          </div>\r\n        </FitText>\r\n      </Popover>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <MediaQuery minDeviceWidth={mobileBreakpoint + 1}>\r\n          {this.createPopover('desktop')}\r\n        </MediaQuery>\r\n        <MediaQuery maxDeviceWidth={mobileBreakpoint}>\r\n          {this.createPopover('mobile')}\r\n        </MediaQuery>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default { TalentTooltip };\r\n","import React, { Component } from 'react';\r\nimport FitText from '@kennethormandy/react-fittext';\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport { jsPlumb } from 'jsplumb';\r\nimport { TalentTooltip } from './Popovers';\r\nimport { replaceTalentText, getMaxTalentCount } from './utils';\r\nimport { mobileBreakpoint } from './values';\r\n\r\nimport './styles/Node.css';\r\n\r\n/**\r\n * Component for the individual talent nodes\r\n *\r\n * @class Node\r\n * @extends {Component}\r\n */\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Context bindings\r\n    this.talentIncrease = this.talentIncrease.bind(this);\r\n    this.talentDecrease = this.talentDecrease.bind(this);\r\n    this.setTooltip = this.setTooltip.bind(this);\r\n    this.getStyle = this.getStyle.bind(this);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (\r\n      this.props.value !== nextProps.value ||\r\n      this.props.nodeSize !== nextProps.nodeSize ||\r\n      this.props.isShownValues !== nextProps.isShownValues ||\r\n      this.props.isShownTalentID !== nextProps.isShownTalentID\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine styling of the node. Image depends on whether the node is\r\n   * a large skill node or a small stat node\r\n   *\r\n   * @returns {object} Object containing the CSS styles\r\n   * (e.g. positioning, background image) for the node\r\n   * @memberof Node\r\n   */\r\n  getStyle() {\r\n    let style = {};\r\n\r\n    style.top = this.props.y;\r\n    style.left = this.props.x;\r\n\r\n    if (this.props.type === 'node-large') {\r\n      style.backgroundImage = `url(images/talents/${this.props.image}.png)`;\r\n    } else {\r\n      style.backgroundImage = `url(images/talents/${this.props.color}GenericSmall.png)`;\r\n    }\r\n\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Set tooltip for the node. Tooltip text is dynamic as it depends on the\r\n   * current level of the node\r\n   *\r\n   * @returns {string} Updated tooltip text reflecting the level of the node\r\n   * @memberof Node\r\n   */\r\n  setTooltip() {\r\n    let tooltip;\r\n    let talentValues = this.props.treeData[this.props.treeName][this.props.idx][\r\n      'values'\r\n    ];\r\n\r\n    if (this.props.value === this.props.max) {\r\n      tooltip = replaceTalentText(\r\n        this.props.tooltip,\r\n        talentValues,\r\n        this.props.max - 1\r\n      );\r\n    } else {\r\n      tooltip = replaceTalentText(\r\n        this.props.tooltip,\r\n        talentValues,\r\n        this.props.value\r\n      );\r\n    }\r\n\r\n    return tooltip;\r\n  }\r\n\r\n  /**\r\n   * Increase the value of the clicked node. Controls whether the node can\r\n   * be increased (e.g. max level reached, max talent points spent), as well\r\n   * as the display of associated toasts and missing prerequisite talents\r\n   *\r\n   * Additionally, `this.state` is updated to reflect current node value\r\n   *\r\n   * @memberof Node\r\n   */\r\n  talentIncrease() {\r\n    if (this.props.calcPointsRemaining() > 0) {\r\n      // Check prerequisites\r\n      const prereqs = this.props.treeData[this.props.treeName][this.props.idx]\r\n        .prereq;\r\n\r\n      let prereqsOK = true;\r\n      let missingPrereqs = [];\r\n\r\n      prereqs.forEach(idx => {\r\n        const prereqValue = this.props.fullTree[idx - 1];\r\n        const prereqMax = getMaxTalentCount(\r\n          this.props.treeData[this.props.treeName][idx].values\r\n        );\r\n        if (prereqValue !== prereqMax) {\r\n          prereqsOK = false;\r\n          missingPrereqs.push(\r\n            <li key={idx}>\r\n              <strong>\r\n                {this.props.treeData[this.props.treeName][idx].name}\r\n              </strong>\r\n            </li>\r\n          );\r\n        }\r\n      });\r\n\r\n      if (prereqsOK) {\r\n        if (this.props.value < this.props.max) {\r\n          this.props.changeTalentValue(\r\n            this.props.color,\r\n            this.props.idx,\r\n            'increase'\r\n          );\r\n          jsPlumb\r\n            .select({\r\n              source: document.getElementById(\r\n                `${this.props.treeName + this.props.idx}`\r\n              )\r\n            })\r\n            .addClass(`line-${this.props.color}`);\r\n        }\r\n      } else {\r\n        this.props.showPrereqToast(missingPrereqs);\r\n      }\r\n    } else {\r\n      this.props.showPointLimitToast();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrease value of the clicked node and update `this.state` to reflect\r\n   * the new value. Checks whether the node can be decreased in the event of\r\n   * having dependent nodes. Context menu is disabled\r\n   *\r\n   * @param {MouseEvent} e Mouse context event\r\n   * @memberof Node\r\n   */\r\n  talentDecrease(e) {\r\n    // Check dependent nodes\r\n    const deps = this.props.treeData[this.props.treeName][this.props.idx].dep;\r\n\r\n    let depsOK = true;\r\n\r\n    for (let idx of deps) {\r\n      const depValue = this.props.fullTree[idx - 1];\r\n      if (depValue > 0) {\r\n        depsOK = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (depsOK & (this.props.value > 0)) {\r\n      this.props.changeTalentValue(\r\n        this.props.color,\r\n        this.props.idx,\r\n        'decrease'\r\n      );\r\n\r\n      if (this.props.value === 1) {\r\n        jsPlumb\r\n          .select({\r\n            source: document.getElementById(\r\n              `${this.props.treeName + this.props.idx}`\r\n            )\r\n          })\r\n          .removeClass(`line-${this.props.color}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let compressor = this.props.type === 'node-large' ? 0.3 : 0.25;\r\n\r\n    return (\r\n      <NodeOverlay\r\n        {...this.props}\r\n        talentIncrease={this.talentIncrease}\r\n        talentDecrease={this.talentDecrease}\r\n        setTooltip={this.setTooltip}\r\n        getStyle={this.getStyle}\r\n        compressor={compressor}\r\n        nodeSize={this.props.nodeSize}\r\n        isShownValues={this.props.isShownValues && this.props.value !== 0}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst NodeOverlay = props => {\r\n  const isMobile = useMediaQuery({\r\n    query: `(max-width: ${mobileBreakpoint}px)`\r\n  });\r\n  let triggerProps, clickProps;\r\n\r\n  if (isMobile) {\r\n    triggerProps = { trigger: 'click' };\r\n    clickProps = {\r\n      onClick: undefined,\r\n      onContextMenu: e => e.preventDefault()\r\n    };\r\n  } else {\r\n    triggerProps = { trigger: 'hover' };\r\n    clickProps = {\r\n      onClick: () => props.talentIncrease(),\r\n      onContextMenu: e => {\r\n        e.preventDefault();\r\n        props.talentDecrease();\r\n      }\r\n    };\r\n  }\r\n\r\n  return (\r\n    <OverlayTrigger\r\n      {...triggerProps}\r\n      placement=\"right\"\r\n      rootClose={true}\r\n      flip={true}\r\n      delay={{ show: 0, hide: 0 }}\r\n      overlay={\r\n        <TalentTooltip\r\n          calcPointsRemaining={props.calcPointsRemaining}\r\n          talentdecrease={props.talentDecrease}\r\n          talentincrease={props.talentIncrease}\r\n          isShownTalentID={props.isShownTalentID}\r\n          idx={props.idx}\r\n          talentid={props.treeName + props.idx}\r\n          talentname={props.talentName}\r\n          value={props.value}\r\n          max={props.max}\r\n          text={props.setTooltip()}\r\n        />\r\n      }\r\n    >\r\n      <div\r\n        {...clickProps}\r\n        data-testid={props.treeName + props.idx}\r\n        id={props.treeName + props.idx}\r\n        className={`node ${props.type}-${props.nodeSize} ${\r\n          props.value === 0 ? 'node-inactive' : ''\r\n        }`}\r\n        style={props.getStyle()}\r\n      >\r\n        {props.isShownValues && (\r\n          <FitText compressor={props.compressor}>\r\n            <div className=\"node-value\" data-testid=\"node-value\">\r\n              {props.value + '/' + props.max}\r\n            </div>\r\n          </FitText>\r\n        )}\r\n      </div>\r\n    </OverlayTrigger>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import React, { Component } from 'react';\r\nimport Node from './Node';\r\nimport ErrorBoundary from './Error';\r\nimport { getMaxTalentCount } from './utils';\r\n\r\nimport './styles/Tree.css';\r\n\r\n/**\r\n * Component for the individual talent trees\r\n *\r\n * @class Tree\r\n * @extends {Component}\r\n */\r\n\r\nclass Tree extends Component {\r\n  /**\r\n   * Create an array of all talent nodes for the current commander\r\n   *\r\n   * @param {number[]} values Array containing the node values stored\r\n   * in `this.state` for a given tree color\r\n   * @param {string} color Color of the tree to generate nodes for\r\n   * @returns {Array} Array of `Node`'s for a given tree\r\n   * @memberof Tree\r\n   */\r\n  drawNodes() {\r\n    let nodes = [];\r\n    const treeName = this.props.treeName;\r\n\r\n    for (let i = 1; i < this.props.data.length + 1; i++) {\r\n      var curNode = this.props.treeData[treeName][i];\r\n\r\n      nodes.push(\r\n        <Node\r\n          changeTalentValue={this.props.changeTalentValue}\r\n          calcPointsRemaining={this.props.calcPointsRemaining}\r\n          showPrereqToast={this.props.showPrereqToast}\r\n          showPointLimitToast={this.props.showPointLimitToast}\r\n          isShownValues={this.props.isShownValues}\r\n          isShownTalentID={this.props.isShownTalentID}\r\n          nodeSize={this.props.nodeSize}\r\n          treeData={this.props.treeData}\r\n          key={treeName + i}\r\n          idx={i}\r\n          treeName={treeName}\r\n          talentName={curNode['name']}\r\n          image={curNode['image']}\r\n          tooltip={curNode['text']}\r\n          type={curNode['type']}\r\n          value={this.props.data[i - 1]}\r\n          max={getMaxTalentCount(curNode['values'])}\r\n          fullTree={this.props.data}\r\n          x={curNode['pos'][0] + '%'}\r\n          y={curNode['pos'][1] + '%'}\r\n          color={this.props.color}\r\n        />\r\n      );\r\n    }\r\n\r\n    return nodes;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ErrorBoundary>\r\n        <div id={`tree-${this.props.color}`} className=\"tree-container\">\r\n          {this.drawNodes()}\r\n\r\n          {this.props.isShownMouseXY && (\r\n            <div id={`tree-${this.props.color}-mouse`}>\r\n              X: {parseFloat(this.props.mouseX).toFixed(1)} Y:{' '}\r\n              {parseFloat(this.props.mouseY).toFixed(1)}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </ErrorBoundary>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tree;\r\n","import React, { Component } from 'react';\r\nimport FitText from '@kennethormandy/react-fittext';\r\nimport { getTreeName } from './utils';\r\n\r\nimport './styles/Hexagon.css';\r\n\r\n/**\r\n * Component containing the central commander image and skill label hexagon\r\n *\r\n * @class Hexagon\r\n * @extends {Component}\r\n */\r\nclass Hexagon extends Component {\r\n  render() {\r\n    if (this.props.commander) {\r\n      return (\r\n        <div id=\"tree-center\">\r\n          <div id=\"hexagon-bg\">\r\n            <img\r\n              src={process.env.PUBLIC_URL + '/images/ui/hexagon.png'}\r\n              alt={'Commander Hexagon'}\r\n            ></img>\r\n          </div>\r\n\r\n          <img\r\n            data-testid=\"hexagon-commander\"\r\n            id=\"hexagon-commander\"\r\n            src={`images/commanders/${this.props.commander}.png`}\r\n            alt={this.props.commander}\r\n            onClick={() => {\r\n              this.props.toggleSelect();\r\n            }}\r\n          ></img>\r\n\r\n          <div id=\"hexagon-label-container\">\r\n            <div className=\"hexagon-label hexagon-label-red\">\r\n              <FitText compressor={0.7}>\r\n                <div>\r\n                  {this.props.isShownTotals && (\r\n                    <div\r\n                      className=\"tree-total\"\r\n                      data-testid=\"tree-total\"\r\n                    >{`(${this.props.calcPointsSpent('red')})`}</div>\r\n                  )}\r\n                  {getTreeName('red', this.props.commander)}\r\n                </div>\r\n              </FitText>\r\n            </div>\r\n\r\n            <div className=\"hexagon-label hexagon-label-yellow\">\r\n              <FitText compressor={0.7}>\r\n                <div>\r\n                  {this.props.isShownTotals && (\r\n                    <div\r\n                      className=\"tree-total\"\r\n                      data-testid=\"tree-total\"\r\n                    >{`(${this.props.calcPointsSpent('yellow')})`}</div>\r\n                  )}\r\n                  {getTreeName('yellow', this.props.commander)}\r\n                </div>\r\n              </FitText>\r\n            </div>\r\n\r\n            <div className=\"hexagon-label hexagon-label-blue\">\r\n              <FitText compressor={0.7}>\r\n                <div>\r\n                  {this.props.isShownTotals && (\r\n                    <div\r\n                      className=\"tree-total\"\r\n                      data-testid=\"tree-total\"\r\n                    >{`(${this.props.calcPointsSpent('blue')})`}</div>\r\n                  )}\r\n                  {getTreeName('blue', this.props.commander)}\r\n                </div>\r\n              </FitText>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Hexagon;\r\n","import React, { Component } from 'react';\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nimport './styles/Toasts.css';\r\n\r\n/**\r\n * Generic toast component\r\n *\r\n * @class ToastMessage\r\n * @extends {Component}\r\n */\r\nexport class ToastMessage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { open: false };\r\n\r\n    // Context bindings\r\n    this.hide = this.hide.bind(this);\r\n  }\r\n\r\n  show() {\r\n    this.setState({ open: true });\r\n  }\r\n\r\n  hide() {\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Toast autohide delay={2000} show={this.state.open} onClose={this.hide}>\r\n        <Toast.Header>\r\n          <strong className=\"mr-auto\">{this.props.header}</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>{this.props.body}</Toast.Body>\r\n      </Toast>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Toast showing warning message about missing talents that need to be\r\n * completed prior to the select talent.\r\n *\r\n * @class PrereqToast\r\n * @extends {Component}\r\n */\r\nexport class PrereqToast extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { open: false };\r\n\r\n    // Context bindings\r\n    this.hide = this.hide.bind(this);\r\n  }\r\n\r\n  show() {\r\n    this.setState({ open: true });\r\n  }\r\n\r\n  hide() {\r\n    this.setState({ open: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Toast autohide delay={2000} show={this.state.open} onClose={this.hide}>\r\n        <Toast.Header>\r\n          <strong className=\"mr-auto\">Incomplete Talents</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          Upgrade talents to the maximum level first:\r\n          {this.props.msg}\r\n        </Toast.Body>\r\n      </Toast>\r\n    );\r\n  }\r\n}\r\n\r\nexport default { ToastMessage, PrereqToast };\r\n","import React, { Component } from 'react';\r\nimport { jsPlumb } from 'jsplumb';\r\nimport panzoom from 'panzoom';\r\nimport Tree from './Tree';\r\nimport Hexagon from './Hexagon';\r\nimport { PrereqToast, ToastMessage } from './Toasts';\r\nimport { getTreeName } from './utils';\r\n\r\nimport { dataVersion } from '../package.json';\r\nimport './styles/TreePanel.css';\r\n\r\n/**\r\n * Component for the main tree panel. Controls the display of all nodes and\r\n * node selections\r\n *\r\n * @class TreePanel\r\n * @extends {Component}\r\n */\r\nclass TreePanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      prereqMsg: ''\r\n    };\r\n\r\n    // Context bindings\r\n    this.showPrereqToast = this.showPrereqToast.bind(this);\r\n    this.showPointLimitToast = this.showPointLimitToast.bind(this);\r\n    this.setMousePosition = this.setMousePosition.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Add event listeners and setup jsplumb container with initial lines\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.repaint);\r\n\r\n    const this_ = this;\r\n\r\n    jsPlumb.ready(function() {\r\n      jsPlumb.setContainer(document.getElementById('tree-square-content'));\r\n      this_.drawLines();\r\n    });\r\n\r\n    let panZoomContainer = document.querySelector('#tree-square-content');\r\n    this.panZoomInstance = panzoom(panZoomContainer, {\r\n      minZoom: 1,\r\n      maxZoom: 3,\r\n      pinchSpeed: 1,\r\n      zoomDoubleClickSpeed: 1,\r\n      bounds: true,\r\n      boundsPadding: 0.5,\r\n      smoothScroll: false,\r\n      onTouch: function(e) {\r\n        return false;\r\n      },\r\n      filterKey: function(e) {\r\n        return true;\r\n      }\r\n    });\r\n\r\n    // This has the effect of closing any open popovers\r\n    this.panZoomInstance.on('transform', function(e) {\r\n      document.body.click();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove event listeners on unmount\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.repaint);\r\n  }\r\n\r\n  /**\r\n   * Reset the pan/zoom state of the entire tree panel. Called on commander changes\r\n   * and talent resets\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  resetPanZoom() {\r\n    this.panZoomInstance.moveTo(0, 0);\r\n    this.panZoomInstance.zoomAbs(0, 0, 1);\r\n  }\r\n\r\n  /**\r\n   * Call for repainting jsplumb lines on window resize\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  repaint() {\r\n    jsPlumb.repaintEverything();\r\n  }\r\n\r\n  /**\r\n   * Draw lines between nodes\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  drawLines() {\r\n    if (this.props.commander) {\r\n      jsPlumb.deleteEveryEndpoint();\r\n      jsPlumb.setSuspendDrawing(true);\r\n\r\n      ['red', 'yellow', 'blue'].forEach(color => {\r\n        const treeName = getTreeName(color, this.props.commander);\r\n\r\n        Object.keys(this.props.treeData[treeName]).forEach(nodeID => {\r\n          var activateState =\r\n            this.props[color][nodeID - 1] === 0 ? '' : `line-${color}`;\r\n\r\n          this.props.treeData[treeName][nodeID].prereq.forEach(prereq => {\r\n            jsPlumb.connect({\r\n              source: document.getElementById(`${treeName}${nodeID}`),\r\n              target: document.getElementById(`${treeName}${prereq}`),\r\n              endpoint: ['Dot', { cssClass: 'line-endpoint', radius: 1 }],\r\n              connector: ['Straight', { cssClass: `line ${activateState}` }],\r\n              anchors: [\r\n                ['Perimeter', { shape: 'Circle' }],\r\n                ['Perimeter', { shape: 'Circle' }]\r\n              ]\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      jsPlumb.setSuspendDrawing(false, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle event listeners for setting mouse position\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  toggleMouseListeners() {\r\n    if (this.props.isShownMouseXY) {\r\n      window.addEventListener('mousemove', this.setMousePosition);\r\n    } else {\r\n      window.removeEventListener('mousemove', this.setMousePosition);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store mouse position relative to each tree container\r\n   *\r\n   * @param {MouseEvent} e Mouse move event\r\n   * @memberof TreePanel\r\n   */\r\n  setMousePosition(e) {\r\n    const redContainer = document\r\n      .getElementById('tree-red')\r\n      .getBoundingClientRect();\r\n\r\n    const yellowContainer = document\r\n      .getElementById('tree-yellow')\r\n      .getBoundingClientRect();\r\n\r\n    const blueContainer = document\r\n      .getElementById('tree-blue')\r\n      .getBoundingClientRect();\r\n\r\n    setTimeout(\r\n      this.setState({\r\n        redX:\r\n          ((e.clientX - redContainer.left + window.scrollX) /\r\n            redContainer.width) *\r\n          100,\r\n        redY:\r\n          ((e.clientY - redContainer.top + window.scrollY) /\r\n            redContainer.height) *\r\n          100,\r\n        yellowX:\r\n          ((e.clientX - yellowContainer.left + window.scrollX) /\r\n            yellowContainer.width) *\r\n          100,\r\n        yellowY:\r\n          ((e.clientY - yellowContainer.top + window.scrollY) /\r\n            yellowContainer.height) *\r\n          100,\r\n        blueX:\r\n          ((e.clientX - blueContainer.left + window.scrollX) /\r\n            blueContainer.width) *\r\n          100,\r\n        blueY:\r\n          ((e.clientY - blueContainer.top + window.scrollY) /\r\n            blueContainer.height) *\r\n          100\r\n      }),\r\n      2000\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Show a toast containing a list of missing prerequisite talents. Toast is\r\n   * hidden automatically after a delay.\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  showPrereqToast(msg) {\r\n    this.setState({ prereqMsg: msg }, () => {\r\n      this.prereqToastRef.show();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show toast warning about reaching the maximum talent point limit. Toast\r\n   * is hidden automatically after a delay.\r\n   *\r\n   * @memberof TreePanel\r\n   */\r\n  showPointLimitToast() {\r\n    this.pointLimitToastRef.show();\r\n  }\r\n\r\n  render() {\r\n    const sharedTreeProps = {\r\n      changeTalentValue: this.props.changeTalentValue,\r\n      calcPointsRemaining: this.props.calcPointsRemaining,\r\n      showPrereqToast: this.showPrereqToast,\r\n      showPointLimitToast: this.showPointLimitToast,\r\n      isShownValues: this.props.isShownValues,\r\n      isShownMouseXY: this.props.isShownMouseXY,\r\n      isShownTalentID: this.props.isShownTalentID,\r\n      nodeSize: this.props.nodeSize,\r\n      treeData: this.props.treeData,\r\n      commander: this.props.commander\r\n    };\r\n\r\n    return (\r\n      <div id=\"tree-panel\" data-testid=\"tree-panel\">\r\n        <PrereqToast\r\n          ref={component => (this.prereqToastRef = component)}\r\n          msg={this.state.prereqMsg}\r\n        />\r\n        <ToastMessage\r\n          ref={component => (this.pointLimitToastRef = component)}\r\n          header=\"Talent Limit\"\r\n          body=\"You have spent the maximum number of talent points\"\r\n        />\r\n\r\n        {this.props.dataVersion < dataVersion && (\r\n          <div data-testid=\"version-warning\" id=\"version-warning\">\r\n            (warning: this build uses an old <br /> version of the game data)\r\n          </div>\r\n        )}\r\n\r\n        <div id=\"tree-square-container\">\r\n          <div id=\"tree-square-section\">\r\n            <div id=\"tree-square-content\">\r\n              <Tree\r\n                {...sharedTreeProps}\r\n                color={'red'}\r\n                treeName={getTreeName('red', this.props.commander)}\r\n                data={this.props.red}\r\n                mouseX={this.state.redX}\r\n                mouseY={this.state.redY}\r\n              />\r\n              <Tree\r\n                {...sharedTreeProps}\r\n                color={'yellow'}\r\n                treeName={getTreeName('yellow', this.props.commander)}\r\n                data={this.props.yellow}\r\n                mouseX={this.state.yellowX}\r\n                mouseY={this.state.yellowY}\r\n              />\r\n              <Tree\r\n                {...sharedTreeProps}\r\n                color={'blue'}\r\n                treeName={getTreeName('blue', this.props.commander)}\r\n                data={this.props.blue}\r\n                mouseX={this.state.blueX}\r\n                mouseY={this.state.blueY}\r\n              />\r\n              <Hexagon\r\n                toggleSelect={this.props.toggleSelect}\r\n                calcPointsSpent={this.props.calcPointsSpent}\r\n                isShownTotals={this.props.isShownTotals && this.props.commander}\r\n                commander={this.props.commander || 'unknown'}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TreePanel;\r\n"],"sourceRoot":""}